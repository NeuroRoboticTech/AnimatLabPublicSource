'------------------------------------------------------------------------------
'  <auto-generated>
'      This code was generated by coded UI test builder.
'      Version: 10.0.0.0
'
'      Changes to this file may cause incorrect behavior and will be lost if
'      the code is regenerated.
'  </auto-generated>
' ------------------------------------------------------------------------------

Imports System
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Text.RegularExpressions
Imports System.Windows.Input
Imports Microsoft.VisualStudio.TestTools.UITest.Extension
Imports Microsoft.VisualStudio.TestTools.UITesting
Imports Microsoft.VisualStudio.TestTools.UITesting.WinControls
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard
Imports Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse
Imports MouseButtons = System.Windows.Forms.MouseButtons

Namespace AnimatTesting
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Partial Public Class UIMap
        
        '''<summary>
        '''NewProjectDlg_EnterNameAndPath - Use 'NewProjectDlg_EnterNameAndPathParams' to pass parameters into this method.
        '''</summary>
        Public Sub NewProjectDlg_EnterNameAndPath()
            Dim uITxtProjectNameEdit As WinEdit = Me.UINewProjectWindow.UINewProjectWindow1.UITxtProjectNameEdit
            Dim uITxtLocationEdit As WinEdit = Me.UINewProjectWindow.UITxtLocationWindow.UITxtLocationEdit
            Dim uIOKButton As WinButton = Me.UINewProjectWindow.UIOKWindow.UIOKButton

            'Type 'TestProject' in 'txtProjectName' text box
            uITxtProjectNameEdit.Text = Me.NewProjectDlg_EnterNameAndPathParams.UITxtProjectNameEditText

            'Type '{Tab}' in 'txtProjectName' text box
            Keyboard.SendKeys(uITxtProjectNameEdit, Me.NewProjectDlg_EnterNameAndPathParams.UITxtProjectNameEditSendKeys, ModifierKeys.None)

            'Type 'C:\Projects\AnimatLabSDK\Experiments' in 'txtLocation' text box
            uITxtLocationEdit.Text = Me.NewProjectDlg_EnterNameAndPathParams.UITxtLocationEditText

            'Click 'Ok' button
            Mouse.Click(uIOKButton, New Point(34, 15))
        End Sub
        
        '''<summary>
        '''AddRootPartType - Use 'AddRootPartTypeParams' to pass parameters into this method.
        '''</summary>
        Public Sub AddRootPartType()
            Dim uICtrlPartTypesList As WinList = Me.UISelectPartTypeWindow.UICtrlPartTypesWindow.UICtrlPartTypesList
            Dim uIOKButton As WinButton = Me.UISelectPartTypeWindow.UIOKWindow.UIOKButton

            'Select 'Box' in 'ctrlPartTypes' list box
            uICtrlPartTypesList.SelectedItemsAsString = Me.AddRootPartTypeParams.UICtrlPartTypesListSelectedItemsAsString

            'Click 'Ok' button
            Mouse.Click(uIOKButton, New Point(22, 10))
        End Sub
        
        '''<summary>
        '''AddChildPartTypeWithJoint - Use 'AddChildPartTypeWithJointParams' to pass parameters into this method.
        '''</summary>
        Public Sub AddChildPartTypeWithJoint()
            Dim uICtrlPartTypesList As WinList = Me.UISelectPartTypeWindow.UICtrlPartTypesWindow.UICtrlPartTypesList
            Dim uIOKButton As WinButton = Me.UISelectPartTypeWindow.UIOKWindow.UIOKButton

            'Select 'Box' in 'ctrlPartTypes' list box
            uICtrlPartTypesList.SelectedItemsAsString = Me.AddChildPartTypeWithJointParams.UICtrlPartTypesListSelectedItemsAsString

            'Click 'Ok' button
            Mouse.Click(uIOKButton, New Point(40, 9))

            'Select 'Hinge' in 'ctrlPartTypes' list box
            uICtrlPartTypesList.SelectedItemsAsString = Me.AddChildPartTypeWithJointParams.UICtrlPartTypesListSelectedItemsAsString1

            'Click 'Ok' button
            Mouse.Click(uIOKButton, New Point(45, 12))
        End Sub
        
        '''<summary>
        '''AddLineChart - Use 'AddLineChartParams' to pass parameters into this method.
        '''</summary>
        Public Sub AddLineChart()
            Dim uICtrlToolTypesList As WinList = Me.UISelectDataToolTypeWindow.UICtrlToolTypesWindow.UICtrlToolTypesList
            Dim uIOKButton As WinButton = Me.UISelectDataToolTypeWindow.UIOKWindow.UIOKButton

            'Select 'Line Chart' in 'ctrlToolTypes' list box
            uICtrlToolTypesList.SelectedItemsAsString = Me.AddLineChartParams.UICtrlToolTypesListSelectedItemsAsString

            'Click 'Ok' button
            Mouse.Click(uIOKButton, New Point(36, 14))
        End Sub
        
        '''<summary>
        '''AddRootPartToChart
        '''</summary>
        Public Sub AddRootPartToChart()
            Dim uITvStructuresClient As WinClient = Me.UISelectDataItemWindow.UITvStructuresWindow.UITvStructuresClient
            Dim uIOKButton As WinButton = Me.UISelectDataItemWindow.UIOKWindow.UIOKButton

            'Click 'tvStructures' client
            Mouse.Click(uITvStructuresClient, New Point(56, 26))

            'Click 'Ok' button
            Mouse.Click(uIOKButton, New Point(22, 8))
        End Sub
        
        '''<summary>
        '''AssertNewProjectAlreadyExists - Use 'AssertNewProjectAlreadyExistsExpectedValues' to pass parameters into this method.
        '''</summary>
        Public Sub AssertNewProjectAlreadyExists()
            Dim uITxtErrorMsgEdit As WinEdit = Me.UIErrorWindow.UIThedirectoryCProjectWindow.UITxtErrorMsgEdit

            'Verify that 'txtErrorMsg' text box's property 'Text' ends with '' already exists. Please choose a different name or location for the project.'
            StringAssert.EndsWith(uITxtErrorMsgEdit.Text, Me.AssertNewProjectAlreadyExistsExpectedValues.UITxtErrorMsgEditText)
        End Sub
        
        '''<summary>
        '''CloseNewProjectErrorWindow
        '''</summary>
        Public Sub CloseNewProjectErrorWindow()
            Dim uIOKButton As WinButton = Me.UIErrorWindow.UIOKWindow.UIOKButton
            Dim uICancelButton As WinButton = Me.UINewProjectWindow.UICancelWindow.UICancelButton

            'Click 'Ok' button
            Mouse.Click(uIOKButton, New Point(40, 11))

            'Click 'Cancel' button
            Mouse.Click(uICancelButton, New Point(38, 14))
        End Sub
        
        '''<summary>
        '''ZoomInOnRootPart
        '''</summary>
        Public Sub ZoomInOnRootPart()
            Dim uIStructure_1BodyClient As WinClient = Me.UIBoxTestProjectWindow.UIStructure_1BodyWindow.UIStructure_1BodyClient
            Dim uISimulationControllerClient As WinClient = Me.UIBoxTestProjectWindow.UIItemWindow.UIToolStripContainer1Client.UISimulationControllerClient

            'Move using Right button 'Structure_1 Body' client from (877, 353) to 'Simulation Controller' client (873, 12)
            uISimulationControllerClient.EnsureClickable(New Point(873, 12))
            Mouse.StartDragging(uIStructure_1BodyClient, New Point(877, 353), MouseButtons.Right, ModifierKeys.None)
            Mouse.StopDragging(uISimulationControllerClient, New Point(873, 12))

            'Move using Right button 'Structure_1 Body' client from (921, 203) to (922, 359)
            Mouse.StartDragging(uIStructure_1BodyClient, New Point(921, 203), MouseButtons.Right, ModifierKeys.None)
            Mouse.StopDragging(uIStructure_1BodyClient, 1, 156)
        End Sub
        
        #Region "Properties"
        Public Overridable ReadOnly Property NewProjectDlg_EnterNameAndPathParams() As NewProjectDlg_EnterNameAndPathParams
            Get
                If (Me.mNewProjectDlg_EnterNameAndPathParams Is Nothing) Then
                    Me.mNewProjectDlg_EnterNameAndPathParams = New NewProjectDlg_EnterNameAndPathParams()
                End If
                Return Me.mNewProjectDlg_EnterNameAndPathParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property AddRootPartTypeParams() As AddRootPartTypeParams
            Get
                If (Me.mAddRootPartTypeParams Is Nothing) Then
                    Me.mAddRootPartTypeParams = New AddRootPartTypeParams()
                End If
                Return Me.mAddRootPartTypeParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property AddChildPartTypeWithJointParams() As AddChildPartTypeWithJointParams
            Get
                If (Me.mAddChildPartTypeWithJointParams Is Nothing) Then
                    Me.mAddChildPartTypeWithJointParams = New AddChildPartTypeWithJointParams()
                End If
                Return Me.mAddChildPartTypeWithJointParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property AddLineChartParams() As AddLineChartParams
            Get
                If (Me.mAddLineChartParams Is Nothing) Then
                    Me.mAddLineChartParams = New AddLineChartParams()
                End If
                Return Me.mAddLineChartParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property AssertNewProjectAlreadyExistsExpectedValues() As AssertNewProjectAlreadyExistsExpectedValues
            Get
                If (Me.mAssertNewProjectAlreadyExistsExpectedValues Is Nothing) Then
                    Me.mAssertNewProjectAlreadyExistsExpectedValues = New AssertNewProjectAlreadyExistsExpectedValues()
                End If
                Return Me.mAssertNewProjectAlreadyExistsExpectedValues
            End Get
        End Property
        
        Public ReadOnly Property UINewProjectWindow() As UINewProjectWindow
            Get
                If (Me.mUINewProjectWindow Is Nothing) Then
                    Me.mUINewProjectWindow = New UINewProjectWindow()
                End If
                Return Me.mUINewProjectWindow
            End Get
        End Property
        
        Public ReadOnly Property UISelectPartTypeWindow() As UISelectPartTypeWindow
            Get
                If (Me.mUISelectPartTypeWindow Is Nothing) Then
                    Me.mUISelectPartTypeWindow = New UISelectPartTypeWindow()
                End If
                Return Me.mUISelectPartTypeWindow
            End Get
        End Property
        
        Public ReadOnly Property UISelectDataToolTypeWindow() As UISelectDataToolTypeWindow
            Get
                If (Me.mUISelectDataToolTypeWindow Is Nothing) Then
                    Me.mUISelectDataToolTypeWindow = New UISelectDataToolTypeWindow()
                End If
                Return Me.mUISelectDataToolTypeWindow
            End Get
        End Property
        
        Public ReadOnly Property UISelectDataItemWindow() As UISelectDataItemWindow
            Get
                If (Me.mUISelectDataItemWindow Is Nothing) Then
                    Me.mUISelectDataItemWindow = New UISelectDataItemWindow()
                End If
                Return Me.mUISelectDataItemWindow
            End Get
        End Property
        
        Public ReadOnly Property UIErrorWindow() As UIErrorWindow
            Get
                If (Me.mUIErrorWindow Is Nothing) Then
                    Me.mUIErrorWindow = New UIErrorWindow()
                End If
                Return Me.mUIErrorWindow
            End Get
        End Property
        
        Public ReadOnly Property UIBoxTestProjectWindow() As UIBoxTestProjectWindow
            Get
                If (Me.mUIBoxTestProjectWindow Is Nothing) Then
                    Me.mUIBoxTestProjectWindow = New UIBoxTestProjectWindow()
                End If
                Return Me.mUIBoxTestProjectWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mNewProjectDlg_EnterNameAndPathParams As NewProjectDlg_EnterNameAndPathParams
        
        Private mAddRootPartTypeParams As AddRootPartTypeParams
        
        Private mAddChildPartTypeWithJointParams As AddChildPartTypeWithJointParams
        
        Private mAddLineChartParams As AddLineChartParams
        
        Private mAssertNewProjectAlreadyExistsExpectedValues As AssertNewProjectAlreadyExistsExpectedValues
        
        Private mUINewProjectWindow As UINewProjectWindow
        
        Private mUISelectPartTypeWindow As UISelectPartTypeWindow
        
        Private mUISelectDataToolTypeWindow As UISelectDataToolTypeWindow
        
        Private mUISelectDataItemWindow As UISelectDataItemWindow
        
        Private mUIErrorWindow As UIErrorWindow
        
        Private mUIBoxTestProjectWindow As UIBoxTestProjectWindow
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'NewProjectDlg_EnterNameAndPath'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class NewProjectDlg_EnterNameAndPathParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'TestProject' in 'txtProjectName' text box
        '''</summary>
        Public UITxtProjectNameEditText As String = "TestProject"
        
        '''<summary>
        '''Type '{Tab}' in 'txtProjectName' text box
        '''</summary>
        Public UITxtProjectNameEditSendKeys As String = "{Tab}"
        
        '''<summary>
        '''Type 'C:\Projects\AnimatLabSDK\Experiments' in 'txtLocation' text box
        '''</summary>
        Public UITxtLocationEditText As String = "C:\Projects\AnimatLabSDK\Experiments"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'AddRootPartType'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class AddRootPartTypeParams
        
        #Region "Fields"
        '''<summary>
        '''Select 'Box' in 'ctrlPartTypes' list box
        '''</summary>
        Public UICtrlPartTypesListSelectedItemsAsString As String = "Box"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'AddChildPartTypeWithJoint'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class AddChildPartTypeWithJointParams
        
        #Region "Fields"
        '''<summary>
        '''Select 'Box' in 'ctrlPartTypes' list box
        '''</summary>
        Public UICtrlPartTypesListSelectedItemsAsString As String = "Box"
        
        '''<summary>
        '''Select 'Hinge' in 'ctrlPartTypes' list box
        '''</summary>
        Public UICtrlPartTypesListSelectedItemsAsString1 As String = "Hinge"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'AddLineChart'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class AddLineChartParams
        
        #Region "Fields"
        '''<summary>
        '''Select 'Line Chart' in 'ctrlToolTypes' list box
        '''</summary>
        Public UICtrlToolTypesListSelectedItemsAsString As String = "Line Chart"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'AssertNewProjectAlreadyExists'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class AssertNewProjectAlreadyExistsExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that 'txtErrorMsg' text box's property 'Text' ends with '' already exists. Please choose a different name or location for the project.'
        '''</summary>
        Public UITxtErrorMsgEditText As String = "' already exists. Please choose a different name or location for the project."
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UINewProjectWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "New Project"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("New Project")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UINewProjectWindow1() As UINewProjectWindow1
            Get
                If (Me.mUINewProjectWindow1 Is Nothing) Then
                    Me.mUINewProjectWindow1 = New UINewProjectWindow1(Me)
                End If
                Return Me.mUINewProjectWindow1
            End Get
        End Property
        
        Public ReadOnly Property UITxtLocationWindow() As UITxtLocationWindow
            Get
                If (Me.mUITxtLocationWindow Is Nothing) Then
                    Me.mUITxtLocationWindow = New UITxtLocationWindow(Me)
                End If
                Return Me.mUITxtLocationWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOKWindow() As UIOKWindow
            Get
                If (Me.mUIOKWindow Is Nothing) Then
                    Me.mUIOKWindow = New UIOKWindow(Me)
                End If
                Return Me.mUIOKWindow
            End Get
        End Property
        
        Public ReadOnly Property UICancelWindow() As UICancelWindow
            Get
                If (Me.mUICancelWindow Is Nothing) Then
                    Me.mUICancelWindow = New UICancelWindow(Me)
                End If
                Return Me.mUICancelWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUINewProjectWindow1 As UINewProjectWindow1
        
        Private mUITxtLocationWindow As UITxtLocationWindow
        
        Private mUIOKWindow As UIOKWindow
        
        Private mUICancelWindow As UICancelWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UINewProjectWindow1
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "txtProjectName"
            Me.WindowTitles.Add("New Project")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UITxtProjectNameEdit() As WinEdit
            Get
                If (Me.mUITxtProjectNameEdit Is Nothing) Then
                    Me.mUITxtProjectNameEdit = New WinEdit(Me)
                    Me.mUITxtProjectNameEdit.SearchProperties(WinEdit.PropertyNames.Name) = "Location"
                    Me.mUITxtProjectNameEdit.WindowTitles.Add("New Project")
                End If
                Return Me.mUITxtProjectNameEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUITxtProjectNameEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UITxtLocationWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "txtLocation"
            Me.WindowTitles.Add("New Project")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UITxtLocationEdit() As WinEdit
            Get
                If (Me.mUITxtLocationEdit Is Nothing) Then
                    Me.mUITxtLocationEdit = New WinEdit(Me)
                    Me.mUITxtLocationEdit.WindowTitles.Add("New Project")
                End If
                Return Me.mUITxtLocationEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUITxtLocationEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UIOKWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "btnOk"
            Me.WindowTitles.Add("New Project")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOKButton() As WinButton
            Get
                If (Me.mUIOKButton Is Nothing) Then
                    Me.mUIOKButton = New WinButton(Me)
                    Me.mUIOKButton.SearchProperties(WinButton.PropertyNames.Name) = "Ok"
                    Me.mUIOKButton.WindowTitles.Add("New Project")
                End If
                Return Me.mUIOKButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOKButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UICancelWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "btnCancel"
            Me.WindowTitles.Add("New Project")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICancelButton() As WinButton
            Get
                If (Me.mUICancelButton Is Nothing) Then
                    Me.mUICancelButton = New WinButton(Me)
                    Me.mUICancelButton.SearchProperties(WinButton.PropertyNames.Name) = "Cancel"
                    Me.mUICancelButton.WindowTitles.Add("New Project")
                End If
                Return Me.mUICancelButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICancelButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UISelectPartTypeWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Select Part Type"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Select Part Type")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICtrlPartTypesWindow() As UICtrlPartTypesWindow
            Get
                If (Me.mUICtrlPartTypesWindow Is Nothing) Then
                    Me.mUICtrlPartTypesWindow = New UICtrlPartTypesWindow(Me)
                End If
                Return Me.mUICtrlPartTypesWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOKWindow() As UIOKWindow1
            Get
                If (Me.mUIOKWindow Is Nothing) Then
                    Me.mUIOKWindow = New UIOKWindow1(Me)
                End If
                Return Me.mUIOKWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICtrlPartTypesWindow As UICtrlPartTypesWindow
        
        Private mUIOKWindow As UIOKWindow1
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UICtrlPartTypesWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "ctrlPartTypes"
            Me.WindowTitles.Add("Select Part Type")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICtrlPartTypesList() As WinList
            Get
                If (Me.mUICtrlPartTypesList Is Nothing) Then
                    Me.mUICtrlPartTypesList = New WinList(Me)
                    Me.mUICtrlPartTypesList.WindowTitles.Add("Select Part Type")
                End If
                Return Me.mUICtrlPartTypesList
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICtrlPartTypesList As WinList
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UIOKWindow1
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "btnOk"
            Me.WindowTitles.Add("Select Part Type")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOKButton() As WinButton
            Get
                If (Me.mUIOKButton Is Nothing) Then
                    Me.mUIOKButton = New WinButton(Me)
                    Me.mUIOKButton.SearchProperties(WinButton.PropertyNames.Name) = "Ok"
                    Me.mUIOKButton.WindowTitles.Add("Select Part Type")
                End If
                Return Me.mUIOKButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOKButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UISelectDataToolTypeWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Select Data Tool Type"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Select Data Tool Type")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICtrlToolTypesWindow() As UICtrlToolTypesWindow
            Get
                If (Me.mUICtrlToolTypesWindow Is Nothing) Then
                    Me.mUICtrlToolTypesWindow = New UICtrlToolTypesWindow(Me)
                End If
                Return Me.mUICtrlToolTypesWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOKWindow() As UIOKWindow2
            Get
                If (Me.mUIOKWindow Is Nothing) Then
                    Me.mUIOKWindow = New UIOKWindow2(Me)
                End If
                Return Me.mUIOKWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICtrlToolTypesWindow As UICtrlToolTypesWindow
        
        Private mUIOKWindow As UIOKWindow2
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UICtrlToolTypesWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "ctrlToolTypes"
            Me.WindowTitles.Add("Select Data Tool Type")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICtrlToolTypesList() As WinList
            Get
                If (Me.mUICtrlToolTypesList Is Nothing) Then
                    Me.mUICtrlToolTypesList = New WinList(Me)
                    Me.mUICtrlToolTypesList.WindowTitles.Add("Select Data Tool Type")
                End If
                Return Me.mUICtrlToolTypesList
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICtrlToolTypesList As WinList
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UIOKWindow2
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "btnOk"
            Me.WindowTitles.Add("Select Data Tool Type")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOKButton() As WinButton
            Get
                If (Me.mUIOKButton Is Nothing) Then
                    Me.mUIOKButton = New WinButton(Me)
                    Me.mUIOKButton.SearchProperties(WinButton.PropertyNames.Name) = "Ok"
                    Me.mUIOKButton.WindowTitles.Add("Select Data Tool Type")
                End If
                Return Me.mUIOKButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOKButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UISelectDataItemWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Select Data Item"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Select Data Item")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UITvStructuresWindow() As UITvStructuresWindow
            Get
                If (Me.mUITvStructuresWindow Is Nothing) Then
                    Me.mUITvStructuresWindow = New UITvStructuresWindow(Me)
                End If
                Return Me.mUITvStructuresWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOKWindow() As UIOKWindow3
            Get
                If (Me.mUIOKWindow Is Nothing) Then
                    Me.mUIOKWindow = New UIOKWindow3(Me)
                End If
                Return Me.mUIOKWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUITvStructuresWindow As UITvStructuresWindow
        
        Private mUIOKWindow As UIOKWindow3
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UITvStructuresWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "tvStructures"
            Me.WindowTitles.Add("Select Data Item")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UITvStructuresClient() As WinClient
            Get
                If (Me.mUITvStructuresClient Is Nothing) Then
                    Me.mUITvStructuresClient = New WinClient(Me)
                    Me.mUITvStructuresClient.WindowTitles.Add("Select Data Item")
                End If
                Return Me.mUITvStructuresClient
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUITvStructuresClient As WinClient
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UIOKWindow3
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "btnOk"
            Me.WindowTitles.Add("Select Data Item")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOKButton() As WinButton
            Get
                If (Me.mUIOKButton Is Nothing) Then
                    Me.mUIOKButton = New WinButton(Me)
                    Me.mUIOKButton.SearchProperties(WinButton.PropertyNames.Name) = "Ok"
                    Me.mUIOKButton.WindowTitles.Add("Select Data Item")
                End If
                Return Me.mUIOKButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOKButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UIErrorWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Error"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Error")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIThedirectoryCProjectWindow() As UIThedirectoryCProjectWindow
            Get
                If (Me.mUIThedirectoryCProjectWindow Is Nothing) Then
                    Me.mUIThedirectoryCProjectWindow = New UIThedirectoryCProjectWindow(Me)
                End If
                Return Me.mUIThedirectoryCProjectWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOKWindow() As UIOKWindow4
            Get
                If (Me.mUIOKWindow Is Nothing) Then
                    Me.mUIOKWindow = New UIOKWindow4(Me)
                End If
                Return Me.mUIOKWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIThedirectoryCProjectWindow As UIThedirectoryCProjectWindow
        
        Private mUIOKWindow As UIOKWindow4
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UIThedirectoryCProjectWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "txtErrorMsg"
            Me.WindowTitles.Add("Error")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UITxtErrorMsgEdit() As WinEdit
            Get
                If (Me.mUITxtErrorMsgEdit Is Nothing) Then
                    Me.mUITxtErrorMsgEdit = New WinEdit(Me)
                    Me.mUITxtErrorMsgEdit.WindowTitles.Add("Error")
                End If
                Return Me.mUITxtErrorMsgEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUITxtErrorMsgEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UIOKWindow4
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "btnOk"
            Me.WindowTitles.Add("Error")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOKButton() As WinButton
            Get
                If (Me.mUIOKButton Is Nothing) Then
                    Me.mUIOKButton = New WinButton(Me)
                    Me.mUIOKButton.SearchProperties(WinButton.PropertyNames.Name) = "Ok"
                    Me.mUIOKButton.WindowTitles.Add("Error")
                End If
                Return Me.mUIOKButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOKButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UIBoxTestProjectWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "BoxTest Project *"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("BoxTest Project *")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIStructure_1BodyWindow() As UIStructure_1BodyWindow
            Get
                If (Me.mUIStructure_1BodyWindow Is Nothing) Then
                    Me.mUIStructure_1BodyWindow = New UIStructure_1BodyWindow(Me)
                End If
                Return Me.mUIStructure_1BodyWindow
            End Get
        End Property
        
        Public ReadOnly Property UIItemWindow() As UIItemWindow
            Get
                If (Me.mUIItemWindow Is Nothing) Then
                    Me.mUIItemWindow = New UIItemWindow(Me)
                End If
                Return Me.mUIItemWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIStructure_1BodyWindow As UIStructure_1BodyWindow
        
        Private mUIItemWindow As UIItemWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UIStructure_1BodyWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "SimulationWindow_Toolstrips"
            Me.WindowTitles.Add("BoxTest Project *")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIStructure_1BodyClient() As WinClient
            Get
                If (Me.mUIStructure_1BodyClient Is Nothing) Then
                    Me.mUIStructure_1BodyClient = New WinClient(Me)
                    Me.mUIStructure_1BodyClient.SearchProperties(WinControl.PropertyNames.Name) = "Structure_1 Body"
                    Me.mUIStructure_1BodyClient.WindowTitles.Add("BoxTest Project *")
                End If
                Return Me.mUIStructure_1BodyClient
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIStructure_1BodyClient As WinClient
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UIItemWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.SearchProperties(WinWindow.PropertyNames.Instance) = "10"
            Me.WindowTitles.Add("BoxTest Project *")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIToolStripContainer1Client() As UIToolStripContainer1Client
            Get
                If (Me.mUIToolStripContainer1Client Is Nothing) Then
                    Me.mUIToolStripContainer1Client = New UIToolStripContainer1Client(Me)
                End If
                Return Me.mUIToolStripContainer1Client
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIToolStripContainer1Client As UIToolStripContainer1Client
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "10.0.30319.1")>  _
    Public Class UIToolStripContainer1Client
        Inherits WinClient
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("BoxTest Project *")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISimulationControllerClient() As WinClient
            Get
                If (Me.mUISimulationControllerClient Is Nothing) Then
                    Me.mUISimulationControllerClient = New WinClient(Me)
                    Me.mUISimulationControllerClient.SearchProperties(WinControl.PropertyNames.Name) = "Simulation Controller"
                    Me.mUISimulationControllerClient.WindowTitles.Add("BoxTest Project *")
                End If
                Return Me.mUISimulationControllerClient
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISimulationControllerClient As WinClient
        #End Region
    End Class
End Namespace
