/**
\file	Synapse.h

\brief	Declares the synapse class.
**/

#pragma once


namespace AnimatCarlSim
{

	/**
	\brief	Firing rate synapse model.

	\details This synapse type has a weight that is a current value. It injects a portion of that weight
	into the post-synaptic neuron based on the pre-synaptic neurons firing rate. I = W*F. (Where W is the
	weight, F is the firing rate, and I is the current.)
		
	\author	dcofer
	\date	3/29/2011
	**/
	class ANIMAT_CARL_SIM_PORT CsConnectionGenerator : public AnimatSim::AnimatBase,  ConnectionGenerator  
	{
	protected:
		/// Pointer to parent CsNeuralModule.
		CsNeuralModule *m_lpCsModule;

		std::multimap<std::pair<int, int>, CsSynapseIndividual *> m_arySynapseMap;

		///The ID of the pre-synaptic neuron population
		int m_iFromGroupID;

		///The ID of the post-synaptic neuron population
		int m_iToGroupID;

		///Tells whether the connections generated by this class are plastic or fixed
		bool m_bPlastic;

	public:
		CsConnectionGenerator();
		CsConnectionGenerator(int iFromGroupID, int iToGroupID, bool bPlastic, Simulator *lpSim, Structure *lpStructure, NeuralModule *lpModule);
		virtual ~CsConnectionGenerator();

		virtual void FromGroupID(int iVal);
		virtual int FromGroupID();

		virtual void ToGroupID(int iVal);
		virtual int ToGroupID();

		virtual void Plastic(bool bVal);
		virtual bool Plastic();

		virtual void SetSystemPointers(Simulator *lpSim, Structure *lpStructure, NeuralModule *lpModule, Node *lpNode, bool bVerify);
		virtual void VerifySystemPointers();

		std::multimap<std::pair<int, int>, CsSynapseIndividual *> *SynapseMap() {return &m_arySynapseMap;};

		virtual void SetCARLSimulation();

		virtual void connect(CpuSNN* s, int srcGrpId, int i, int destGrpId, int j, float& weight, float& maxWt, float& delay, bool& connected);
	};

}				//AnimatCarlSim
