// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Matrix>
#include <osg/MatrixTransform>
#include <osg/NodeVisitor>
#include <osg/Object>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osg::MatrixTransform)
	I_DeclaringFile("osg/MatrixTransform");
	I_BaseType(osg::Transform);
	I_Constructor0(____MatrixTransform,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::MatrixTransform &, x, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____MatrixTransform__C5_MatrixTransform_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Constructor1(IN, const osg::Matrix &, matix,
	               Properties::NON_EXPLICIT,
	               ____MatrixTransform__C5_Matrix_R1,
	               "",
	               "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "clone an object of the same type as the node. ",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "return a clone of a node, with Object* return type. ",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "return true if this and obj are of the same kind of object. ",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the node's class type. ",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the node's library. ",
	          "");
	I_Method1(void, accept, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__accept__osg_NodeVisitor_R1,
	          "Visitor Pattern : calls the apply method of a NodeVisitor with this node's type. ",
	          "");
	I_Method0(osg::MatrixTransform *, asMatrixTransform,
	          Properties::VIRTUAL,
	          __MatrixTransform_P1__asMatrixTransform,
	          "",
	          "");
	I_Method0(const osg::MatrixTransform *, asMatrixTransform,
	          Properties::VIRTUAL,
	          __C5_MatrixTransform_P1__asMatrixTransform,
	          "",
	          "");
	I_Method1(void, setMatrix, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__setMatrix__C5_Matrix_R1,
	          "Set the transform's matrix. ",
	          "");
	I_Method0(const osg::Matrix &, getMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_Matrix_R1__getMatrix,
	          "Get the matrix. ",
	          "");
	I_Method1(void, preMult, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__preMult__C5_Matrix_R1,
	          "pre multiply the transform's matrix. ",
	          "");
	I_Method1(void, postMult, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__postMult__C5_Matrix_R1,
	          "post multiply the transform's matrix. ",
	          "");
	I_Method0(const osg::Matrix &, getInverseMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_Matrix_R1__getInverseMatrix,
	          "Get the inverse matrix. ",
	          "");
	I_Method2(bool, computeLocalToWorldMatrix, IN, osg::Matrix &, matrix, IN, osg::NodeVisitor *, x,
	          Properties::VIRTUAL,
	          __bool__computeLocalToWorldMatrix__Matrix_R1__NodeVisitor_P1,
	          "",
	          "");
	I_Method2(bool, computeWorldToLocalMatrix, IN, osg::Matrix &, matrix, IN, osg::NodeVisitor *, x,
	          Properties::VIRTUAL,
	          __bool__computeWorldToLocalMatrix__Matrix_R1__NodeVisitor_P1,
	          "",
	          "");
	I_SimpleProperty(const osg::Matrix &, InverseMatrix, 
	                 __C5_Matrix_R1__getInverseMatrix, 
	                 0);
	I_SimpleProperty(const osg::Matrix &, Matrix, 
	                 __C5_Matrix_R1__getMatrix, 
	                 __void__setMatrix__C5_Matrix_R1);
END_REFLECTOR

