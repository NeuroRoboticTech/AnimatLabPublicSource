// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Object>
#include <osg/OperationThread>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::Operation)
	I_DeclaringFile("osg/OperationThread");
	I_VirtualBaseType(osg::Referenced);
	I_Constructor2(IN, const std::string &, name, IN, bool, keep,
	               ____Operation__C5_std_string_R1__bool,
	               "",
	               "");
	I_Method1(void, setName, IN, const std::string &, name,
	          Properties::NON_VIRTUAL,
	          __void__setName__C5_std_string_R1,
	          "Set the human readable name of the operation. ",
	          "");
	I_Method0(const std::string &, getName,
	          Properties::NON_VIRTUAL,
	          __C5_std_string_R1__getName,
	          "Get the human readable name of the operation. ",
	          "");
	I_Method1(void, setKeep, IN, bool, keep,
	          Properties::NON_VIRTUAL,
	          __void__setKeep__bool,
	          "Set whether the operation should be kept once its been applied. ",
	          "");
	I_Method0(bool, getKeep,
	          Properties::NON_VIRTUAL,
	          __bool__getKeep,
	          "Get whether the operation should be kept once its been applied. ",
	          "");
	I_Method0(void, release,
	          Properties::VIRTUAL,
	          __void__release,
	          "if this operation is a barrier then release it. ",
	          "");
	I_ProtectedConstructor0(____Operation,
	                        "",
	                        "");
	I_ProtectedConstructor1(IN, const osg::Operation &, op,
	                        Properties::NON_EXPLICIT,
	                        ____Operation__C5_Operation_R1,
	                        "",
	                        "");
	I_SimpleProperty(bool, Keep, 
	                 __bool__getKeep, 
	                 __void__setKeep__bool);
	I_SimpleProperty(const std::string &, Name, 
	                 __C5_std_string_R1__getName, 
	                 __void__setName__C5_std_string_R1);
END_REFLECTOR

TYPE_NAME_ALIAS(std::set< osg::OperationThread * >, osg::OperationQueue::OperationThreads)

BEGIN_OBJECT_REFLECTOR(osg::OperationQueue)
	I_DeclaringFile("osg/OperationThread");
	I_BaseType(osg::Referenced);
	I_Constructor0(____OperationQueue,
	               "",
	               "");
	I_MethodWithDefaults1(osg::ref_ptr< osg::Operation >, getNextOperation, IN, bool, blockIfEmpty, false,
	                      Properties::NON_VIRTUAL,
	                      __osg_ref_ptrT1_Operation___getNextOperation__bool,
	                      "Get the next operation from the operation queue. ",
	                      "Return null ref_ptr<> if no operations are left in queue. ");
	I_Method0(bool, empty,
	          Properties::NON_VIRTUAL,
	          __bool__empty,
	          "Return true if the operation queue is empty. ",
	          "");
	I_Method0(unsigned int, getNumOperationsInQueue,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getNumOperationsInQueue,
	          "Return the num of pending operations that are sitting in the OperationQueue. ",
	          "");
	I_Method1(void, add, IN, osg::Operation *, operation,
	          Properties::NON_VIRTUAL,
	          __void__add__Operation_P1,
	          "Add operation to end of OperationQueue, this will be executed by the operation thread once this operation gets to the head of the queue. ",
	          "");
	I_Method1(void, remove, IN, osg::Operation *, operation,
	          Properties::NON_VIRTUAL,
	          __void__remove__Operation_P1,
	          "Remove operation from OperationQueue. ",
	          "");
	I_Method1(void, remove, IN, const std::string &, name,
	          Properties::NON_VIRTUAL,
	          __void__remove__C5_std_string_R1,
	          "Remove named operation from OperationQueue. ",
	          "");
	I_Method0(void, removeAllOperations,
	          Properties::NON_VIRTUAL,
	          __void__removeAllOperations,
	          "Remove all operations from OperationQueue. ",
	          "");
	I_MethodWithDefaults1(void, runOperations, IN, osg::Object *, callingObject, 0,
	                      Properties::NON_VIRTUAL,
	                      __void__runOperations__Object_P1,
	                      "Run the operations. ",
	                      "");
	I_Method0(void, releaseAllOperations,
	          Properties::NON_VIRTUAL,
	          __void__releaseAllOperations,
	          "Call release on all operations. ",
	          "");
	I_Method0(void, releaseOperationsBlock,
	          Properties::NON_VIRTUAL,
	          __void__releaseOperationsBlock,
	          "Release operations block that is used to block threads that are waiting on an empty operations queue. ",
	          "");
	I_Method0(const osg::OperationQueue::OperationThreads &, getOperationThreads,
	          Properties::NON_VIRTUAL,
	          __C5_OperationThreads_R1__getOperationThreads,
	          "Get the set of OperationThreads that are sharing this OperationQueue. ",
	          "");
	I_ProtectedMethod1(void, addOperationThread, IN, osg::OperationThread *, thread,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__addOperationThread__OperationThread_P1,
	                   "",
	                   "");
	I_ProtectedMethod1(void, removeOperationThread, IN, osg::OperationThread *, thread,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__removeOperationThread__OperationThread_P1,
	                   "",
	                   "");
	I_SimpleProperty(const osg::OperationQueue::OperationThreads &, OperationThreads, 
	                 __C5_OperationThreads_R1__getOperationThreads, 
	                 0);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::OperationThread)
	I_DeclaringFile("osg/OperationThread");
	I_BaseType(osg::Referenced);
	I_BaseType(OpenThreads::Thread);
	I_Constructor0(____OperationThread,
	               "",
	               "");
	I_Method1(void, setParent, IN, osg::Object *, parent,
	          Properties::NON_VIRTUAL,
	          __void__setParent__Object_P1,
	          "",
	          "");
	I_Method0(osg::Object *, getParent,
	          Properties::NON_VIRTUAL,
	          __Object_P1__getParent,
	          "",
	          "");
	I_Method0(const osg::Object *, getParent,
	          Properties::NON_VIRTUAL,
	          __C5_Object_P1__getParent,
	          "",
	          "");
	I_Method1(void, setOperationQueue, IN, osg::OperationQueue *, opq,
	          Properties::NON_VIRTUAL,
	          __void__setOperationQueue__OperationQueue_P1,
	          "Set the OperationQueue. ",
	          "");
	I_Method0(osg::OperationQueue *, getOperationQueue,
	          Properties::NON_VIRTUAL,
	          __OperationQueue_P1__getOperationQueue,
	          "Get the OperationQueue. ",
	          "");
	I_Method0(const osg::OperationQueue *, getOperationQueue,
	          Properties::NON_VIRTUAL,
	          __C5_OperationQueue_P1__getOperationQueue,
	          "Get the const OperationQueue. ",
	          "");
	I_Method1(void, add, IN, osg::Operation *, operation,
	          Properties::NON_VIRTUAL,
	          __void__add__Operation_P1,
	          "Add operation to end of OperationQueue, this will be executed by the graphics thread once this operation gets to the head of the queue. ",
	          "");
	I_Method1(void, remove, IN, osg::Operation *, operation,
	          Properties::NON_VIRTUAL,
	          __void__remove__Operation_P1,
	          "Remove operation from OperationQueue. ",
	          "");
	I_Method1(void, remove, IN, const std::string &, name,
	          Properties::NON_VIRTUAL,
	          __void__remove__C5_std_string_R1,
	          "Remove named operation from OperationQueue. ",
	          "");
	I_Method0(void, removeAllOperations,
	          Properties::NON_VIRTUAL,
	          __void__removeAllOperations,
	          "Remove all operations from OperationQueue. ",
	          "");
	I_Method0(osg::ref_ptr< osg::Operation >, getCurrentOperation,
	          Properties::NON_VIRTUAL,
	          __osg_ref_ptrT1_Operation___getCurrentOperation,
	          "Get the operation currently being run. ",
	          "");
	I_Method0(void, run,
	          Properties::VIRTUAL,
	          __void__run,
	          "Run does the opertion thread run loop. ",
	          "");
	I_Method1(void, setDone, IN, bool, done,
	          Properties::NON_VIRTUAL,
	          __void__setDone__bool,
	          "",
	          "");
	I_Method0(bool, getDone,
	          Properties::NON_VIRTUAL,
	          __bool__getDone,
	          "",
	          "");
	I_Method0(int, cancel,
	          Properties::VIRTUAL,
	          __int__cancel,
	          "Cancel this graphics thread. ",
	          "");
	I_SimpleProperty(osg::ref_ptr< osg::Operation >, CurrentOperation, 
	                 __osg_ref_ptrT1_Operation___getCurrentOperation, 
	                 0);
	I_SimpleProperty(bool, Done, 
	                 __bool__getDone, 
	                 __void__setDone__bool);
	I_SimpleProperty(osg::OperationQueue *, OperationQueue, 
	                 __OperationQueue_P1__getOperationQueue, 
	                 __void__setOperationQueue__OperationQueue_P1);
	I_SimpleProperty(osg::Object *, Parent, 
	                 __Object_P1__getParent, 
	                 __void__setParent__Object_P1);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::RefBlock)
	I_DeclaringFile("osg/OperationThread");
	I_VirtualBaseType(osg::Referenced);
	I_BaseType(OpenThreads::Block);
	I_Constructor0(____RefBlock,
	               "",
	               "");
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::RefBlockCount)
	I_DeclaringFile("osg/OperationThread");
	I_VirtualBaseType(osg::Referenced);
	I_BaseType(OpenThreads::BlockCount);
	I_Constructor1(IN, unsigned, blockCount,
	               Properties::NON_EXPLICIT,
	               ____RefBlockCount__unsigned,
	               "",
	               "");
END_REFLECTOR

TYPE_NAME_ALIAS(osg::OperationThread, osg::OperationsThread)

STD_SET_REFLECTOR(std::set< osg::OperationThread * >)

