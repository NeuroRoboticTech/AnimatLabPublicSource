// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Object>
#include <osg/State>
#include <osg/StateAttribute>
#include <osg/StateAttributeCallback>
#include <osg/StateSet>
#include <osg/Texture>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(GLenum, osg::StateAttribute::GLMode)

TYPE_NAME_ALIAS(unsigned int, osg::StateAttribute::GLModeValue)

TYPE_NAME_ALIAS(unsigned int, osg::StateAttribute::OverrideValue)

TYPE_NAME_ALIAS(std::pair< osg::StateAttribute::Type COMMA  unsigned int >, osg::StateAttribute::TypeMemberPair)

TYPE_NAME_ALIAS(std::vector< osg::StateSet * >, osg::StateAttribute::ParentList)

TYPE_NAME_ALIAS(osg::StateAttributeCallback, osg::StateAttribute::Callback)

BEGIN_ENUM_REFLECTOR(osg::StateAttribute::Values)
	I_DeclaringFile("osg/StateAttribute");
	I_EnumLabel(osg::StateAttribute::OFF);
	I_EnumLabel(osg::StateAttribute::ON);
	I_EnumLabel(osg::StateAttribute::OVERRIDE);
	I_EnumLabel(osg::StateAttribute::PROTECTED);
	I_EnumLabel(osg::StateAttribute::INHERIT);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osg::StateAttribute::Type)
	I_DeclaringFile("osg/StateAttribute");
	I_EnumLabel(osg::StateAttribute::TEXTURE);
	I_EnumLabel(osg::StateAttribute::POLYGONMODE);
	I_EnumLabel(osg::StateAttribute::POLYGONOFFSET);
	I_EnumLabel(osg::StateAttribute::MATERIAL);
	I_EnumLabel(osg::StateAttribute::ALPHAFUNC);
	I_EnumLabel(osg::StateAttribute::ANTIALIAS);
	I_EnumLabel(osg::StateAttribute::COLORTABLE);
	I_EnumLabel(osg::StateAttribute::CULLFACE);
	I_EnumLabel(osg::StateAttribute::FOG);
	I_EnumLabel(osg::StateAttribute::FRONTFACE);
	I_EnumLabel(osg::StateAttribute::LIGHT);
	I_EnumLabel(osg::StateAttribute::POINT);
	I_EnumLabel(osg::StateAttribute::LINEWIDTH);
	I_EnumLabel(osg::StateAttribute::LINESTIPPLE);
	I_EnumLabel(osg::StateAttribute::POLYGONSTIPPLE);
	I_EnumLabel(osg::StateAttribute::SHADEMODEL);
	I_EnumLabel(osg::StateAttribute::TEXENV);
	I_EnumLabel(osg::StateAttribute::TEXENVFILTER);
	I_EnumLabel(osg::StateAttribute::TEXGEN);
	I_EnumLabel(osg::StateAttribute::TEXMAT);
	I_EnumLabel(osg::StateAttribute::LIGHTMODEL);
	I_EnumLabel(osg::StateAttribute::BLENDFUNC);
	I_EnumLabel(osg::StateAttribute::BLENDEQUATION);
	I_EnumLabel(osg::StateAttribute::LOGICOP);
	I_EnumLabel(osg::StateAttribute::STENCIL);
	I_EnumLabel(osg::StateAttribute::COLORMASK);
	I_EnumLabel(osg::StateAttribute::DEPTH);
	I_EnumLabel(osg::StateAttribute::VIEWPORT);
	I_EnumLabel(osg::StateAttribute::SCISSOR);
	I_EnumLabel(osg::StateAttribute::BLENDCOLOR);
	I_EnumLabel(osg::StateAttribute::MULTISAMPLE);
	I_EnumLabel(osg::StateAttribute::CLIPPLANE);
	I_EnumLabel(osg::StateAttribute::COLORMATRIX);
	I_EnumLabel(osg::StateAttribute::VERTEXPROGRAM);
	I_EnumLabel(osg::StateAttribute::FRAGMENTPROGRAM);
	I_EnumLabel(osg::StateAttribute::POINTSPRITE);
	I_EnumLabel(osg::StateAttribute::PROGRAM);
	I_EnumLabel(osg::StateAttribute::CLAMPCOLOR);
	I_EnumLabel(osg::StateAttribute::HINT);
	I_EnumLabel(osg::StateAttribute::VALIDATOR);
	I_EnumLabel(osg::StateAttribute::VIEWMATRIXEXTRACTOR);
	I_EnumLabel(osg::StateAttribute::OSGNV_PARAMETER_BLOCK);
	I_EnumLabel(osg::StateAttribute::OSGNVEXT_TEXTURE_SHADER);
	I_EnumLabel(osg::StateAttribute::OSGNVEXT_VERTEX_PROGRAM);
	I_EnumLabel(osg::StateAttribute::OSGNVEXT_REGISTER_COMBINERS);
	I_EnumLabel(osg::StateAttribute::OSGNVCG_PROGRAM);
	I_EnumLabel(osg::StateAttribute::OSGNVSLANG_PROGRAM);
	I_EnumLabel(osg::StateAttribute::OSGNVPARSE_PROGRAM_PARSER);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::StateAttribute)
	I_DeclaringFile("osg/StateAttribute");
	I_BaseType(osg::Object);
	I_Constructor0(____StateAttribute,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::StateAttribute &, sa, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____StateAttribute__C5_StateAttribute_R1__C5_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::PURE_VIRTUAL,
	          __Object_P1__cloneType,
	          "Clone the type of an attribute, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, x,
	          Properties::PURE_VIRTUAL,
	          __Object_P1__clone__C5_CopyOp_R1,
	          "Clone an attribute, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "Return true if this and obj are of the same kind of object. ",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "Return the name of the attribute's library. ",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "Return the name of the attribute's class type. ",
	          "");
	I_Method0(osg::Texture *, asTexture,
	          Properties::VIRTUAL,
	          __Texture_P1__asTexture,
	          "Fast alternative to dynamic_cast<> for determining if state attribute is a Texture. ",
	          "");
	I_Method0(const osg::Texture *, asTexture,
	          Properties::VIRTUAL,
	          __C5_Texture_P1__asTexture,
	          "Fast alternative to dynamic_cast<> for determining if state attribute is a Texture. ",
	          "");
	I_Method0(osg::StateAttribute::Type, getType,
	          Properties::PURE_VIRTUAL,
	          __Type__getType,
	          "Return the Type identifier of the attribute's class type. ",
	          "");
	I_Method0(unsigned int, getMember,
	          Properties::VIRTUAL,
	          __unsigned_int__getMember,
	          "Return the member identifier within the attribute's class type. ",
	          "Used for light number/clip plane number etc. ");
	I_Method0(osg::StateAttribute::TypeMemberPair, getTypeMemberPair,
	          Properties::NON_VIRTUAL,
	          __TypeMemberPair__getTypeMemberPair,
	          "Return the TypeMemberPair that uniquely identifies this type member. ",
	          "");
	I_Method0(bool, isTextureAttribute,
	          Properties::VIRTUAL,
	          __bool__isTextureAttribute,
	          "Return true if StateAttribute is a type which controls texturing and needs to be issued w.r.t to specific texture unit. ",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::PURE_VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "Return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method0(const osg::StateAttribute::ParentList &, getParents,
	          Properties::NON_VIRTUAL,
	          __C5_ParentList_R1__getParents,
	          "Get the parent list of this StateAttribute. ",
	          "");
	I_Method1(osg::StateSet *, getParent, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __StateSet_P1__getParent__unsigned_int,
	          "",
	          "");
	I_Method1(const osg::StateSet *, getParent, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __C5_StateSet_P1__getParent__unsigned_int,
	          "Get a single const parent of this StateAttribute. ",
	          " param i index of the parent to get.   return the parent i. ");
	I_Method0(unsigned int, getNumParents,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getNumParents,
	          "Get the number of parents of this StateAttribute. ",
	          "the number of parents of this StateAttribute.  ");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, x,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "Return the modes associated with this StateAttribute. ",
	          "");
	I_Method1(bool, checkValidityOfAssociatedModes, IN, osg::State &, x,
	          Properties::VIRTUAL,
	          __bool__checkValidityOfAssociatedModes__osg_State_R1,
	          "Check the modes associated with this StateAttribute are supported by current OpenGL drivers, and if not set the associated mode in osg::State to be black listed/invalid. ",
	          "Return true if all associated modes are valid. ");
	I_Method1(void, setUpdateCallback, IN, osg::StateAttributeCallback *, uc,
	          Properties::NON_VIRTUAL,
	          __void__setUpdateCallback__StateAttributeCallback_P1,
	          "Set the UpdateCallback which allows users to attach customize the updating of an object during the update traversal. ",
	          "");
	I_Method0(osg::StateAttributeCallback *, getUpdateCallback,
	          Properties::NON_VIRTUAL,
	          __StateAttributeCallback_P1__getUpdateCallback,
	          "Get the non const UpdateCallback. ",
	          "");
	I_Method0(const osg::StateAttributeCallback *, getUpdateCallback,
	          Properties::NON_VIRTUAL,
	          __C5_StateAttributeCallback_P1__getUpdateCallback,
	          "Get the const UpdateCallback. ",
	          "");
	I_Method1(void, setEventCallback, IN, osg::StateAttributeCallback *, ec,
	          Properties::NON_VIRTUAL,
	          __void__setEventCallback__StateAttributeCallback_P1,
	          "Set the EventCallback which allows users to attach customize the updating of an object during the Event traversal. ",
	          "");
	I_Method0(osg::StateAttributeCallback *, getEventCallback,
	          Properties::NON_VIRTUAL,
	          __StateAttributeCallback_P1__getEventCallback,
	          "Get the non const EventCallback. ",
	          "");
	I_Method0(const osg::StateAttributeCallback *, getEventCallback,
	          Properties::NON_VIRTUAL,
	          __C5_StateAttributeCallback_P1__getEventCallback,
	          "Get the const EventCallback. ",
	          "");
	I_Method1(void, apply, IN, osg::State &, x,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "apply the OpenGL state attributes. ",
	          "The render info for the current OpenGL context is passed in to allow the StateAttribute to obtain details on the the current context and state. ");
	I_Method1(void, compileGLObjects, IN, osg::State &, x,
	          Properties::VIRTUAL,
	          __void__compileGLObjects__State_R1,
	          "Default to nothing to compile - all state is applied immediately. ",
	          "");
	I_Method1(void, resizeGLObjectBuffers, IN, unsigned, int,
	          Properties::VIRTUAL,
	          __void__resizeGLObjectBuffers__unsigned,
	          "Resize any per context GLObject buffers to specified size. ",
	          "");
	I_MethodWithDefaults1(void, releaseGLObjects, IN, osg::State *, x, 0,
	                      Properties::VIRTUAL,
	                      __void__releaseGLObjects__State_P1,
	                      "Release OpenGL objects in specified graphics context if State object is passed, otherwise release OpenGL objects for all graphics context if State object pointer NULL. ",
	                      "");
	I_ProtectedMethod1(void, addParent, IN, osg::StateSet *, object,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__addParent__osg_StateSet_P1,
	                   "",
	                   "");
	I_ProtectedMethod1(void, removeParent, IN, osg::StateSet *, object,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__removeParent__osg_StateSet_P1,
	                   "",
	                   "");
	I_SimpleProperty(osg::StateAttributeCallback *, EventCallback, 
	                 __StateAttributeCallback_P1__getEventCallback, 
	                 __void__setEventCallback__StateAttributeCallback_P1);
	I_SimpleProperty(unsigned int, Member, 
	                 __unsigned_int__getMember, 
	                 0);
	I_ArrayProperty(osg::StateSet *, Parent, 
	                __StateSet_P1__getParent__unsigned_int, 
	                0, 
	                __unsigned_int__getNumParents, 
	                0, 
	                0, 
	                0);
	I_SimpleProperty(const osg::StateAttribute::ParentList &, Parents, 
	                 __C5_ParentList_R1__getParents, 
	                 0);
	I_SimpleProperty(osg::StateAttribute::Type, Type, 
	                 __Type__getType, 
	                 0);
	I_SimpleProperty(osg::StateAttribute::TypeMemberPair, TypeMemberPair, 
	                 __TypeMemberPair__getTypeMemberPair, 
	                 0);
	I_SimpleProperty(osg::StateAttributeCallback *, UpdateCallback, 
	                 __StateAttributeCallback_P1__getUpdateCallback, 
	                 __void__setUpdateCallback__StateAttributeCallback_P1);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::StateAttribute::ModeUsage)
	I_DeclaringFile("osg/StateAttribute");
	I_Constructor0(____ModeUsage,
	               "",
	               "");
	I_Method1(void, usesMode, IN, osg::StateAttribute::GLMode, mode,
	          Properties::PURE_VIRTUAL,
	          __void__usesMode__GLMode,
	          "",
	          "");
	I_Method1(void, usesTextureMode, IN, osg::StateAttribute::GLMode, mode,
	          Properties::PURE_VIRTUAL,
	          __void__usesTextureMode__GLMode,
	          "",
	          "");
END_REFLECTOR

STD_PAIR_REFLECTOR(std::pair< osg::StateAttribute::Type COMMA  unsigned int >)

STD_VECTOR_REFLECTOR(std::vector< osg::StateSet * >)

