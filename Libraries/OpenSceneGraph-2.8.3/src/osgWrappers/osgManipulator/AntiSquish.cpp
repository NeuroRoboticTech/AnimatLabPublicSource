// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Matrix>
#include <osg/Object>
#include <osg/Vec3d>
#include <osgManipulator/AntiSquish>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgManipulator::AntiSquish)
	I_DeclaringFile("osgManipulator/AntiSquish");
	I_BaseType(osg::MatrixTransform);
	I_Constructor0(____AntiSquish,
	               "",
	               "");
	I_Constructor1(IN, const osg::Vec3d &, pivot,
	               Properties::NON_EXPLICIT,
	               ____AntiSquish__C5_osg_Vec3d_R1,
	               "",
	               "");
	I_Constructor2(IN, const osg::Vec3d &, pivot, IN, const osg::Vec3d &, position,
	               ____AntiSquish__C5_osg_Vec3d_R1__C5_osg_Vec3d_R1,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgManipulator::AntiSquish &, pat, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____AntiSquish__C5_AntiSquish_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "clone an object of the same type as the node. ",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "return a clone of a node, with Object* return type. ",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "return true if this and obj are of the same kind of object. ",
	          "");
	I_Method1(void, setPivot, IN, const osg::Vec3d &, pvt,
	          Properties::NON_VIRTUAL,
	          __void__setPivot__C5_osg_Vec3d_R1,
	          "",
	          "");
	I_Method0(const osg::Vec3d &, getPivot,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3d_R1__getPivot,
	          "",
	          "");
	I_Method1(void, setPosition, IN, const osg::Vec3d &, pos,
	          Properties::NON_VIRTUAL,
	          __void__setPosition__C5_osg_Vec3d_R1,
	          "",
	          "");
	I_Method0(const osg::Vec3d &, getPosition,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3d_R1__getPosition,
	          "",
	          "");
	I_Method2(osg::Matrix, computeUnSquishedMatrix, IN, const osg::Matrix &, x, IN, bool &, flag,
	          Properties::NON_VIRTUAL,
	          __osg_Matrix__computeUnSquishedMatrix__C5_osg_Matrix_R1__bool_R1,
	          "",
	          "");
	I_SimpleProperty(const osg::Vec3d &, Pivot, 
	                 __C5_osg_Vec3d_R1__getPivot, 
	                 __void__setPivot__C5_osg_Vec3d_R1);
	I_SimpleProperty(const osg::Vec3d &, Position, 
	                 __C5_osg_Vec3d_R1__getPosition, 
	                 __void__setPosition__C5_osg_Vec3d_R1);
END_REFLECTOR

