// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Camera>
#include <osg/CopyOp>
#include <osg/Light>
#include <osg/LightSource>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/Shader>
#include <osg/Vec2>
#include <osg/Vec2s>
#include <osgShadow/ShadowMap>
#include <osgUtil/CullVisitor>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(std::vector< osg::ref_ptr< osg::Uniform > >, osgShadow::ShadowMap::UniformList)

TYPE_NAME_ALIAS(std::vector< osg::ref_ptr< osg::Shader > >, osgShadow::ShadowMap::ShaderList)

BEGIN_OBJECT_REFLECTOR(osgShadow::ShadowMap)
	I_DeclaringFile("osgShadow/ShadowMap");
	I_BaseType(osgShadow::ShadowTechnique);
	I_Constructor0(____ShadowMap,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgShadow::ShadowMap &, es, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____ShadowMap__C5_ShadowMap_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(void, setTextureUnit, IN, unsigned int, unit,
	          Properties::NON_VIRTUAL,
	          __void__setTextureUnit__unsigned_int,
	          "Set the texture unit that the shadow texture will be applied on. ",
	          "");
	I_Method0(unsigned int, getTextureUnit,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getTextureUnit,
	          "Get the texture unit that the shadow texture will be applied on. ",
	          "");
	I_Method1(void, setPolygonOffset, IN, const osg::Vec2 &, polyOffset,
	          Properties::NON_VIRTUAL,
	          __void__setPolygonOffset__C5_osg_Vec2_R1,
	          "set the polygon offset used initially ",
	          "");
	I_Method0(const osg::Vec2 &, getPolygonOffset,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getPolygonOffset,
	          "get the used polygon offset ",
	          "");
	I_Method1(void, setAmbientBias, IN, const osg::Vec2 &, ambientBias,
	          Properties::NON_VIRTUAL,
	          __void__setAmbientBias__C5_osg_Vec2_R1,
	          "Set the values for the ambient bias the shader will use. ",
	          "");
	I_Method0(const osg::Vec2 &, getAmbientBias,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getAmbientBias,
	          "Get the values that are used for the ambient bias in the shader. ",
	          "");
	I_Method1(void, setTextureSize, IN, const osg::Vec2s &, textureSize,
	          Properties::NON_VIRTUAL,
	          __void__setTextureSize__C5_osg_Vec2s_R1,
	          "set the size in pixels x / y for the shadow texture. ",
	          "");
	I_Method0(const osg::Vec2s &, getTextureSize,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2s_R1__getTextureSize,
	          "Get the values that are used for the ambient bias in the shader. ",
	          "");
	I_Method1(void, setLight, IN, osg::Light *, light,
	          Properties::NON_VIRTUAL,
	          __void__setLight__osg_Light_P1,
	          "Set the Light that will cast shadows. ",
	          "");
	I_Method1(void, setLight, IN, osg::LightSource *, ls,
	          Properties::NON_VIRTUAL,
	          __void__setLight__osg_LightSource_P1,
	          "",
	          "");
	I_Method1(void, addShader, IN, osg::Shader *, shader,
	          Properties::NON_VIRTUAL,
	          __void__addShader__osg_Shader_P1,
	          "Add a shader to internal list, will be used instead of the default ones. ",
	          "");
	I_Method0(void, clearShaderList,
	          Properties::NON_VIRTUAL,
	          __void__clearShaderList,
	          "Reset internal shader list. ",
	          "");
	I_Method0(void, init,
	          Properties::VIRTUAL,
	          __void__init,
	          "initialize the ShadowedScene and local cached data structures. ",
	          "");
	I_Method1(void, update, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__update__osg_NodeVisitor_R1,
	          "run the update traversal of the ShadowedScene and update any loca chached data structures. ",
	          "");
	I_Method1(void, cull, IN, osgUtil::CullVisitor &, cv,
	          Properties::VIRTUAL,
	          __void__cull__osgUtil_CullVisitor_R1,
	          "run the cull traversal of the ShadowedScene and set up the rendering for this ShadowTechnique. ",
	          "");
	I_Method0(void, cleanSceneGraph,
	          Properties::VIRTUAL,
	          __void__cleanSceneGraph,
	          "Clean scene graph from any shadow technique specific nodes, state and drawables. ",
	          "");
	I_Method0(osg::ref_ptr< osg::Camera >, makeDebugHUD,
	          Properties::NON_VIRTUAL,
	          __osg_ref_ptrT1_osg_Camera___makeDebugHUD,
	          "",
	          "");
	I_ProtectedMethod0(void, createUniforms,
	                   Properties::VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__createUniforms,
	                   "Create the managed Uniforms. ",
	                   "");
	I_ProtectedMethod0(void, createShaders,
	                   Properties::VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__createShaders,
	                   "",
	                   "");
	I_SimpleProperty(const osg::Vec2 &, AmbientBias, 
	                 __C5_osg_Vec2_R1__getAmbientBias, 
	                 __void__setAmbientBias__C5_osg_Vec2_R1);
	I_SimpleProperty(osg::Light *, Light, 
	                 0, 
	                 __void__setLight__osg_Light_P1);
	I_SimpleProperty(const osg::Vec2 &, PolygonOffset, 
	                 __C5_osg_Vec2_R1__getPolygonOffset, 
	                 __void__setPolygonOffset__C5_osg_Vec2_R1);
	I_SimpleProperty(const osg::Vec2s &, TextureSize, 
	                 __C5_osg_Vec2s_R1__getTextureSize, 
	                 __void__setTextureSize__C5_osg_Vec2s_R1);
	I_SimpleProperty(unsigned int, TextureUnit, 
	                 __unsigned_int__getTextureUnit, 
	                 __void__setTextureUnit__unsigned_int);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::Camera >)
	I_DeclaringFile("osg/ref_ptr");
	I_Constructor0(____ref_ptr,
	               "",
	               "");
	I_Constructor1(IN, osg::Camera *, ptr,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__T_P1,
	               "",
	               "");
	I_Constructor1(IN, const osg::ref_ptr< osg::Camera > &, rp,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__C5_ref_ptr_R1,
	               "",
	               "");
	I_Method0(osg::Camera *, get,
	          Properties::NON_VIRTUAL,
	          __T_P1__get,
	          "",
	          "");
	I_Method0(bool, valid,
	          Properties::NON_VIRTUAL,
	          __bool__valid,
	          "",
	          "");
	I_Method0(osg::Camera *, release,
	          Properties::NON_VIRTUAL,
	          __T_P1__release,
	          "",
	          "");
	I_Method1(void, swap, IN, osg::ref_ptr< osg::Camera > &, rp,
	          Properties::NON_VIRTUAL,
	          __void__swap__ref_ptr_R1,
	          "",
	          "");
	I_SimpleProperty(osg::Camera *, , 
	                 __T_P1__get, 
	                 0);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::Shader >)
	I_DeclaringFile("osg/ref_ptr");
	I_Constructor0(____ref_ptr,
	               "",
	               "");
	I_Constructor1(IN, osg::Shader *, ptr,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__T_P1,
	               "",
	               "");
	I_Constructor1(IN, const osg::ref_ptr< osg::Shader > &, rp,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__C5_ref_ptr_R1,
	               "",
	               "");
	I_Method0(osg::Shader *, get,
	          Properties::NON_VIRTUAL,
	          __T_P1__get,
	          "",
	          "");
	I_Method0(bool, valid,
	          Properties::NON_VIRTUAL,
	          __bool__valid,
	          "",
	          "");
	I_Method0(osg::Shader *, release,
	          Properties::NON_VIRTUAL,
	          __T_P1__release,
	          "",
	          "");
	I_Method1(void, swap, IN, osg::ref_ptr< osg::Shader > &, rp,
	          Properties::NON_VIRTUAL,
	          __void__swap__ref_ptr_R1,
	          "",
	          "");
	I_SimpleProperty(osg::Shader *, , 
	                 __T_P1__get, 
	                 0);
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< osg::ref_ptr< osg::Shader > >)

STD_VECTOR_REFLECTOR(std::vector< osg::ref_ptr< osg::Uniform > >)

