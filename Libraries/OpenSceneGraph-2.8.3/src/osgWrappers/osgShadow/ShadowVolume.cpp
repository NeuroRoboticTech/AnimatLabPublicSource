// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osgShadow/OccluderGeometry>
#include <osgShadow/ShadowVolume>
#include <osgUtil/CullVisitor>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgShadow::ShadowVolume)
	I_DeclaringFile("osgShadow/ShadowVolume");
	I_BaseType(osgShadow::ShadowTechnique);
	I_Constructor0(____ShadowVolume,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgShadow::ShadowVolume &, es, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____ShadowVolume__C5_ShadowVolume_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(void, setDrawMode, IN, osgShadow::ShadowVolumeGeometry::DrawMode, drawMode,
	          Properties::NON_VIRTUAL,
	          __void__setDrawMode__osgShadow_ShadowVolumeGeometry_DrawMode,
	          "",
	          "");
	I_Method0(osgShadow::ShadowVolumeGeometry::DrawMode, getDrawMode,
	          Properties::NON_VIRTUAL,
	          __osgShadow_ShadowVolumeGeometry_DrawMode__getDrawMode,
	          "",
	          "");
	I_Method1(void, setDynamicShadowVolumes, IN, bool, dynamicShadowVolumes,
	          Properties::NON_VIRTUAL,
	          __void__setDynamicShadowVolumes__bool,
	          "",
	          "");
	I_Method0(bool, getDynamicShadowVolumes,
	          Properties::NON_VIRTUAL,
	          __bool__getDynamicShadowVolumes,
	          "",
	          "");
	I_Method0(void, init,
	          Properties::VIRTUAL,
	          __void__init,
	          "initialize the ShadowedScene and local cached data structures. ",
	          "");
	I_Method1(void, update, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__update__osg_NodeVisitor_R1,
	          "run the update traversal of the ShadowedScene and update any loca chached data structures. ",
	          "");
	I_Method1(void, cull, IN, osgUtil::CullVisitor &, cv,
	          Properties::VIRTUAL,
	          __void__cull__osgUtil_CullVisitor_R1,
	          "run the cull traversal of the ShadowedScene and set up the rendering for this ShadowTechnique. ",
	          "");
	I_Method0(void, cleanSceneGraph,
	          Properties::VIRTUAL,
	          __void__cleanSceneGraph,
	          "Clean scene graph from any shadow technique specific nodes, state and drawables. ",
	          "");
	I_SimpleProperty(osgShadow::ShadowVolumeGeometry::DrawMode, DrawMode, 
	                 __osgShadow_ShadowVolumeGeometry_DrawMode__getDrawMode, 
	                 __void__setDrawMode__osgShadow_ShadowVolumeGeometry_DrawMode);
	I_SimpleProperty(bool, DynamicShadowVolumes, 
	                 __bool__getDynamicShadowVolumes, 
	                 __void__setDynamicShadowVolumes__bool);
END_REFLECTOR

