// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Object>
#include <osgShadow/DebugShadowMap>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(osgShadow::DebugShadowMap, osgShadow::DebugShadowMap::ThisClass)

TYPE_NAME_ALIAS(osgShadow::ViewDependentShadowTechnique, osgShadow::DebugShadowMap::BaseClass)

BEGIN_OBJECT_REFLECTOR(osgShadow::DebugShadowMap)
	I_DeclaringFile("osgShadow/DebugShadowMap");
	I_BaseType(osgShadow::ViewDependentShadowTechnique);
	I_Constructor0(____DebugShadowMap,
	               "Classic OSG constructor. ",
	               "");
	I_ConstructorWithDefaults2(IN, const osgShadow::DebugShadowMap &, dsm, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____DebugShadowMap__C5_DebugShadowMap_R1__C5_osg_CopyOp_R1,
	                           "Classic OSG cloning constructor. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Declaration of standard OSG object methods. ",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(void, setDebugDraw, IN, bool, draw,
	          Properties::NON_VIRTUAL,
	          __void__setDebugDraw__bool,
	          "Turn on/off debuging hud & rendering of debug volumes in main view. ",
	          "");
	I_Method0(bool, getDebugDraw,
	          Properties::NON_VIRTUAL,
	          __bool__getDebugDraw,
	          "Tell if debuging hud & rendering of debug volumes is active. ",
	          "");
	I_SimpleProperty(bool, DebugDraw, 
	                 __bool__getDebugDraw, 
	                 __void__setDebugDraw__bool);
END_REFLECTOR

