// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Geode>
#include <osg/Light>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/Vec2>
#include <osg/Vec2f>
#include <osgShadow/ParallelSplitShadowMap>
#include <osgUtil/CullVisitor>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(osgShadow::ParallelSplitShadowMap::SplitCalcMode)
	I_DeclaringFile("osgShadow/ParallelSplitShadowMap");
	I_EnumLabel(osgShadow::ParallelSplitShadowMap::SPLIT_LINEAR);
	I_EnumLabel(osgShadow::ParallelSplitShadowMap::SPLIT_EXP);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgShadow::ParallelSplitShadowMap)
	I_DeclaringFile("osgShadow/ParallelSplitShadowMap");
	I_BaseType(osgShadow::ShadowTechnique);
	I_ConstructorWithDefaults2(IN, osg::Geode **, debugGroup, NULL, IN, int, icountplanes, 3,
	                           ____ParallelSplitShadowMap__osg_Geode_P1P1__int,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osgShadow::ParallelSplitShadowMap &, es, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____ParallelSplitShadowMap__C5_ParallelSplitShadowMap_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method0(void, init,
	          Properties::VIRTUAL,
	          __void__init,
	          "Initialize the ShadowedScene and local cached data structures. ",
	          "");
	I_Method1(void, update, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__update__osg_NodeVisitor_R1,
	          "Run the update traversal of the ShadowedScene and update any loca chached data structures. ",
	          "");
	I_Method1(void, cull, IN, osgUtil::CullVisitor &, cv,
	          Properties::VIRTUAL,
	          __void__cull__osgUtil_CullVisitor_R1,
	          "Run the cull traversal of the ShadowedScene and set up the rendering for this ShadowTechnique. ",
	          "");
	I_Method0(void, cleanSceneGraph,
	          Properties::VIRTUAL,
	          __void__cleanSceneGraph,
	          "Clean scene graph from any shadow technique specific nodes, state and drawables. ",
	          "");
	I_Method0(void, setDebugColorOn,
	          Properties::NON_VIRTUAL,
	          __void__setDebugColorOn,
	          "Switch on the debug coloring in GLSL (only the first 3 texture/splits showed for visualisation. ",
	          "");
	I_Method1(void, setPolygonOffset, IN, const osg::Vec2f &, p,
	          Properties::NON_VIRTUAL,
	          __void__setPolygonOffset__C5_osg_Vec2f_R1,
	          "Set the polygon offset osg::Vec2f(factor,unit). ",
	          "");
	I_Method0(const osg::Vec2f &, getPolygonOffset,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2f_R1__getPolygonOffset,
	          "Get the polygon offset osg::Vec2f(factor,unit). ",
	          "");
	I_Method1(void, setTextureResolution, IN, unsigned int, resolution,
	          Properties::NON_VIRTUAL,
	          __void__setTextureResolution__unsigned_int,
	          "Set the texture resolution. ",
	          "");
	I_Method1(void, setMaxFarDistance, IN, double, farDist,
	          Properties::NON_VIRTUAL,
	          __void__setMaxFarDistance__double,
	          "Set the max far distance. ",
	          "");
	I_Method1(void, setMoveVCamBehindRCamFactor, IN, double, distFactor,
	          Properties::NON_VIRTUAL,
	          __void__setMoveVCamBehindRCamFactor__double,
	          "Set the factor for moving the virtual camera behind the real camera. ",
	          "");
	I_Method1(void, setMinNearDistanceForSplits, IN, double, nd,
	          Properties::NON_VIRTUAL,
	          __void__setMinNearDistanceForSplits__double,
	          "Set min near distance for splits. ",
	          "");
	I_Method1(void, setUserLight, IN, osg::Light *, light,
	          Properties::NON_VIRTUAL,
	          __void__setUserLight__osg_Light_P1,
	          "set a user defined light for shadow simulation (sun light, . ",
	          ".. ) when this light get passed to pssm, the scene's light are no longer collected and simulated. just this user passed light, it needs to be a directional light. ");
	I_Method1(void, setAmbientBias, IN, const osg::Vec2 &, ambientBias,
	          Properties::NON_VIRTUAL,
	          __void__setAmbientBias__C5_osg_Vec2_R1,
	          "Set the values for the ambient bias the shader will use. ",
	          "");
	I_Method1(void, setFragmentShaderGenerator, IN, osgShadow::ParallelSplitShadowMap::FragmentShaderGenerator *, fsw,
	          Properties::NON_VIRTUAL,
	          __void__setFragmentShaderGenerator__FragmentShaderGenerator_P1,
	          "set fragment shader generator ",
	          "");
	I_MethodWithDefaults1(void, enableShadowGLSLFiltering, IN, bool, filtering, true,
	                      Properties::NON_VIRTUAL,
	                      __void__enableShadowGLSLFiltering__bool,
	                      "enable / disable shadow filtering ",
	                      "");
	I_MethodWithDefaults1(void, setSplitCalculationMode, IN, osgShadow::ParallelSplitShadowMap::SplitCalcMode, scm, osgShadow::ParallelSplitShadowMap::SPLIT_EXP,
	                      Properties::NON_VIRTUAL,
	                      __void__setSplitCalculationMode__SplitCalcMode,
	                      "set split calculation mode ",
	                      "");
	I_SimpleProperty(const osg::Vec2 &, AmbientBias, 
	                 0, 
	                 __void__setAmbientBias__C5_osg_Vec2_R1);
	I_SimpleProperty(osgShadow::ParallelSplitShadowMap::FragmentShaderGenerator *, FragmentShaderGenerator, 
	                 0, 
	                 __void__setFragmentShaderGenerator__FragmentShaderGenerator_P1);
	I_SimpleProperty(double, MaxFarDistance, 
	                 0, 
	                 __void__setMaxFarDistance__double);
	I_SimpleProperty(double, MinNearDistanceForSplits, 
	                 0, 
	                 __void__setMinNearDistanceForSplits__double);
	I_SimpleProperty(double, MoveVCamBehindRCamFactor, 
	                 0, 
	                 __void__setMoveVCamBehindRCamFactor__double);
	I_SimpleProperty(const osg::Vec2f &, PolygonOffset, 
	                 __C5_osg_Vec2f_R1__getPolygonOffset, 
	                 __void__setPolygonOffset__C5_osg_Vec2f_R1);
	I_SimpleProperty(osgShadow::ParallelSplitShadowMap::SplitCalcMode, SplitCalculationMode, 
	                 0, 
	                 __void__setSplitCalculationMode__SplitCalcMode);
	I_SimpleProperty(unsigned int, TextureResolution, 
	                 0, 
	                 __void__setTextureResolution__unsigned_int);
	I_SimpleProperty(osg::Light *, UserLight, 
	                 0, 
	                 __void__setUserLight__osg_Light_P1);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgShadow::ParallelSplitShadowMap::FragmentShaderGenerator)
	I_DeclaringFile("osgShadow/ParallelSplitShadowMap");
	I_BaseType(osg::Referenced);
	I_Constructor0(____FragmentShaderGenerator,
	               "",
	               "");
	I_Method6(std::string, generateGLSL_FragmentShader_BaseTex, IN, bool, debug, IN, unsigned int, splitCount, IN, double, textureRes, IN, bool, filtered, IN, unsigned int, nbrSplits, IN, unsigned int, textureOffset,
	          Properties::VIRTUAL,
	          __std_string__generateGLSL_FragmentShader_BaseTex__bool__unsigned_int__double__bool__unsigned_int__unsigned_int,
	          "generate the GLSL fragement shader ",
	          "");
END_REFLECTOR

