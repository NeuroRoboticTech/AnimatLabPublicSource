// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <OpenThreads/Block>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(OpenThreads::Block)
	I_DeclaringFile("OpenThreads/Block");
	I_Constructor0(____Block,
	               "",
	               "");
	I_Method0(bool, block,
	          Properties::NON_VIRTUAL,
	          __bool__block,
	          "",
	          "");
	I_Method1(bool, block, IN, unsigned long, timeout,
	          Properties::NON_VIRTUAL,
	          __bool__block__unsigned_long,
	          "",
	          "");
	I_Method0(void, release,
	          Properties::NON_VIRTUAL,
	          __void__release,
	          "",
	          "");
	I_Method0(void, reset,
	          Properties::NON_VIRTUAL,
	          __void__reset,
	          "",
	          "");
	I_Method1(void, set, IN, bool, doRelease,
	          Properties::NON_VIRTUAL,
	          __void__set__bool,
	          "",
	          "");
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(OpenThreads::BlockCount)
	I_DeclaringFile("OpenThreads/Block");
	I_Constructor1(IN, unsigned int, blockCount,
	               Properties::NON_EXPLICIT,
	               ____BlockCount__unsigned_int,
	               "",
	               "");
	I_Method0(void, completed,
	          Properties::NON_VIRTUAL,
	          __void__completed,
	          "",
	          "");
	I_Method0(void, block,
	          Properties::NON_VIRTUAL,
	          __void__block,
	          "",
	          "");
	I_Method0(void, reset,
	          Properties::NON_VIRTUAL,
	          __void__reset,
	          "",
	          "");
	I_Method0(void, release,
	          Properties::NON_VIRTUAL,
	          __void__release,
	          "",
	          "");
	I_Method1(void, setBlockCount, IN, unsigned int, blockCount,
	          Properties::NON_VIRTUAL,
	          __void__setBlockCount__unsigned_int,
	          "",
	          "");
	I_Method0(unsigned int, getBlockCount,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getBlockCount,
	          "",
	          "");
	I_Method0(unsigned int, getCurrentCount,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getCurrentCount,
	          "",
	          "");
	I_SimpleProperty(unsigned int, BlockCount, 
	                 __unsigned_int__getBlockCount, 
	                 __void__setBlockCount__unsigned_int);
	I_SimpleProperty(unsigned int, CurrentCount, 
	                 __unsigned_int__getCurrentCount, 
	                 0);
END_REFLECTOR

