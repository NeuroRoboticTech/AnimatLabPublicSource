// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/Uniform>
#include <osg/Vec3d>
#include <osgTerrain/GeometryTechnique>
#include <osgTerrain/Locator>
#include <osgUtil/CullVisitor>
#include <osgUtil/UpdateVisitor>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(osgTerrain::GeometryTechnique::FilterType)
	I_DeclaringFile("osgTerrain/GeometryTechnique");
	I_EnumLabel(osgTerrain::GeometryTechnique::GAUSSIAN);
	I_EnumLabel(osgTerrain::GeometryTechnique::SMOOTH);
	I_EnumLabel(osgTerrain::GeometryTechnique::SHARPEN);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgTerrain::GeometryTechnique)
	I_DeclaringFile("osgTerrain/GeometryTechnique");
	I_BaseType(osgTerrain::TerrainTechnique);
	I_Constructor0(____GeometryTechnique,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgTerrain::GeometryTechnique &, x, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____GeometryTechnique__C5_GeometryTechnique_R1__C5_osg_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method0(void, init,
	          Properties::VIRTUAL,
	          __void__init,
	          "",
	          "");
	I_Method0(osgTerrain::Locator *, computeMasterLocator,
	          Properties::VIRTUAL,
	          __Locator_P1__computeMasterLocator,
	          "",
	          "");
	I_Method1(osg::Vec3d, computeCenterModel, IN, osgTerrain::Locator *, masterLocator,
	          Properties::VIRTUAL,
	          __osg_Vec3d__computeCenterModel__Locator_P1,
	          "",
	          "");
	I_Method2(void, generateGeometry, IN, osgTerrain::Locator *, masterLocator, IN, const osg::Vec3d &, centerModel,
	          Properties::VIRTUAL,
	          __void__generateGeometry__Locator_P1__C5_osg_Vec3d_R1,
	          "",
	          "");
	I_Method0(void, applyColorLayers,
	          Properties::VIRTUAL,
	          __void__applyColorLayers,
	          "",
	          "");
	I_Method0(void, applyTransparency,
	          Properties::VIRTUAL,
	          __void__applyTransparency,
	          "",
	          "");
	I_Method0(void, smoothGeometry,
	          Properties::VIRTUAL,
	          __void__smoothGeometry,
	          "",
	          "");
	I_Method1(void, update, IN, osgUtil::UpdateVisitor *, nv,
	          Properties::VIRTUAL,
	          __void__update__osgUtil_UpdateVisitor_P1,
	          "",
	          "");
	I_Method1(void, cull, IN, osgUtil::CullVisitor *, nv,
	          Properties::VIRTUAL,
	          __void__cull__osgUtil_CullVisitor_P1,
	          "",
	          "");
	I_Method1(void, traverse, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__traverse__osg_NodeVisitor_R1,
	          "Traverse the terain subgraph. ",
	          "");
	I_Method0(void, cleanSceneGraph,
	          Properties::VIRTUAL,
	          __void__cleanSceneGraph,
	          "Clean scene graph from any terrain technique specific nodes. ",
	          "");
	I_Method1(void, setFilterBias, IN, float, filterBias,
	          Properties::NON_VIRTUAL,
	          __void__setFilterBias__float,
	          "",
	          "");
	I_Method0(float, getFilterBias,
	          Properties::NON_VIRTUAL,
	          __float__getFilterBias,
	          "",
	          "");
	I_Method1(void, setFilterWidth, IN, float, filterWidth,
	          Properties::NON_VIRTUAL,
	          __void__setFilterWidth__float,
	          "",
	          "");
	I_Method0(float, getFilterWidth,
	          Properties::NON_VIRTUAL,
	          __float__getFilterWidth,
	          "",
	          "");
	I_Method1(void, setFilterMatrix, IN, const osg::Matrix3 &, matrix,
	          Properties::NON_VIRTUAL,
	          __void__setFilterMatrix__C5_osg_Matrix3_R1,
	          "",
	          "");
	I_Method0(osg::Matrix3 &, getFilterMatrix,
	          Properties::NON_VIRTUAL,
	          __osg_Matrix3_R1__getFilterMatrix,
	          "",
	          "");
	I_Method0(const osg::Matrix3 &, getFilterMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Matrix3_R1__getFilterMatrix,
	          "",
	          "");
	I_Method1(void, setFilterMatrixAs, IN, osgTerrain::GeometryTechnique::FilterType, filterType,
	          Properties::NON_VIRTUAL,
	          __void__setFilterMatrixAs__FilterType,
	          "",
	          "");
	I_SimpleProperty(float, FilterBias, 
	                 __float__getFilterBias, 
	                 __void__setFilterBias__float);
	I_SimpleProperty(const osg::Matrix3 &, FilterMatrix, 
	                 __C5_osg_Matrix3_R1__getFilterMatrix, 
	                 __void__setFilterMatrix__C5_osg_Matrix3_R1);
	I_SimpleProperty(osgTerrain::GeometryTechnique::FilterType, FilterMatrixAs, 
	                 0, 
	                 __void__setFilterMatrixAs__FilterType);
	I_SimpleProperty(float, FilterWidth, 
	                 __float__getFilterWidth, 
	                 __void__setFilterWidth__float);
END_REFLECTOR

