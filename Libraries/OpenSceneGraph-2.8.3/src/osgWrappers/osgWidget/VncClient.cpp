// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgWidget/PdfReader>
#include <osgWidget/VncClient>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgWidget::VncClient)
	I_DeclaringFile("osgWidget/VncClient");
	I_BaseType(osg::Geode);
	I_Constructor0(____VncClient,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const std::string &, hostname, , IN, const osgWidget::GeometryHints &, hints, osgWidget::GeometryHints(),
	                           ____VncClient__C5_std_string_R1__C5_GeometryHints_R1,
	                           "",
	                           "");
	I_MethodWithDefaults2(bool, assign, IN, osgWidget::VncImage *, vncImage, , IN, const osgWidget::GeometryHints &, hints, osgWidget::GeometryHints(),
	                      Properties::NON_VIRTUAL,
	                      __bool__assign__VncImage_P1__C5_GeometryHints_R1,
	                      "",
	                      "");
	I_MethodWithDefaults2(bool, connect, IN, const std::string &, hostname, , IN, const osgWidget::GeometryHints &, hints, osgWidget::GeometryHints(),
	                      Properties::NON_VIRTUAL,
	                      __bool__connect__C5_std_string_R1__C5_GeometryHints_R1,
	                      "",
	                      "");
	I_Method0(void, close,
	          Properties::NON_VIRTUAL,
	          __void__close,
	          "",
	          "");
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgWidget::VncImage)
	I_DeclaringFile("osgWidget/VncClient");
	I_BaseType(osg::Image);
	I_Constructor0(____VncImage,
	               "",
	               "");
	I_Method1(bool, connect, IN, const std::string &, hostname,
	          Properties::PURE_VIRTUAL,
	          __bool__connect__C5_std_string_R1,
	          "",
	          "");
	I_Method0(void, close,
	          Properties::PURE_VIRTUAL,
	          __void__close,
	          "",
	          "");
END_REFLECTOR

