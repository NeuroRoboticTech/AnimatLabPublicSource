// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Object>
#include <osgWidget/Table>
#include <osgWidget/Types>
#include <osgWidget/Widget>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(std::vector< osgWidget::point_type >, osgWidget::Table::CellSizes)

BEGIN_OBJECT_REFLECTOR(osgWidget::Table)
	I_DeclaringFile("osgWidget/Table");
	I_BaseType(osgWidget::Window);
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "clone an object of the same type as the node. ",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "return a clone of a node, with Object* return type. ",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "return true if this and obj are of the same kind of object. ",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the node's library. ",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the node's class type. ",
	          "");
	I_ConstructorWithDefaults3(IN, const std::string &, x, "", IN, unsigned, int, 0, IN, unsigned, int, 0,
	                           ____Table__C5_std_string_R1__unsigned__unsigned,
	                           "",
	                           "");
	I_Constructor2(IN, const osgWidget::Table &, x, IN, const osg::CopyOp &, x,
	               ____Table__C5_Table_R1__C5_osg_CopyOp_R1,
	               "",
	               "");
	I_Method1(bool, addWidget, IN, osgWidget::Widget *, x,
	          Properties::VIRTUAL,
	          __bool__addWidget__Widget_P1,
	          "",
	          "");
	I_Method3(bool, addWidget, IN, osgWidget::Widget *, x, IN, unsigned, int, IN, unsigned, int,
	          Properties::VIRTUAL,
	          __bool__addWidget__Widget_P1__unsigned__unsigned,
	          "",
	          "");
	I_Method1(void, getRowHeights, IN, osgWidget::Table::CellSizes &, x,
	          Properties::NON_VIRTUAL,
	          __void__getRowHeights__CellSizes_R1,
	          "",
	          "");
	I_Method1(void, getRowMinHeights, IN, osgWidget::Table::CellSizes &, x,
	          Properties::NON_VIRTUAL,
	          __void__getRowMinHeights__CellSizes_R1,
	          "",
	          "");
	I_Method1(void, getColumnWidths, IN, osgWidget::Table::CellSizes &, x,
	          Properties::NON_VIRTUAL,
	          __void__getColumnWidths__CellSizes_R1,
	          "",
	          "");
	I_Method1(void, getColumnMinWidths, IN, osgWidget::Table::CellSizes &, x,
	          Properties::NON_VIRTUAL,
	          __void__getColumnMinWidths__CellSizes_R1,
	          "",
	          "");
	I_Method2(void, addHeightToRow, IN, unsigned, int, IN, osgWidget::point_type, x,
	          Properties::NON_VIRTUAL,
	          __void__addHeightToRow__unsigned__point_type,
	          "",
	          "");
	I_Method2(void, addWidthToColumn, IN, unsigned, int, IN, osgWidget::point_type, x,
	          Properties::NON_VIRTUAL,
	          __void__addWidthToColumn__unsigned__point_type,
	          "",
	          "");
	I_Method1(bool, isRowVerticallyFillable, IN, unsigned, int,
	          Properties::NON_VIRTUAL,
	          __bool__isRowVerticallyFillable__unsigned,
	          "",
	          "");
	I_Method1(bool, isColumnHorizontallyFillable, IN, unsigned, int,
	          Properties::NON_VIRTUAL,
	          __bool__isColumnHorizontallyFillable__unsigned,
	          "",
	          "");
	I_Method2(osgWidget::Widget *, getByRowCol, IN, unsigned int, row, IN, unsigned int, col,
	          Properties::NON_VIRTUAL,
	          __Widget_P1__getByRowCol__unsigned_int__unsigned_int,
	          "",
	          "");
	I_Method2(const osgWidget::Widget *, getByRowCol, IN, unsigned int, row, IN, unsigned int, col,
	          Properties::NON_VIRTUAL,
	          __C5_Widget_P1__getByRowCol__unsigned_int__unsigned_int,
	          "",
	          "");
	I_ProtectedMethod2(unsigned int, _calculateIndex, IN, unsigned, int, IN, unsigned, int,
	                   Properties::NON_VIRTUAL,
	                   Properties::CONST,
	                   __unsigned_int___calculateIndex__unsigned__unsigned,
	                   "",
	                   "");
	I_ProtectedMethod2(void, _getRows, IN, osgWidget::Table::CellSizes &, x, IN, osgWidget::Window::Getter, x,
	                   Properties::NON_VIRTUAL,
	                   Properties::CONST,
	                   __void___getRows__CellSizes_R1__Getter,
	                   "",
	                   "");
	I_ProtectedMethod2(void, _getColumns, IN, osgWidget::Table::CellSizes &, x, IN, osgWidget::Window::Getter, x,
	                   Properties::NON_VIRTUAL,
	                   Properties::CONST,
	                   __void___getColumns__CellSizes_R1__Getter,
	                   "",
	                   "");
	I_ProtectedMethod2(void, _resizeImplementation, IN, osgWidget::point_type, x, IN, osgWidget::point_type, x,
	                   Properties::VIRTUAL,
	                   Properties::NON_CONST,
	                   __void___resizeImplementation__point_type__point_type,
	                   "",
	                   "");
	I_ProtectedMethod0(osgWidget::Window::Sizes, _getWidthImplementation,
	                   Properties::VIRTUAL,
	                   Properties::CONST,
	                   __Sizes___getWidthImplementation,
	                   "",
	                   "");
	I_ProtectedMethod0(osgWidget::Window::Sizes, _getHeightImplementation,
	                   Properties::VIRTUAL,
	                   Properties::CONST,
	                   __Sizes___getHeightImplementation,
	                   "",
	                   "");
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< osgWidget::point_type >)

