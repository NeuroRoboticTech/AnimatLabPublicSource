/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

/* Note, elements of PixelBufferX11 have used Prodcer/RenderSurface_X11.cpp as both
 * a guide to use of X11/GLX and copiying directly in the case of setBorder().
 * These elements are license under OSGPL as above, with Copyright (C) 2001-2004  Don Burns.
 */

#ifndef OSGVIEWER_PIXELBUFFERX11
#define OSGVIEWER_PIXELBUFFERX11 1

#include <osg/GraphicsContext>
#include <osgViewer/Export>

#define GLX_GLXEXT_PROTOTYPES  1

#include <X11/X.h>
#include <GL/glx.h>

#ifndef GLX_VERSION_1_3
    typedef XID GLXPbuffer;
#endif


namespace osgViewer
{

class OSGVIEWER_EXPORT PixelBufferX11 : public osg::GraphicsContext
{
    public:

        PixelBufferX11(osg::GraphicsContext::Traits* traits);
    
        virtual bool isSameKindAs(const Object* object) const { return dynamic_cast<const PixelBufferX11*>(object)!=0; }
        virtual const char* libraryName() const { return "osgViewer"; }
        virtual const char* className() const { return "PixelBufferX11"; }

        virtual bool valid() const { return _valid; }

        /** Realise the GraphicsContext.*/
        virtual bool realizeImplementation();

        /** Return true if the graphics context has been realised and is ready to use.*/
        virtual bool isRealizedImplementation() const { return _realized; }

        /** Close the graphics context.*/
        virtual void closeImplementation();

        /** Make this graphics context current.*/
        virtual bool makeCurrentImplementation();

        /** Make this graphics context current with specified read context implementation. */
        virtual bool makeContextCurrentImplementation(osg::GraphicsContext* readContext);

        /** Release the graphics context.*/
        virtual bool releaseContextImplementation();

        /** Bind the graphics context to associated texture implementation.*/
        virtual void bindPBufferToTextureImplementation(GLenum buffer);

        /** Swap the front and back buffers.*/
        virtual void swapBuffersImplementation();

    public:
    
        // X11 specific aces functions

        Display* getDisplay() const { return _display; }
        
        GLXPbuffer& getPbuffer() { return _pbuffer; }
        GLXContext& getGLXContext() { return _glxContext; }

    protected:
    
        ~PixelBufferX11();
    
        bool createVisualInfo();
        
        void init();

        bool            _valid;
        Display*        _display;
        GLXPbuffer      _pbuffer;
        XVisualInfo*    _visualInfo;
        GLXContext      _glxContext;

        bool            _initialized;
        bool            _realized;

        bool            _useGLX1_3;
};

}

#endif
