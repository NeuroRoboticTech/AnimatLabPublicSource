/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_OBSERVER_PTR
#define OSG_OBSERVER_PTR

#include <osg/Notify>

namespace osg {

class Observer
{
public:
    virtual ~Observer() {}
    virtual void objectDeleted(void*) {}
};

/** Smart pointer for observed objects, that automatically set pointers to them to null when they deleted.*/
template<class T>
class observer_ptr : public Observer
{

    public:
        typedef T element_type;

        observer_ptr() :_ptr(0L)                            {}
        observer_ptr(T* t):_ptr(t)                          { if (_ptr) _ptr->addObserver(this); }
        observer_ptr(const observer_ptr& rp):Observer(), _ptr(rp._ptr)  { if (_ptr) _ptr->addObserver(this); }
        ~observer_ptr()                                     { if (_ptr) _ptr->removeObserver(this); _ptr=0; }

        inline observer_ptr& operator = (const observer_ptr& rp)
        {
            if (_ptr==rp._ptr) return *this;
            if (_ptr) _ptr->removeObserver(this);
            
            _ptr = rp._ptr;
            if (_ptr) _ptr->addObserver(this);
            return *this;
        }

        inline observer_ptr& operator = (T* ptr)
        {
            if (_ptr==ptr) return *this;
            if (_ptr) _ptr->removeObserver(this);
            
            _ptr = ptr;
            if (_ptr) _ptr->addObserver(this);

            return *this;
        }
        
        virtual void objectDeleted(void*)
        {
            _ptr = 0;
        }

        // comparison operators for observer_ptr.
        inline bool operator == (const observer_ptr& rp) const { return (_ptr==rp._ptr); }
        inline bool operator != (const observer_ptr& rp) const { return (_ptr!=rp._ptr); }
        inline bool operator < (const observer_ptr& rp) const { return (_ptr<rp._ptr); }
        inline bool operator > (const observer_ptr& rp) const { return (_ptr>rp._ptr); }

        // comparison operator for const T*.
        inline bool operator == (const T* ptr) const { return (_ptr==ptr); }
        inline bool operator != (const T* ptr) const { return (_ptr!=ptr); }
        inline bool operator < (const T* ptr) const { return (_ptr<ptr); }
        inline bool operator > (const T* ptr) const { return (_ptr>ptr); }

        inline T& operator*() const { return *_ptr; }
        inline T* operator->() const   { return _ptr; }
        inline T* get() const { return _ptr; }

        inline bool operator!() const   { return _ptr==0L; }

        inline bool valid() const       { return _ptr!=0L; }
        

    private:
        T* _ptr;
};

}

#endif
