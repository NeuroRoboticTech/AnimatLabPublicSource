/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/
//osgIntrospection - Copyright (C) 2005 Marco Jez

#ifndef OSGINTROSPECTION_REFLECTION_
#define OSGINTROSPECTION_REFLECTION_

#include <osgIntrospection/Export>
#include <osgIntrospection/ExtendedTypeInfo>

#include <typeinfo>
#include <map>
#include <vector>
#include <list>

/// This macro emulates the behavior of the standard typeid operator,
/// returning the Type object associated to the type of the given
/// expression.
#define typeof(type)  osgIntrospection::Reflection::getType(extended_typeid< type >())
#define typeofvalue(val)  osgIntrospection::Reflection::getType(osgIntrospection::ExtendedTypeInfo(typeid(val), false, false))

namespace osgIntrospection
{

    class Type;
    struct Converter;
    
    typedef std::list<const Converter* > ConverterList;

    /// A map of types, indexed by their associated ExtendedTypeInfo
    /// structure.
    typedef std::map<ExtendedTypeInfo, Type*> TypeMap;

    enum CastType
    {
        STATIC_CAST,
        DYNAMIC_CAST,
        REINTERPRET_CAST,
        COMPOSITE_CAST
    };

    /// This class provides basic reflection services such as registration
    /// of new types and queries on the global type map.
    class OSGINTROSPECTION_EXPORT Reflection
    {
    public:
        /// Returns the Type object associated to the given
        /// ExtendedTypeInfo structure. If the type hasn't been created
        /// yet it is automatically created and added to the global type
        /// map.  Please note that such type will have the status of
        /// "declared", you still need to give details about it through
        /// a Reflector class before you can query it.
        static const Type& getType(const ExtendedTypeInfo &ti);

        /// Finds a Type object given its qualified name, which must
        /// be identical to the qualified name returned by that Type's
        /// getQualifiedName() method. If the type hasn't been created
        /// yet, an exception is thrown.
        static const Type& getType(const std::string& qname);

        /// Returns the global map of types.
        static const TypeMap& getTypes();

        /// Return the Type object associated to the C++ type 'void'.
        /// This is a shortcut for typeof(void), which may be slow if
        /// the type map is large.
        static const Type& type_void();

        static const Converter* getConverter(const Type& source, const Type& dest);
        static bool getConversionPath(const Type& source, const Type& dest, ConverterList& conv);
        
        // This function should be called (at least on windows platforms using Visual Studio 7.1 or 8 as compiler) to unregister 
        // all the known types before exiting your program: otherwise, you will get a lot of false positive memory leaks in debug builds.
        // It might also be used to dynamically reload the description of the known types (?)
        static void uninitialize();
        
    private:
        template<typename C> friend class Reflector;
        template<typename C> friend struct TypeNameAliasProxy;
        friend struct ConverterProxy;

        struct StaticData
        {
            TypeMap typemap;
            const Type* type_void;
            
            typedef std::map<const Type* , const Converter* > ConverterMap;
            typedef std::map<const Type* , ConverterMap> ConverterMapMap;
            ConverterMapMap convmap;
            
            ~StaticData();
        };

        static StaticData& getOrCreateStaticData();
        static Type* registerType(const ExtendedTypeInfo &ti);
        static Type* getOrRegisterType(const ExtendedTypeInfo &ti, bool replace_if_defined = false);
        static void registerConverter(const Type& source, const Type& dest, const Converter* cvt);

    private:
        static bool accum_conv_path(const Type& source, const Type& dest, ConverterList& conv, std::vector<const Type* > &chain, CastType castType);
        static StaticData* _static_data;
    };

}

#endif
