/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/
//osgIntrospection - Copyright (C) 2005 Marco Jez

#ifndef OSGINTROSPECTION_COMPARATOR_
#define OSGINTROSPECTION_COMPARATOR_


namespace osgIntrospection
{

    class Value;

    struct Comparator
    {
        virtual bool isEqualTo(const Value& l, const Value& r) const = 0;
        virtual bool isLessThanOrEqualTo(const Value& l, const Value& r) const = 0;
        virtual ~Comparator() {}
    };
    
    template<typename T>
    struct TotalOrderComparator: Comparator
    {
        virtual bool isEqualTo(const Value& l, const Value& r) const
        {
            const T &vl = variant_cast<const T &>(l);
            const T &vr = variant_cast<const T &>(r);
            return vl <= vr && vr <= vl;
        }

        virtual bool isLessThanOrEqualTo(const Value& l, const Value& r) const
        {
            return variant_cast<const T &>(l) <= variant_cast<const T &>(r);
        }
        
        virtual ~TotalOrderComparator() {}
    };
    
    template<typename T>
    struct PartialOrderComparator: Comparator
    {
        virtual bool isEqualTo(const Value& l, const Value& r) const
        {
            return variant_cast<const T &>(l) == variant_cast<const T &>(r);
        }

        virtual bool isLessThanOrEqualTo(const Value& , const Value& ) const
        {
            throw ComparisonOperatorNotSupportedException(extended_typeid<T>(), "less than or equal to");
        }
        
        virtual ~PartialOrderComparator() {}
    };

}

#endif
