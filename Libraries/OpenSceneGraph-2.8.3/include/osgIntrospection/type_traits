/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGINTROSPECTION_TYPE_TRAITS_
#define OSGINTROSPECTION_TYPE_TRAITS_


/// is_reference is a compile-time template predicate to determine if a
/// type is a reference type.
template <typename T>
struct is_reference
{
  static const bool value = false;
};

template <typename T>
struct is_reference<T &>
{
  static const bool value = true;
};


/// is_const_reference is a compile-time template predicate to determine
/// if a type is a const reference type.
template <typename T>
struct is_const_reference
{
  static const bool value = false;
};

template <typename T>
struct is_const_reference<const T &>
{
  static const bool value = true;
};


/// remove_pointer is a compile-time template type mapper that produces
/// the input type, but with any pointer modifier removed.
template <typename T>
struct remove_pointer
{
    typedef T type;
};

template <typename T>
struct remove_pointer<T *>
{
    typedef T type;
};


#endif
