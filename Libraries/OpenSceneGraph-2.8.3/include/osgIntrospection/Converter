/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/
//osgIntrospection - Copyright (C) 2005 Marco Jez

#ifndef OSGINTROSPECTION_CONVERTER_
#define OSGINTROSPECTION_CONVERTER_

#include <osgIntrospection/Value>
#include <list>

namespace osgIntrospection
{
    struct Converter
    {
        virtual CastType getCastType() const = 0;
        virtual Value convert(const Value& ) const = 0;
        virtual ~Converter() {}
    };
    
    typedef std::list<const Converter* > ConverterList;
    
    class CompositeConverter: public Converter
    {
    public:
        CompositeConverter(const ConverterList& cvt): cvt_(cvt) {}
        CompositeConverter(ConverterList& cvt) { cvt_.swap(cvt); }
        virtual ~CompositeConverter() {}
        
        virtual Value convert(const Value& src) const
        {
            Value accum(src);
            for (ConverterList::const_iterator i=cvt_.begin(); i!=cvt_.end(); ++i)
                accum = (*i)->convert(accum);
            return accum;
        }

        virtual CastType getCastType() const { return COMPOSITE_CAST; }
    private:
        ConverterList cvt_;
    };

    template<typename S, typename D>
    struct StaticConverter: Converter
    {
        virtual ~StaticConverter() {}
        virtual Value convert(const Value& src) const
        {
            return static_cast<D>(variant_cast<S>(src));
        }

        virtual CastType getCastType() const { return STATIC_CAST; }
    };

    template<typename S, typename D>
    struct DynamicConverter: Converter
    {
        virtual ~DynamicConverter() {}
        virtual Value convert(const Value& src) const
        {
            return dynamic_cast<D>(variant_cast<S>(src));
        }

        virtual CastType getCastType() const { return DYNAMIC_CAST; }
    };

    template<typename S, typename D>
    struct ReinterpretConverter: Converter
    {
        virtual ~ReinterpretConverter() {}
        virtual Value convert(const Value& src) const
        {
            return reinterpret_cast<D>(variant_cast<S>(src));
        }

        virtual CastType getCastType() const { return REINTERPRET_CAST; }
    };

}

#endif

