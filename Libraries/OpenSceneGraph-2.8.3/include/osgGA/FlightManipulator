/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGGA_FLIGHTMANIPULATOR
#define OSGGA_FLIGHTMANIPULATOR 1

#include <osgGA/MatrixManipulator>
#include <osg/Quat>

namespace osgGA{

/**
FlightManipulator is a MatrixManipulator which provides flight simulator-like
updating of the camera position & orientation. By default, the left mouse
button accelerates, the right mouse button decelerates, and the middle mouse
button (or left and right simultaneously) stops dead.
*/

class OSGGA_EXPORT FlightManipulator : public MatrixManipulator
{
    public:

        FlightManipulator();

        virtual const char* className() const { return "Flight"; }

        /** set the position of the matrix manipulator using a 4x4 Matrix.*/
        virtual void setByMatrix(const osg::Matrixd& matrix);

        /** set the position of the matrix manipulator using a 4x4 Matrix.*/
        virtual void setByInverseMatrix(const osg::Matrixd& matrix) { setByMatrix(osg::Matrixd::inverse(matrix)); }

        /** get the position of the manipulator as 4x4 Matrix.*/
        virtual osg::Matrixd getMatrix() const;

        /** get the position of the manipulator as a inverse matrix of the manipulator, typically used as a model view matrix.*/
        virtual osg::Matrixd getInverseMatrix() const;


        virtual void setNode(osg::Node*);

        virtual const osg::Node* getNode() const;

        virtual osg::Node* getNode();

        virtual void home(const GUIEventAdapter& ea,GUIActionAdapter& us);

        virtual void init(const GUIEventAdapter& ea,GUIActionAdapter& us);

        virtual bool handle(const GUIEventAdapter& ea,GUIActionAdapter& us);

        /** Get the keyboard and mouse usage of this manipulator.*/
        virtual void getUsage(osg::ApplicationUsage& usage) const;

        enum YawControlMode {
                YAW_AUTOMATICALLY_WHEN_BANKED,
                NO_AUTOMATIC_YAW
        };

        /** Configure the Yaw control for the flight model. */
        void setYawControlMode(YawControlMode ycm) { _yawMode = ycm; }

        void setModelScale(double in_ms) { _modelScale = in_ms; }
        double getModelScale() const { return _modelScale; }

        void setAcceleration(double in_acc) { _acceleration = in_acc; }
        double getAcceleration() const { return _acceleration; }

        void setVelocity(double in_vel) { _velocity = in_vel; }
        double getVelocity() const { return _velocity; }

    protected:

        virtual ~FlightManipulator();

        /** Reset the internal GUIEvent stack.*/
        void flushMouseEventStack();
        /** Add the current mouse GUIEvent to internal stack.*/
        void addMouseEvent(const GUIEventAdapter& ea);

        void computePosition(const osg::Vec3& eye,const osg::Vec3& lv,const osg::Vec3& up);

        /** For the give mouse movement calculate the movement of the camera.
            Return true is camera has moved and a redraw is required.*/
        bool calcMovement();


        // Internal event stack comprising last two mouse events.
        osg::ref_ptr<const GUIEventAdapter> _ga_t1;
        osg::ref_ptr<const GUIEventAdapter> _ga_t0;

        osg::ref_ptr<osg::Node>       _node;

        double _modelScale;
        double _acceleration;
        double _velocity;

        YawControlMode _yawMode;
        
        osg::Vec3d  _eye;
        osg::Quat   _rotation;
        double      _distance;

};

}

#endif

