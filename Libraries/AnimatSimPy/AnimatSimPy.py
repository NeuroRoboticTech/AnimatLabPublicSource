# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AnimatSimPy', [dirname(__file__)])
        except ImportError:
            import _AnimatSimPy
            return _AnimatSimPy
        if fp is not None:
            try:
                _mod = imp.load_module('_AnimatSimPy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _AnimatSimPy = swig_import_helper()
    del swig_import_helper
else:
    import _AnimatSimPy
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _AnimatSimPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AnimatSimPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AnimatSimPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AnimatSimPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AnimatSimPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AnimatSimPy.SwigPyIterator_copy(self)

    def next(self):
        return _AnimatSimPy.SwigPyIterator_next(self)

    def __next__(self):
        return _AnimatSimPy.SwigPyIterator___next__(self)

    def previous(self):
        return _AnimatSimPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AnimatSimPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AnimatSimPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AnimatSimPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AnimatSimPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AnimatSimPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AnimatSimPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AnimatSimPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _AnimatSimPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_AnimatSimPy.SHARED_PTR_DISOWN_swigconstant(_AnimatSimPy)
SHARED_PTR_DISOWN = _AnimatSimPy.SHARED_PTR_DISOWN
class vector_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_string___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_string___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_string___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_string_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_string___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_string_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_string_empty(self)

    def size(self):
        return _AnimatSimPy.vector_string_size(self)

    def clear(self):
        return _AnimatSimPy.vector_string_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_string_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_string_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_string_begin(self)

    def end(self):
        return _AnimatSimPy.vector_string_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_string_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_string_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_string_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_string_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_string(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_string_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_string_front(self)

    def back(self):
        return _AnimatSimPy.vector_string_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_string_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_string_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_string_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_string_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_string
    __del__ = lambda self: None
vector_string_swigregister = _AnimatSimPy.vector_string_swigregister
vector_string_swigregister(vector_string)

class vector_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_int, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_int___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_int___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_int___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_int_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_int___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_int_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_int_empty(self)

    def size(self):
        return _AnimatSimPy.vector_int_size(self)

    def clear(self):
        return _AnimatSimPy.vector_int_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_int_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_int_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_int_begin(self)

    def end(self):
        return _AnimatSimPy.vector_int_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_int_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_int_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_int_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_int_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_int(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_int_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_int_front(self)

    def back(self):
        return _AnimatSimPy.vector_int_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_int_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_int_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_int_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_int_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_int_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_int
    __del__ = lambda self: None
vector_int_swigregister = _AnimatSimPy.vector_int_swigregister
vector_int_swigregister(vector_int)

class vector_long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_long, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_long_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_long___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_long___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_long___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_long_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_long___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_long___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_long___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_long___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_long___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_long___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_long_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_long_empty(self)

    def size(self):
        return _AnimatSimPy.vector_long_size(self)

    def clear(self):
        return _AnimatSimPy.vector_long_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_long_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_long_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_long_begin(self)

    def end(self):
        return _AnimatSimPy.vector_long_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_long_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_long_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_long_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_long_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_long(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_long_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_long_front(self)

    def back(self):
        return _AnimatSimPy.vector_long_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_long_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_long_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_long_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_long_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_long_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_long
    __del__ = lambda self: None
vector_long_swigregister = _AnimatSimPy.vector_long_swigregister
vector_long_swigregister(vector_long)

class vector_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_float, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_float_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_float___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_float___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_float___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_float_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_float___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_float___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_float___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_float___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_float___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_float___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_float_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_float_empty(self)

    def size(self):
        return _AnimatSimPy.vector_float_size(self)

    def clear(self):
        return _AnimatSimPy.vector_float_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_float_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_float_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_float_begin(self)

    def end(self):
        return _AnimatSimPy.vector_float_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_float_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_float_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_float_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_float_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_float(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_float_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_float_front(self)

    def back(self):
        return _AnimatSimPy.vector_float_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_float_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_float_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_float_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_float_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_float_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_float
    __del__ = lambda self: None
vector_float_swigregister = _AnimatSimPy.vector_float_swigregister
vector_float_swigregister(vector_float)

class vector_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_double___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_double___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_double___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_double_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_double___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_double_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_double_empty(self)

    def size(self):
        return _AnimatSimPy.vector_double_size(self)

    def clear(self):
        return _AnimatSimPy.vector_double_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_double_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_double_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_double_begin(self)

    def end(self):
        return _AnimatSimPy.vector_double_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_double_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_double_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_double_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_double_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_double(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_double_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_double_front(self)

    def back(self):
        return _AnimatSimPy.vector_double_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_double_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_double_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_double_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_double_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_double
    __del__ = lambda self: None
vector_double_swigregister = _AnimatSimPy.vector_double_swigregister
vector_double_swigregister(vector_double)

class vector_ActivatedItemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_ActivatedItemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_ActivatedItemPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_ActivatedItemPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_ActivatedItemPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_ActivatedItemPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_ActivatedItemPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_ActivatedItemPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_ActivatedItemPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_ActivatedItemPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_ActivatedItemPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_ActivatedItemPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_ActivatedItemPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_ActivatedItemPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_ActivatedItemPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_ActivatedItemPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_ActivatedItemPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_ActivatedItemPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_ActivatedItemPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_ActivatedItemPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_ActivatedItemPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_ActivatedItemPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_ActivatedItemPtr
    __del__ = lambda self: None
vector_ActivatedItemPtr_swigregister = _AnimatSimPy.vector_ActivatedItemPtr_swigregister
vector_ActivatedItemPtr_swigregister(vector_ActivatedItemPtr)

class vector_AdapterPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_AdapterPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_AdapterPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_AdapterPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_AdapterPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_AdapterPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_AdapterPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_AdapterPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_AdapterPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_AdapterPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_AdapterPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_AdapterPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_AdapterPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_AdapterPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_AdapterPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_AdapterPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_AdapterPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_AdapterPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_AdapterPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_AdapterPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_AdapterPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_AdapterPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_AdapterPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_AdapterPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_AdapterPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_AdapterPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_AdapterPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_AdapterPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_AdapterPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_AdapterPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_AdapterPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_AdapterPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_AdapterPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_AdapterPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_AdapterPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_AdapterPtr
    __del__ = lambda self: None
vector_AdapterPtr_swigregister = _AnimatSimPy.vector_AdapterPtr_swigregister
vector_AdapterPtr_swigregister(vector_AdapterPtr)

class vector_AttachmentPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_AttachmentPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_AttachmentPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_AttachmentPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_AttachmentPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_AttachmentPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_AttachmentPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_AttachmentPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_AttachmentPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_AttachmentPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_AttachmentPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_AttachmentPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_AttachmentPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_AttachmentPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_AttachmentPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_AttachmentPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_AttachmentPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_AttachmentPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_AttachmentPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_AttachmentPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_AttachmentPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_AttachmentPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_AttachmentPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_AttachmentPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_AttachmentPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_AttachmentPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_AttachmentPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_AttachmentPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_AttachmentPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_AttachmentPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_AttachmentPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_AttachmentPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_AttachmentPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_AttachmentPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_AttachmentPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_AttachmentPtr
    __del__ = lambda self: None
vector_AttachmentPtr_swigregister = _AnimatSimPy.vector_AttachmentPtr_swigregister
vector_AttachmentPtr_swigregister(vector_AttachmentPtr)

class vector_BodyPartPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_BodyPartPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_BodyPartPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_BodyPartPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_BodyPartPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_BodyPartPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_BodyPartPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_BodyPartPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_BodyPartPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_BodyPartPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_BodyPartPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_BodyPartPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_BodyPartPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_BodyPartPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_BodyPartPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_BodyPartPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_BodyPartPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_BodyPartPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_BodyPartPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_BodyPartPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_BodyPartPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_BodyPartPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_BodyPartPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_BodyPartPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_BodyPartPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_BodyPartPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_BodyPartPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_BodyPartPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_BodyPartPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_BodyPartPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_BodyPartPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_BodyPartPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_BodyPartPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_BodyPartPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_BodyPartPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_BodyPartPtr
    __del__ = lambda self: None
vector_BodyPartPtr_swigregister = _AnimatSimPy.vector_BodyPartPtr_swigregister
vector_BodyPartPtr_swigregister(vector_BodyPartPtr)

class vector_CollisionPairPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_CollisionPairPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_CollisionPairPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_CollisionPairPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_CollisionPairPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_CollisionPairPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_CollisionPairPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_CollisionPairPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_CollisionPairPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_CollisionPairPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_CollisionPairPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_CollisionPairPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_CollisionPairPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_CollisionPairPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_CollisionPairPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_CollisionPairPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_CollisionPairPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_CollisionPairPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_CollisionPairPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_CollisionPairPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_CollisionPairPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_CollisionPairPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_CollisionPairPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_CollisionPairPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_CollisionPairPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_CollisionPairPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_CollisionPairPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_CollisionPairPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_CollisionPairPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_CollisionPairPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_CollisionPairPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_CollisionPairPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_CollisionPairPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_CollisionPairPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_CollisionPairPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_CollisionPairPtr
    __del__ = lambda self: None
vector_CollisionPairPtr_swigregister = _AnimatSimPy.vector_CollisionPairPtr_swigregister
vector_CollisionPairPtr_swigregister(vector_CollisionPairPtr)

class vector_CStdVariablePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_CStdVariablePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_CStdVariablePtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_CStdVariablePtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_CStdVariablePtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_CStdVariablePtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_CStdVariablePtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_CStdVariablePtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_CStdVariablePtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_CStdVariablePtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_CStdVariablePtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_CStdVariablePtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_CStdVariablePtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_CStdVariablePtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_CStdVariablePtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_CStdVariablePtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_CStdVariablePtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_CStdVariablePtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_CStdVariablePtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_CStdVariablePtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_CStdVariablePtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_CStdVariablePtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_CStdVariablePtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_CStdVariablePtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_CStdVariablePtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_CStdVariablePtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_CStdVariablePtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_CStdVariablePtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_CStdVariablePtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_CStdVariablePtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_CStdVariablePtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_CStdVariablePtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_CStdVariablePtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_CStdVariablePtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_CStdVariablePtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_CStdVariablePtr
    __del__ = lambda self: None
vector_CStdVariablePtr_swigregister = _AnimatSimPy.vector_CStdVariablePtr_swigregister
vector_CStdVariablePtr_swigregister(vector_CStdVariablePtr)

class vector_DataColumnPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_DataColumnPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_DataColumnPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_DataColumnPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_DataColumnPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_DataColumnPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_DataColumnPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_DataColumnPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_DataColumnPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_DataColumnPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_DataColumnPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_DataColumnPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_DataColumnPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_DataColumnPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_DataColumnPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_DataColumnPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_DataColumnPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_DataColumnPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_DataColumnPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_DataColumnPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_DataColumnPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_DataColumnPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_DataColumnPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_DataColumnPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_DataColumnPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_DataColumnPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_DataColumnPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_DataColumnPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_DataColumnPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_DataColumnPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_DataColumnPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_DataColumnPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_DataColumnPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_DataColumnPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_DataColumnPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_DataColumnPtr
    __del__ = lambda self: None
vector_DataColumnPtr_swigregister = _AnimatSimPy.vector_DataColumnPtr_swigregister
vector_DataColumnPtr_swigregister(vector_DataColumnPtr)

class vector_HudItemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_HudItemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_HudItemPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_HudItemPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_HudItemPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_HudItemPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_HudItemPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_HudItemPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_HudItemPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_HudItemPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_HudItemPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_HudItemPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_HudItemPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_HudItemPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_HudItemPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_HudItemPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_HudItemPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_HudItemPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_HudItemPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_HudItemPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_HudItemPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_HudItemPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_HudItemPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_HudItemPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_HudItemPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_HudItemPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_HudItemPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_HudItemPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_HudItemPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_HudItemPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_HudItemPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_HudItemPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_HudItemPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_HudItemPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_HudItemPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_HudItemPtr
    __del__ = lambda self: None
vector_HudItemPtr_swigregister = _AnimatSimPy.vector_HudItemPtr_swigregister
vector_HudItemPtr_swigregister(vector_HudItemPtr)

class vector_KeyFramePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_KeyFramePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_KeyFramePtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_KeyFramePtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_KeyFramePtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_KeyFramePtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_KeyFramePtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_KeyFramePtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_KeyFramePtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_KeyFramePtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_KeyFramePtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_KeyFramePtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_KeyFramePtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_KeyFramePtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_KeyFramePtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_KeyFramePtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_KeyFramePtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_KeyFramePtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_KeyFramePtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_KeyFramePtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_KeyFramePtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_KeyFramePtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_KeyFramePtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_KeyFramePtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_KeyFramePtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_KeyFramePtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_KeyFramePtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_KeyFramePtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_KeyFramePtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_KeyFramePtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_KeyFramePtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_KeyFramePtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_KeyFramePtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_KeyFramePtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_KeyFramePtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_KeyFramePtr
    __del__ = lambda self: None
vector_KeyFramePtr_swigregister = _AnimatSimPy.vector_KeyFramePtr_swigregister
vector_KeyFramePtr_swigregister(vector_KeyFramePtr)

class vector_LightPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_LightPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_LightPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_LightPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_LightPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_LightPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_LightPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_LightPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_LightPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_LightPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_LightPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_LightPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_LightPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_LightPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_LightPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_LightPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_LightPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_LightPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_LightPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_LightPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_LightPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_LightPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_LightPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_LightPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_LightPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_LightPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_LightPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_LightPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_LightPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_LightPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_LightPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_LightPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_LightPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_LightPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_LightPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_LightPtr
    __del__ = lambda self: None
vector_LightPtr_swigregister = _AnimatSimPy.vector_LightPtr_swigregister
vector_LightPtr_swigregister(vector_LightPtr)

class vector_MaterialTypePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_MaterialTypePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_MaterialTypePtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_MaterialTypePtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_MaterialTypePtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_MaterialTypePtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_MaterialTypePtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_MaterialTypePtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_MaterialTypePtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_MaterialTypePtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_MaterialTypePtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_MaterialTypePtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_MaterialTypePtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_MaterialTypePtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_MaterialTypePtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_MaterialTypePtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_MaterialTypePtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_MaterialTypePtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_MaterialTypePtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_MaterialTypePtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_MaterialTypePtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_MaterialTypePtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_MaterialTypePtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_MaterialTypePtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_MaterialTypePtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_MaterialTypePtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_MaterialTypePtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_MaterialTypePtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_MaterialTypePtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_MaterialTypePtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_MaterialTypePtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_MaterialTypePtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_MaterialTypePtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_MaterialTypePtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_MaterialTypePtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_MaterialTypePtr
    __del__ = lambda self: None
vector_MaterialTypePtr_swigregister = _AnimatSimPy.vector_MaterialTypePtr_swigregister
vector_MaterialTypePtr_swigregister(vector_MaterialTypePtr)

class vector_ModuleThreadProcessorPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_ModuleThreadProcessorPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_ModuleThreadProcessorPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_ModuleThreadProcessorPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_ModuleThreadProcessorPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_ModuleThreadProcessorPtr
    __del__ = lambda self: None
vector_ModuleThreadProcessorPtr_swigregister = _AnimatSimPy.vector_ModuleThreadProcessorPtr_swigregister
vector_ModuleThreadProcessorPtr_swigregister(vector_ModuleThreadProcessorPtr)

class vector_ReceptiveFieldPairPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_ReceptiveFieldPairPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_ReceptiveFieldPairPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_ReceptiveFieldPairPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_ReceptiveFieldPairPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_ReceptiveFieldPairPtr
    __del__ = lambda self: None
vector_ReceptiveFieldPairPtr_swigregister = _AnimatSimPy.vector_ReceptiveFieldPairPtr_swigregister
vector_ReceptiveFieldPairPtr_swigregister(vector_ReceptiveFieldPairPtr)

class vector_ReceptiveFieldPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_ReceptiveFieldPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_ReceptiveFieldPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_ReceptiveFieldPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_ReceptiveFieldPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_ReceptiveFieldPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_ReceptiveFieldPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_ReceptiveFieldPtr
    __del__ = lambda self: None
vector_ReceptiveFieldPtr_swigregister = _AnimatSimPy.vector_ReceptiveFieldPtr_swigregister
vector_ReceptiveFieldPtr_swigregister(vector_ReceptiveFieldPtr)

class vector_RigidBodyPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_RigidBodyPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_RigidBodyPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_RigidBodyPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_RigidBodyPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_RigidBodyPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_RigidBodyPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_RigidBodyPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_RigidBodyPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_RigidBodyPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_RigidBodyPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_RigidBodyPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_RigidBodyPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_RigidBodyPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_RigidBodyPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_RigidBodyPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_RigidBodyPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_RigidBodyPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_RigidBodyPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_RigidBodyPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_RigidBodyPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_RigidBodyPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_RigidBodyPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_RigidBodyPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_RigidBodyPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_RigidBodyPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_RigidBodyPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_RigidBodyPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_RigidBodyPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_RigidBodyPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_RigidBodyPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_RigidBodyPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_RigidBodyPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_RigidBodyPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_RigidBodyPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_RigidBodyPtr
    __del__ = lambda self: None
vector_RigidBodyPtr_swigregister = _AnimatSimPy.vector_RigidBodyPtr_swigregister
vector_RigidBodyPtr_swigregister(vector_RigidBodyPtr)

class vector_RobotInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_RobotInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_RobotInterfacePtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_RobotInterfacePtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_RobotInterfacePtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_RobotInterfacePtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_RobotInterfacePtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_RobotInterfacePtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_RobotInterfacePtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_RobotInterfacePtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_RobotInterfacePtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_RobotInterfacePtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_RobotInterfacePtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_RobotInterfacePtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_RobotInterfacePtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_RobotInterfacePtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_RobotInterfacePtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_RobotInterfacePtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_RobotInterfacePtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_RobotInterfacePtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_RobotInterfacePtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_RobotInterfacePtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_RobotInterfacePtr
    __del__ = lambda self: None
vector_RobotInterfacePtr_swigregister = _AnimatSimPy.vector_RobotInterfacePtr_swigregister
vector_RobotInterfacePtr_swigregister(vector_RobotInterfacePtr)

class vector_RobotIOControlPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_RobotIOControlPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_RobotIOControlPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_RobotIOControlPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_RobotIOControlPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_RobotIOControlPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_RobotIOControlPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_RobotIOControlPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_RobotIOControlPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_RobotIOControlPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_RobotIOControlPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_RobotIOControlPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_RobotIOControlPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_RobotIOControlPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_RobotIOControlPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_RobotIOControlPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_RobotIOControlPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_RobotIOControlPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_RobotIOControlPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_RobotIOControlPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_RobotIOControlPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_RobotIOControlPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_RobotIOControlPtr
    __del__ = lambda self: None
vector_RobotIOControlPtr_swigregister = _AnimatSimPy.vector_RobotIOControlPtr_swigregister
vector_RobotIOControlPtr_swigregister(vector_RobotIOControlPtr)

class vector_RobotPartInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_RobotPartInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_RobotPartInterfacePtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_RobotPartInterfacePtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_RobotPartInterfacePtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_RobotPartInterfacePtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_RobotPartInterfacePtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_RobotPartInterfacePtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_RobotPartInterfacePtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_RobotPartInterfacePtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_RobotPartInterfacePtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_RobotPartInterfacePtr
    __del__ = lambda self: None
vector_RobotPartInterfacePtr_swigregister = _AnimatSimPy.vector_RobotPartInterfacePtr_swigregister
vector_RobotPartInterfacePtr_swigregister(vector_RobotPartInterfacePtr)

class vector_SimulationWindowPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_SimulationWindowPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_SimulationWindowPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_SimulationWindowPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_SimulationWindowPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_SimulationWindowPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_SimulationWindowPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_SimulationWindowPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_SimulationWindowPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_SimulationWindowPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_SimulationWindowPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_SimulationWindowPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_SimulationWindowPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_SimulationWindowPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_SimulationWindowPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_SimulationWindowPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_SimulationWindowPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_SimulationWindowPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_SimulationWindowPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_SimulationWindowPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_SimulationWindowPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_SimulationWindowPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_SimulationWindowPtr
    __del__ = lambda self: None
vector_SimulationWindowPtr_swigregister = _AnimatSimPy.vector_SimulationWindowPtr_swigregister
vector_SimulationWindowPtr_swigregister(vector_SimulationWindowPtr)

class vector_TypePropertyPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_TypePropertyPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_TypePropertyPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_TypePropertyPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_TypePropertyPtr___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_TypePropertyPtr___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_TypePropertyPtr___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_TypePropertyPtr_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_TypePropertyPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_TypePropertyPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_TypePropertyPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_TypePropertyPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_TypePropertyPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_TypePropertyPtr___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_TypePropertyPtr_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_TypePropertyPtr_empty(self)

    def size(self):
        return _AnimatSimPy.vector_TypePropertyPtr_size(self)

    def clear(self):
        return _AnimatSimPy.vector_TypePropertyPtr_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_TypePropertyPtr_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_TypePropertyPtr_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_TypePropertyPtr_begin(self)

    def end(self):
        return _AnimatSimPy.vector_TypePropertyPtr_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_TypePropertyPtr_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_TypePropertyPtr_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_TypePropertyPtr_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_TypePropertyPtr_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_TypePropertyPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_TypePropertyPtr_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_TypePropertyPtr_front(self)

    def back(self):
        return _AnimatSimPy.vector_TypePropertyPtr_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_TypePropertyPtr_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_TypePropertyPtr_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_TypePropertyPtr_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_TypePropertyPtr_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_TypePropertyPtr_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_TypePropertyPtr
    __del__ = lambda self: None
vector_TypePropertyPtr_swigregister = _AnimatSimPy.vector_TypePropertyPtr_swigregister
vector_TypePropertyPtr_swigregister(vector_TypePropertyPtr)

class vector_SimulationThread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_SimulationThread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_SimulationThread, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_SimulationThread_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_SimulationThread___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_SimulationThread___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_SimulationThread___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_SimulationThread_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_SimulationThread___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_SimulationThread___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_SimulationThread___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_SimulationThread___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_SimulationThread___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_SimulationThread___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_SimulationThread_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_SimulationThread_empty(self)

    def size(self):
        return _AnimatSimPy.vector_SimulationThread_size(self)

    def clear(self):
        return _AnimatSimPy.vector_SimulationThread_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_SimulationThread_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_SimulationThread_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_SimulationThread_begin(self)

    def end(self):
        return _AnimatSimPy.vector_SimulationThread_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_SimulationThread_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_SimulationThread_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_SimulationThread_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_SimulationThread_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_SimulationThread(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_SimulationThread_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_SimulationThread_front(self)

    def back(self):
        return _AnimatSimPy.vector_SimulationThread_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_SimulationThread_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_SimulationThread_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_SimulationThread_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_SimulationThread_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_SimulationThread_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_SimulationThread
    __del__ = lambda self: None
vector_SimulationThread_swigregister = _AnimatSimPy.vector_SimulationThread_swigregister
vector_SimulationThread_swigregister(vector_SimulationThread)

class vector_Synapse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_Synapse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_Synapse, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_Synapse_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_Synapse___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_Synapse___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_Synapse___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_Synapse_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_Synapse___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_Synapse___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_Synapse___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_Synapse___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_Synapse___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_Synapse___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_Synapse_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_Synapse_empty(self)

    def size(self):
        return _AnimatSimPy.vector_Synapse_size(self)

    def clear(self):
        return _AnimatSimPy.vector_Synapse_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_Synapse_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_Synapse_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_Synapse_begin(self)

    def end(self):
        return _AnimatSimPy.vector_Synapse_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_Synapse_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_Synapse_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_Synapse_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_Synapse_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_Synapse(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_Synapse_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_Synapse_front(self)

    def back(self):
        return _AnimatSimPy.vector_Synapse_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_Synapse_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_Synapse_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_Synapse_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_Synapse_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_Synapse_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_Synapse
    __del__ = lambda self: None
vector_Synapse_swigregister = _AnimatSimPy.vector_Synapse_swigregister
vector_Synapse_swigregister(vector_Synapse)

class vector_Neuron(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_Neuron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_Neuron, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.vector_Neuron_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.vector_Neuron___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.vector_Neuron___bool__(self)

    def __len__(self):
        return _AnimatSimPy.vector_Neuron___len__(self)

    def pop(self):
        return _AnimatSimPy.vector_Neuron_pop(self)

    def __getslice__(self, i, j):
        return _AnimatSimPy.vector_Neuron___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AnimatSimPy.vector_Neuron___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AnimatSimPy.vector_Neuron___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AnimatSimPy.vector_Neuron___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AnimatSimPy.vector_Neuron___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AnimatSimPy.vector_Neuron___setitem__(self, *args)

    def append(self, x):
        return _AnimatSimPy.vector_Neuron_append(self, x)

    def empty(self):
        return _AnimatSimPy.vector_Neuron_empty(self)

    def size(self):
        return _AnimatSimPy.vector_Neuron_size(self)

    def clear(self):
        return _AnimatSimPy.vector_Neuron_clear(self)

    def swap(self, v):
        return _AnimatSimPy.vector_Neuron_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.vector_Neuron_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.vector_Neuron_begin(self)

    def end(self):
        return _AnimatSimPy.vector_Neuron_end(self)

    def rbegin(self):
        return _AnimatSimPy.vector_Neuron_rbegin(self)

    def rend(self):
        return _AnimatSimPy.vector_Neuron_rend(self)

    def pop_back(self):
        return _AnimatSimPy.vector_Neuron_pop_back(self)

    def erase(self, *args):
        return _AnimatSimPy.vector_Neuron_erase(self, *args)

    def __init__(self, *args):
        this = _AnimatSimPy.new_vector_Neuron(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _AnimatSimPy.vector_Neuron_push_back(self, x)

    def front(self):
        return _AnimatSimPy.vector_Neuron_front(self)

    def back(self):
        return _AnimatSimPy.vector_Neuron_back(self)

    def assign(self, n, x):
        return _AnimatSimPy.vector_Neuron_assign(self, n, x)

    def resize(self, *args):
        return _AnimatSimPy.vector_Neuron_resize(self, *args)

    def insert(self, *args):
        return _AnimatSimPy.vector_Neuron_insert(self, *args)

    def reserve(self, n):
        return _AnimatSimPy.vector_Neuron_reserve(self, n)

    def capacity(self):
        return _AnimatSimPy.vector_Neuron_capacity(self)
    __swig_destroy__ = _AnimatSimPy.delete_vector_Neuron
    __del__ = lambda self: None
vector_Neuron_swigregister = _AnimatSimPy.vector_Neuron_swigregister
vector_Neuron_swigregister(vector_Neuron)

class map_string_ActivatedItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_ActivatedItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_ActivatedItem, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.map_string_ActivatedItem_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.map_string_ActivatedItem___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.map_string_ActivatedItem___bool__(self)

    def __len__(self):
        return _AnimatSimPy.map_string_ActivatedItem___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _AnimatSimPy.map_string_ActivatedItem___getitem__(self, key)

    def __delitem__(self, key):
        return _AnimatSimPy.map_string_ActivatedItem___delitem__(self, key)

    def has_key(self, key):
        return _AnimatSimPy.map_string_ActivatedItem_has_key(self, key)

    def keys(self):
        return _AnimatSimPy.map_string_ActivatedItem_keys(self)

    def values(self):
        return _AnimatSimPy.map_string_ActivatedItem_values(self)

    def items(self):
        return _AnimatSimPy.map_string_ActivatedItem_items(self)

    def __contains__(self, key):
        return _AnimatSimPy.map_string_ActivatedItem___contains__(self, key)

    def key_iterator(self):
        return _AnimatSimPy.map_string_ActivatedItem_key_iterator(self)

    def value_iterator(self):
        return _AnimatSimPy.map_string_ActivatedItem_value_iterator(self)

    def __setitem__(self, *args):
        return _AnimatSimPy.map_string_ActivatedItem___setitem__(self, *args)

    def asdict(self):
        return _AnimatSimPy.map_string_ActivatedItem_asdict(self)

    def __init__(self, *args):
        this = _AnimatSimPy.new_map_string_ActivatedItem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _AnimatSimPy.map_string_ActivatedItem_empty(self)

    def size(self):
        return _AnimatSimPy.map_string_ActivatedItem_size(self)

    def clear(self):
        return _AnimatSimPy.map_string_ActivatedItem_clear(self)

    def swap(self, v):
        return _AnimatSimPy.map_string_ActivatedItem_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.map_string_ActivatedItem_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.map_string_ActivatedItem_begin(self)

    def end(self):
        return _AnimatSimPy.map_string_ActivatedItem_end(self)

    def rbegin(self):
        return _AnimatSimPy.map_string_ActivatedItem_rbegin(self)

    def rend(self):
        return _AnimatSimPy.map_string_ActivatedItem_rend(self)

    def count(self, x):
        return _AnimatSimPy.map_string_ActivatedItem_count(self, x)

    def erase(self, *args):
        return _AnimatSimPy.map_string_ActivatedItem_erase(self, *args)

    def find(self, x):
        return _AnimatSimPy.map_string_ActivatedItem_find(self, x)

    def lower_bound(self, x):
        return _AnimatSimPy.map_string_ActivatedItem_lower_bound(self, x)

    def upper_bound(self, x):
        return _AnimatSimPy.map_string_ActivatedItem_upper_bound(self, x)
    __swig_destroy__ = _AnimatSimPy.delete_map_string_ActivatedItem
    __del__ = lambda self: None
map_string_ActivatedItem_swigregister = _AnimatSimPy.map_string_ActivatedItem_swigregister
map_string_ActivatedItem_swigregister(map_string_ActivatedItem)

class map_string_AnimatBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_AnimatBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_AnimatBase, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.map_string_AnimatBase_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.map_string_AnimatBase___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.map_string_AnimatBase___bool__(self)

    def __len__(self):
        return _AnimatSimPy.map_string_AnimatBase___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _AnimatSimPy.map_string_AnimatBase___getitem__(self, key)

    def __delitem__(self, key):
        return _AnimatSimPy.map_string_AnimatBase___delitem__(self, key)

    def has_key(self, key):
        return _AnimatSimPy.map_string_AnimatBase_has_key(self, key)

    def keys(self):
        return _AnimatSimPy.map_string_AnimatBase_keys(self)

    def values(self):
        return _AnimatSimPy.map_string_AnimatBase_values(self)

    def items(self):
        return _AnimatSimPy.map_string_AnimatBase_items(self)

    def __contains__(self, key):
        return _AnimatSimPy.map_string_AnimatBase___contains__(self, key)

    def key_iterator(self):
        return _AnimatSimPy.map_string_AnimatBase_key_iterator(self)

    def value_iterator(self):
        return _AnimatSimPy.map_string_AnimatBase_value_iterator(self)

    def __setitem__(self, *args):
        return _AnimatSimPy.map_string_AnimatBase___setitem__(self, *args)

    def asdict(self):
        return _AnimatSimPy.map_string_AnimatBase_asdict(self)

    def __init__(self, *args):
        this = _AnimatSimPy.new_map_string_AnimatBase(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _AnimatSimPy.map_string_AnimatBase_empty(self)

    def size(self):
        return _AnimatSimPy.map_string_AnimatBase_size(self)

    def clear(self):
        return _AnimatSimPy.map_string_AnimatBase_clear(self)

    def swap(self, v):
        return _AnimatSimPy.map_string_AnimatBase_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.map_string_AnimatBase_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.map_string_AnimatBase_begin(self)

    def end(self):
        return _AnimatSimPy.map_string_AnimatBase_end(self)

    def rbegin(self):
        return _AnimatSimPy.map_string_AnimatBase_rbegin(self)

    def rend(self):
        return _AnimatSimPy.map_string_AnimatBase_rend(self)

    def count(self, x):
        return _AnimatSimPy.map_string_AnimatBase_count(self, x)

    def erase(self, *args):
        return _AnimatSimPy.map_string_AnimatBase_erase(self, *args)

    def find(self, x):
        return _AnimatSimPy.map_string_AnimatBase_find(self, x)

    def lower_bound(self, x):
        return _AnimatSimPy.map_string_AnimatBase_lower_bound(self, x)

    def upper_bound(self, x):
        return _AnimatSimPy.map_string_AnimatBase_upper_bound(self, x)
    __swig_destroy__ = _AnimatSimPy.delete_map_string_AnimatBase
    __del__ = lambda self: None
map_string_AnimatBase_swigregister = _AnimatSimPy.map_string_AnimatBase_swigregister
map_string_AnimatBase_swigregister(map_string_AnimatBase)

class map_string_DataColumn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_DataColumn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_DataColumn, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.map_string_DataColumn_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.map_string_DataColumn___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.map_string_DataColumn___bool__(self)

    def __len__(self):
        return _AnimatSimPy.map_string_DataColumn___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _AnimatSimPy.map_string_DataColumn___getitem__(self, key)

    def __delitem__(self, key):
        return _AnimatSimPy.map_string_DataColumn___delitem__(self, key)

    def has_key(self, key):
        return _AnimatSimPy.map_string_DataColumn_has_key(self, key)

    def keys(self):
        return _AnimatSimPy.map_string_DataColumn_keys(self)

    def values(self):
        return _AnimatSimPy.map_string_DataColumn_values(self)

    def items(self):
        return _AnimatSimPy.map_string_DataColumn_items(self)

    def __contains__(self, key):
        return _AnimatSimPy.map_string_DataColumn___contains__(self, key)

    def key_iterator(self):
        return _AnimatSimPy.map_string_DataColumn_key_iterator(self)

    def value_iterator(self):
        return _AnimatSimPy.map_string_DataColumn_value_iterator(self)

    def __setitem__(self, *args):
        return _AnimatSimPy.map_string_DataColumn___setitem__(self, *args)

    def asdict(self):
        return _AnimatSimPy.map_string_DataColumn_asdict(self)

    def __init__(self, *args):
        this = _AnimatSimPy.new_map_string_DataColumn(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _AnimatSimPy.map_string_DataColumn_empty(self)

    def size(self):
        return _AnimatSimPy.map_string_DataColumn_size(self)

    def clear(self):
        return _AnimatSimPy.map_string_DataColumn_clear(self)

    def swap(self, v):
        return _AnimatSimPy.map_string_DataColumn_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.map_string_DataColumn_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.map_string_DataColumn_begin(self)

    def end(self):
        return _AnimatSimPy.map_string_DataColumn_end(self)

    def rbegin(self):
        return _AnimatSimPy.map_string_DataColumn_rbegin(self)

    def rend(self):
        return _AnimatSimPy.map_string_DataColumn_rend(self)

    def count(self, x):
        return _AnimatSimPy.map_string_DataColumn_count(self, x)

    def erase(self, *args):
        return _AnimatSimPy.map_string_DataColumn_erase(self, *args)

    def find(self, x):
        return _AnimatSimPy.map_string_DataColumn_find(self, x)

    def lower_bound(self, x):
        return _AnimatSimPy.map_string_DataColumn_lower_bound(self, x)

    def upper_bound(self, x):
        return _AnimatSimPy.map_string_DataColumn_upper_bound(self, x)
    __swig_destroy__ = _AnimatSimPy.delete_map_string_DataColumn
    __del__ = lambda self: None
map_string_DataColumn_swigregister = _AnimatSimPy.map_string_DataColumn_swigregister
map_string_DataColumn_swigregister(map_string_DataColumn)

class map_string_IStdClassFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_IStdClassFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_IStdClassFactory, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.map_string_IStdClassFactory_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.map_string_IStdClassFactory___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.map_string_IStdClassFactory___bool__(self)

    def __len__(self):
        return _AnimatSimPy.map_string_IStdClassFactory___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _AnimatSimPy.map_string_IStdClassFactory___getitem__(self, key)

    def __delitem__(self, key):
        return _AnimatSimPy.map_string_IStdClassFactory___delitem__(self, key)

    def has_key(self, key):
        return _AnimatSimPy.map_string_IStdClassFactory_has_key(self, key)

    def keys(self):
        return _AnimatSimPy.map_string_IStdClassFactory_keys(self)

    def values(self):
        return _AnimatSimPy.map_string_IStdClassFactory_values(self)

    def items(self):
        return _AnimatSimPy.map_string_IStdClassFactory_items(self)

    def __contains__(self, key):
        return _AnimatSimPy.map_string_IStdClassFactory___contains__(self, key)

    def key_iterator(self):
        return _AnimatSimPy.map_string_IStdClassFactory_key_iterator(self)

    def value_iterator(self):
        return _AnimatSimPy.map_string_IStdClassFactory_value_iterator(self)

    def __setitem__(self, *args):
        return _AnimatSimPy.map_string_IStdClassFactory___setitem__(self, *args)

    def asdict(self):
        return _AnimatSimPy.map_string_IStdClassFactory_asdict(self)

    def __init__(self, *args):
        this = _AnimatSimPy.new_map_string_IStdClassFactory(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _AnimatSimPy.map_string_IStdClassFactory_empty(self)

    def size(self):
        return _AnimatSimPy.map_string_IStdClassFactory_size(self)

    def clear(self):
        return _AnimatSimPy.map_string_IStdClassFactory_clear(self)

    def swap(self, v):
        return _AnimatSimPy.map_string_IStdClassFactory_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.map_string_IStdClassFactory_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.map_string_IStdClassFactory_begin(self)

    def end(self):
        return _AnimatSimPy.map_string_IStdClassFactory_end(self)

    def rbegin(self):
        return _AnimatSimPy.map_string_IStdClassFactory_rbegin(self)

    def rend(self):
        return _AnimatSimPy.map_string_IStdClassFactory_rend(self)

    def count(self, x):
        return _AnimatSimPy.map_string_IStdClassFactory_count(self, x)

    def erase(self, *args):
        return _AnimatSimPy.map_string_IStdClassFactory_erase(self, *args)

    def find(self, x):
        return _AnimatSimPy.map_string_IStdClassFactory_find(self, x)

    def lower_bound(self, x):
        return _AnimatSimPy.map_string_IStdClassFactory_lower_bound(self, x)

    def upper_bound(self, x):
        return _AnimatSimPy.map_string_IStdClassFactory_upper_bound(self, x)
    __swig_destroy__ = _AnimatSimPy.delete_map_string_IStdClassFactory
    __del__ = lambda self: None
map_string_IStdClassFactory_swigregister = _AnimatSimPy.map_string_IStdClassFactory_swigregister
map_string_IStdClassFactory_swigregister(map_string_IStdClassFactory)

class map_string_Joint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_Joint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_Joint, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.map_string_Joint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.map_string_Joint___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.map_string_Joint___bool__(self)

    def __len__(self):
        return _AnimatSimPy.map_string_Joint___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _AnimatSimPy.map_string_Joint___getitem__(self, key)

    def __delitem__(self, key):
        return _AnimatSimPy.map_string_Joint___delitem__(self, key)

    def has_key(self, key):
        return _AnimatSimPy.map_string_Joint_has_key(self, key)

    def keys(self):
        return _AnimatSimPy.map_string_Joint_keys(self)

    def values(self):
        return _AnimatSimPy.map_string_Joint_values(self)

    def items(self):
        return _AnimatSimPy.map_string_Joint_items(self)

    def __contains__(self, key):
        return _AnimatSimPy.map_string_Joint___contains__(self, key)

    def key_iterator(self):
        return _AnimatSimPy.map_string_Joint_key_iterator(self)

    def value_iterator(self):
        return _AnimatSimPy.map_string_Joint_value_iterator(self)

    def __setitem__(self, *args):
        return _AnimatSimPy.map_string_Joint___setitem__(self, *args)

    def asdict(self):
        return _AnimatSimPy.map_string_Joint_asdict(self)

    def __init__(self, *args):
        this = _AnimatSimPy.new_map_string_Joint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _AnimatSimPy.map_string_Joint_empty(self)

    def size(self):
        return _AnimatSimPy.map_string_Joint_size(self)

    def clear(self):
        return _AnimatSimPy.map_string_Joint_clear(self)

    def swap(self, v):
        return _AnimatSimPy.map_string_Joint_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.map_string_Joint_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.map_string_Joint_begin(self)

    def end(self):
        return _AnimatSimPy.map_string_Joint_end(self)

    def rbegin(self):
        return _AnimatSimPy.map_string_Joint_rbegin(self)

    def rend(self):
        return _AnimatSimPy.map_string_Joint_rend(self)

    def count(self, x):
        return _AnimatSimPy.map_string_Joint_count(self, x)

    def erase(self, *args):
        return _AnimatSimPy.map_string_Joint_erase(self, *args)

    def find(self, x):
        return _AnimatSimPy.map_string_Joint_find(self, x)

    def lower_bound(self, x):
        return _AnimatSimPy.map_string_Joint_lower_bound(self, x)

    def upper_bound(self, x):
        return _AnimatSimPy.map_string_Joint_upper_bound(self, x)
    __swig_destroy__ = _AnimatSimPy.delete_map_string_Joint
    __del__ = lambda self: None
map_string_Joint_swigregister = _AnimatSimPy.map_string_Joint_swigregister
map_string_Joint_swigregister(map_string_Joint)

class map_string_NeuralModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_NeuralModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_NeuralModule, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.map_string_NeuralModule_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.map_string_NeuralModule___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.map_string_NeuralModule___bool__(self)

    def __len__(self):
        return _AnimatSimPy.map_string_NeuralModule___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _AnimatSimPy.map_string_NeuralModule___getitem__(self, key)

    def __delitem__(self, key):
        return _AnimatSimPy.map_string_NeuralModule___delitem__(self, key)

    def has_key(self, key):
        return _AnimatSimPy.map_string_NeuralModule_has_key(self, key)

    def keys(self):
        return _AnimatSimPy.map_string_NeuralModule_keys(self)

    def values(self):
        return _AnimatSimPy.map_string_NeuralModule_values(self)

    def items(self):
        return _AnimatSimPy.map_string_NeuralModule_items(self)

    def __contains__(self, key):
        return _AnimatSimPy.map_string_NeuralModule___contains__(self, key)

    def key_iterator(self):
        return _AnimatSimPy.map_string_NeuralModule_key_iterator(self)

    def value_iterator(self):
        return _AnimatSimPy.map_string_NeuralModule_value_iterator(self)

    def __setitem__(self, *args):
        return _AnimatSimPy.map_string_NeuralModule___setitem__(self, *args)

    def asdict(self):
        return _AnimatSimPy.map_string_NeuralModule_asdict(self)

    def __init__(self, *args):
        this = _AnimatSimPy.new_map_string_NeuralModule(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _AnimatSimPy.map_string_NeuralModule_empty(self)

    def size(self):
        return _AnimatSimPy.map_string_NeuralModule_size(self)

    def clear(self):
        return _AnimatSimPy.map_string_NeuralModule_clear(self)

    def swap(self, v):
        return _AnimatSimPy.map_string_NeuralModule_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.map_string_NeuralModule_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.map_string_NeuralModule_begin(self)

    def end(self):
        return _AnimatSimPy.map_string_NeuralModule_end(self)

    def rbegin(self):
        return _AnimatSimPy.map_string_NeuralModule_rbegin(self)

    def rend(self):
        return _AnimatSimPy.map_string_NeuralModule_rend(self)

    def count(self, x):
        return _AnimatSimPy.map_string_NeuralModule_count(self, x)

    def erase(self, *args):
        return _AnimatSimPy.map_string_NeuralModule_erase(self, *args)

    def find(self, x):
        return _AnimatSimPy.map_string_NeuralModule_find(self, x)

    def lower_bound(self, x):
        return _AnimatSimPy.map_string_NeuralModule_lower_bound(self, x)

    def upper_bound(self, x):
        return _AnimatSimPy.map_string_NeuralModule_upper_bound(self, x)
    __swig_destroy__ = _AnimatSimPy.delete_map_string_NeuralModule
    __del__ = lambda self: None
map_string_NeuralModule_swigregister = _AnimatSimPy.map_string_NeuralModule_swigregister
map_string_NeuralModule_swigregister(map_string_NeuralModule)

class map_string_Odor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_Odor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_Odor, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.map_string_Odor_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.map_string_Odor___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.map_string_Odor___bool__(self)

    def __len__(self):
        return _AnimatSimPy.map_string_Odor___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _AnimatSimPy.map_string_Odor___getitem__(self, key)

    def __delitem__(self, key):
        return _AnimatSimPy.map_string_Odor___delitem__(self, key)

    def has_key(self, key):
        return _AnimatSimPy.map_string_Odor_has_key(self, key)

    def keys(self):
        return _AnimatSimPy.map_string_Odor_keys(self)

    def values(self):
        return _AnimatSimPy.map_string_Odor_values(self)

    def items(self):
        return _AnimatSimPy.map_string_Odor_items(self)

    def __contains__(self, key):
        return _AnimatSimPy.map_string_Odor___contains__(self, key)

    def key_iterator(self):
        return _AnimatSimPy.map_string_Odor_key_iterator(self)

    def value_iterator(self):
        return _AnimatSimPy.map_string_Odor_value_iterator(self)

    def __setitem__(self, *args):
        return _AnimatSimPy.map_string_Odor___setitem__(self, *args)

    def asdict(self):
        return _AnimatSimPy.map_string_Odor_asdict(self)

    def __init__(self, *args):
        this = _AnimatSimPy.new_map_string_Odor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _AnimatSimPy.map_string_Odor_empty(self)

    def size(self):
        return _AnimatSimPy.map_string_Odor_size(self)

    def clear(self):
        return _AnimatSimPy.map_string_Odor_clear(self)

    def swap(self, v):
        return _AnimatSimPy.map_string_Odor_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.map_string_Odor_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.map_string_Odor_begin(self)

    def end(self):
        return _AnimatSimPy.map_string_Odor_end(self)

    def rbegin(self):
        return _AnimatSimPy.map_string_Odor_rbegin(self)

    def rend(self):
        return _AnimatSimPy.map_string_Odor_rend(self)

    def count(self, x):
        return _AnimatSimPy.map_string_Odor_count(self, x)

    def erase(self, *args):
        return _AnimatSimPy.map_string_Odor_erase(self, *args)

    def find(self, x):
        return _AnimatSimPy.map_string_Odor_find(self, x)

    def lower_bound(self, x):
        return _AnimatSimPy.map_string_Odor_lower_bound(self, x)

    def upper_bound(self, x):
        return _AnimatSimPy.map_string_Odor_upper_bound(self, x)
    __swig_destroy__ = _AnimatSimPy.delete_map_string_Odor
    __del__ = lambda self: None
map_string_Odor_swigregister = _AnimatSimPy.map_string_Odor_swigregister
map_string_Odor_swigregister(map_string_Odor)

class map_string_OdorType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_OdorType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_OdorType, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.map_string_OdorType_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.map_string_OdorType___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.map_string_OdorType___bool__(self)

    def __len__(self):
        return _AnimatSimPy.map_string_OdorType___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _AnimatSimPy.map_string_OdorType___getitem__(self, key)

    def __delitem__(self, key):
        return _AnimatSimPy.map_string_OdorType___delitem__(self, key)

    def has_key(self, key):
        return _AnimatSimPy.map_string_OdorType_has_key(self, key)

    def keys(self):
        return _AnimatSimPy.map_string_OdorType_keys(self)

    def values(self):
        return _AnimatSimPy.map_string_OdorType_values(self)

    def items(self):
        return _AnimatSimPy.map_string_OdorType_items(self)

    def __contains__(self, key):
        return _AnimatSimPy.map_string_OdorType___contains__(self, key)

    def key_iterator(self):
        return _AnimatSimPy.map_string_OdorType_key_iterator(self)

    def value_iterator(self):
        return _AnimatSimPy.map_string_OdorType_value_iterator(self)

    def __setitem__(self, *args):
        return _AnimatSimPy.map_string_OdorType___setitem__(self, *args)

    def asdict(self):
        return _AnimatSimPy.map_string_OdorType_asdict(self)

    def __init__(self, *args):
        this = _AnimatSimPy.new_map_string_OdorType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _AnimatSimPy.map_string_OdorType_empty(self)

    def size(self):
        return _AnimatSimPy.map_string_OdorType_size(self)

    def clear(self):
        return _AnimatSimPy.map_string_OdorType_clear(self)

    def swap(self, v):
        return _AnimatSimPy.map_string_OdorType_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.map_string_OdorType_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.map_string_OdorType_begin(self)

    def end(self):
        return _AnimatSimPy.map_string_OdorType_end(self)

    def rbegin(self):
        return _AnimatSimPy.map_string_OdorType_rbegin(self)

    def rend(self):
        return _AnimatSimPy.map_string_OdorType_rend(self)

    def count(self, x):
        return _AnimatSimPy.map_string_OdorType_count(self, x)

    def erase(self, *args):
        return _AnimatSimPy.map_string_OdorType_erase(self, *args)

    def find(self, x):
        return _AnimatSimPy.map_string_OdorType_find(self, x)

    def lower_bound(self, x):
        return _AnimatSimPy.map_string_OdorType_lower_bound(self, x)

    def upper_bound(self, x):
        return _AnimatSimPy.map_string_OdorType_upper_bound(self, x)
    __swig_destroy__ = _AnimatSimPy.delete_map_string_OdorType
    __del__ = lambda self: None
map_string_OdorType_swigregister = _AnimatSimPy.map_string_OdorType_swigregister
map_string_OdorType_swigregister(map_string_OdorType)

class map_string_Organism(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_Organism, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_Organism, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.map_string_Organism_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.map_string_Organism___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.map_string_Organism___bool__(self)

    def __len__(self):
        return _AnimatSimPy.map_string_Organism___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _AnimatSimPy.map_string_Organism___getitem__(self, key)

    def __delitem__(self, key):
        return _AnimatSimPy.map_string_Organism___delitem__(self, key)

    def has_key(self, key):
        return _AnimatSimPy.map_string_Organism_has_key(self, key)

    def keys(self):
        return _AnimatSimPy.map_string_Organism_keys(self)

    def values(self):
        return _AnimatSimPy.map_string_Organism_values(self)

    def items(self):
        return _AnimatSimPy.map_string_Organism_items(self)

    def __contains__(self, key):
        return _AnimatSimPy.map_string_Organism___contains__(self, key)

    def key_iterator(self):
        return _AnimatSimPy.map_string_Organism_key_iterator(self)

    def value_iterator(self):
        return _AnimatSimPy.map_string_Organism_value_iterator(self)

    def __setitem__(self, *args):
        return _AnimatSimPy.map_string_Organism___setitem__(self, *args)

    def asdict(self):
        return _AnimatSimPy.map_string_Organism_asdict(self)

    def __init__(self, *args):
        this = _AnimatSimPy.new_map_string_Organism(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _AnimatSimPy.map_string_Organism_empty(self)

    def size(self):
        return _AnimatSimPy.map_string_Organism_size(self)

    def clear(self):
        return _AnimatSimPy.map_string_Organism_clear(self)

    def swap(self, v):
        return _AnimatSimPy.map_string_Organism_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.map_string_Organism_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.map_string_Organism_begin(self)

    def end(self):
        return _AnimatSimPy.map_string_Organism_end(self)

    def rbegin(self):
        return _AnimatSimPy.map_string_Organism_rbegin(self)

    def rend(self):
        return _AnimatSimPy.map_string_Organism_rend(self)

    def count(self, x):
        return _AnimatSimPy.map_string_Organism_count(self, x)

    def erase(self, *args):
        return _AnimatSimPy.map_string_Organism_erase(self, *args)

    def find(self, x):
        return _AnimatSimPy.map_string_Organism_find(self, x)

    def lower_bound(self, x):
        return _AnimatSimPy.map_string_Organism_lower_bound(self, x)

    def upper_bound(self, x):
        return _AnimatSimPy.map_string_Organism_upper_bound(self, x)
    __swig_destroy__ = _AnimatSimPy.delete_map_string_Organism
    __del__ = lambda self: None
map_string_Organism_swigregister = _AnimatSimPy.map_string_Organism_swigregister
map_string_Organism_swigregister(map_string_Organism)

class map_string_RigidBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_RigidBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_RigidBody, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.map_string_RigidBody_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.map_string_RigidBody___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.map_string_RigidBody___bool__(self)

    def __len__(self):
        return _AnimatSimPy.map_string_RigidBody___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _AnimatSimPy.map_string_RigidBody___getitem__(self, key)

    def __delitem__(self, key):
        return _AnimatSimPy.map_string_RigidBody___delitem__(self, key)

    def has_key(self, key):
        return _AnimatSimPy.map_string_RigidBody_has_key(self, key)

    def keys(self):
        return _AnimatSimPy.map_string_RigidBody_keys(self)

    def values(self):
        return _AnimatSimPy.map_string_RigidBody_values(self)

    def items(self):
        return _AnimatSimPy.map_string_RigidBody_items(self)

    def __contains__(self, key):
        return _AnimatSimPy.map_string_RigidBody___contains__(self, key)

    def key_iterator(self):
        return _AnimatSimPy.map_string_RigidBody_key_iterator(self)

    def value_iterator(self):
        return _AnimatSimPy.map_string_RigidBody_value_iterator(self)

    def __setitem__(self, *args):
        return _AnimatSimPy.map_string_RigidBody___setitem__(self, *args)

    def asdict(self):
        return _AnimatSimPy.map_string_RigidBody_asdict(self)

    def __init__(self, *args):
        this = _AnimatSimPy.new_map_string_RigidBody(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _AnimatSimPy.map_string_RigidBody_empty(self)

    def size(self):
        return _AnimatSimPy.map_string_RigidBody_size(self)

    def clear(self):
        return _AnimatSimPy.map_string_RigidBody_clear(self)

    def swap(self, v):
        return _AnimatSimPy.map_string_RigidBody_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.map_string_RigidBody_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.map_string_RigidBody_begin(self)

    def end(self):
        return _AnimatSimPy.map_string_RigidBody_end(self)

    def rbegin(self):
        return _AnimatSimPy.map_string_RigidBody_rbegin(self)

    def rend(self):
        return _AnimatSimPy.map_string_RigidBody_rend(self)

    def count(self, x):
        return _AnimatSimPy.map_string_RigidBody_count(self, x)

    def erase(self, *args):
        return _AnimatSimPy.map_string_RigidBody_erase(self, *args)

    def find(self, x):
        return _AnimatSimPy.map_string_RigidBody_find(self, x)

    def lower_bound(self, x):
        return _AnimatSimPy.map_string_RigidBody_lower_bound(self, x)

    def upper_bound(self, x):
        return _AnimatSimPy.map_string_RigidBody_upper_bound(self, x)
    __swig_destroy__ = _AnimatSimPy.delete_map_string_RigidBody
    __del__ = lambda self: None
map_string_RigidBody_swigregister = _AnimatSimPy.map_string_RigidBody_swigregister
map_string_RigidBody_swigregister(map_string_RigidBody)

class map_string_Structure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_Structure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_Structure, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AnimatSimPy.map_string_Structure_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AnimatSimPy.map_string_Structure___nonzero__(self)

    def __bool__(self):
        return _AnimatSimPy.map_string_Structure___bool__(self)

    def __len__(self):
        return _AnimatSimPy.map_string_Structure___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _AnimatSimPy.map_string_Structure___getitem__(self, key)

    def __delitem__(self, key):
        return _AnimatSimPy.map_string_Structure___delitem__(self, key)

    def has_key(self, key):
        return _AnimatSimPy.map_string_Structure_has_key(self, key)

    def keys(self):
        return _AnimatSimPy.map_string_Structure_keys(self)

    def values(self):
        return _AnimatSimPy.map_string_Structure_values(self)

    def items(self):
        return _AnimatSimPy.map_string_Structure_items(self)

    def __contains__(self, key):
        return _AnimatSimPy.map_string_Structure___contains__(self, key)

    def key_iterator(self):
        return _AnimatSimPy.map_string_Structure_key_iterator(self)

    def value_iterator(self):
        return _AnimatSimPy.map_string_Structure_value_iterator(self)

    def __setitem__(self, *args):
        return _AnimatSimPy.map_string_Structure___setitem__(self, *args)

    def asdict(self):
        return _AnimatSimPy.map_string_Structure_asdict(self)

    def __init__(self, *args):
        this = _AnimatSimPy.new_map_string_Structure(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _AnimatSimPy.map_string_Structure_empty(self)

    def size(self):
        return _AnimatSimPy.map_string_Structure_size(self)

    def clear(self):
        return _AnimatSimPy.map_string_Structure_clear(self)

    def swap(self, v):
        return _AnimatSimPy.map_string_Structure_swap(self, v)

    def get_allocator(self):
        return _AnimatSimPy.map_string_Structure_get_allocator(self)

    def begin(self):
        return _AnimatSimPy.map_string_Structure_begin(self)

    def end(self):
        return _AnimatSimPy.map_string_Structure_end(self)

    def rbegin(self):
        return _AnimatSimPy.map_string_Structure_rbegin(self)

    def rend(self):
        return _AnimatSimPy.map_string_Structure_rend(self)

    def count(self, x):
        return _AnimatSimPy.map_string_Structure_count(self, x)

    def erase(self, *args):
        return _AnimatSimPy.map_string_Structure_erase(self, *args)

    def find(self, x):
        return _AnimatSimPy.map_string_Structure_find(self, x)

    def lower_bound(self, x):
        return _AnimatSimPy.map_string_Structure_lower_bound(self, x)

    def upper_bound(self, x):
        return _AnimatSimPy.map_string_Structure_upper_bound(self, x)
    __swig_destroy__ = _AnimatSimPy.delete_map_string_Structure
    __del__ = lambda self: None
map_string_Structure_swigregister = _AnimatSimPy.map_string_Structure_swigregister
map_string_Structure_swigregister(map_string_Structure)

class CStdPoint_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPoint_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPoint_int, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _AnimatSimPy.CStdPoint_int_x_set
    __swig_getmethods__["x"] = _AnimatSimPy.CStdPoint_int_x_get
    if _newclass:
        x = _swig_property(_AnimatSimPy.CStdPoint_int_x_get, _AnimatSimPy.CStdPoint_int_x_set)
    __swig_setmethods__["y"] = _AnimatSimPy.CStdPoint_int_y_set
    __swig_getmethods__["y"] = _AnimatSimPy.CStdPoint_int_y_get
    if _newclass:
        y = _swig_property(_AnimatSimPy.CStdPoint_int_y_get, _AnimatSimPy.CStdPoint_int_y_set)
    __swig_setmethods__["z"] = _AnimatSimPy.CStdPoint_int_z_set
    __swig_getmethods__["z"] = _AnimatSimPy.CStdPoint_int_z_get
    if _newclass:
        z = _swig_property(_AnimatSimPy.CStdPoint_int_z_get, _AnimatSimPy.CStdPoint_int_z_set)

    def __init__(self, *args):
        this = _AnimatSimPy.new_CStdPoint_int(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def Set(self, X, Y, Z):
        return _AnimatSimPy.CStdPoint_int_Set(self, X, Y, Z)

    def __eq__(self, oPoint):
        return _AnimatSimPy.CStdPoint_int___eq__(self, oPoint)

    def __ne__(self, oPoint):
        return _AnimatSimPy.CStdPoint_int___ne__(self, oPoint)

    def Equal(self, oPoint, fltTolerance):
        return _AnimatSimPy.CStdPoint_int_Equal(self, oPoint, fltTolerance)

    def dot(self, oPoint):
        return _AnimatSimPy.CStdPoint_int_dot(self, oPoint)

    def __iadd__(self, *args):
        return _AnimatSimPy.CStdPoint_int___iadd__(self, *args)

    def __isub__(self, *args):
        return _AnimatSimPy.CStdPoint_int___isub__(self, *args)

    def __imul__(self, fltVal):
        return _AnimatSimPy.CStdPoint_int___imul__(self, fltVal)

    def __idiv__(self, fltVal):
        return _AnimatSimPy.CStdPoint_int___idiv__(self, fltVal)

    def __add__(self, *args):
        return _AnimatSimPy.CStdPoint_int___add__(self, *args)

    def __sub__(self, *args):
        return _AnimatSimPy.CStdPoint_int___sub__(self, *args)

    def __mul__(self, *args):
        return _AnimatSimPy.CStdPoint_int___mul__(self, *args)

    def __div__(self, *args):
        return _AnimatSimPy.CStdPoint_int___div__(self, *args)

    def __xor__(self, vVal):
        return _AnimatSimPy.CStdPoint_int___xor__(self, vVal)

    def Magnitude(self):
        return _AnimatSimPy.CStdPoint_int_Magnitude(self)

    def Normalize(self):
        return _AnimatSimPy.CStdPoint_int_Normalize(self)

    def ClearNearZero(self, fltTolerance=1e-5):
        return _AnimatSimPy.CStdPoint_int_ClearNearZero(self, fltTolerance)
    __swig_destroy__ = _AnimatSimPy.delete_CStdPoint_int
    __del__ = lambda self: None
CStdPoint_int_swigregister = _AnimatSimPy.CStdPoint_int_swigregister
CStdPoint_int_swigregister(CStdPoint_int)

class CStdPoint_long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPoint_long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPoint_long, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _AnimatSimPy.CStdPoint_long_x_set
    __swig_getmethods__["x"] = _AnimatSimPy.CStdPoint_long_x_get
    if _newclass:
        x = _swig_property(_AnimatSimPy.CStdPoint_long_x_get, _AnimatSimPy.CStdPoint_long_x_set)
    __swig_setmethods__["y"] = _AnimatSimPy.CStdPoint_long_y_set
    __swig_getmethods__["y"] = _AnimatSimPy.CStdPoint_long_y_get
    if _newclass:
        y = _swig_property(_AnimatSimPy.CStdPoint_long_y_get, _AnimatSimPy.CStdPoint_long_y_set)
    __swig_setmethods__["z"] = _AnimatSimPy.CStdPoint_long_z_set
    __swig_getmethods__["z"] = _AnimatSimPy.CStdPoint_long_z_get
    if _newclass:
        z = _swig_property(_AnimatSimPy.CStdPoint_long_z_get, _AnimatSimPy.CStdPoint_long_z_set)

    def __init__(self, *args):
        this = _AnimatSimPy.new_CStdPoint_long(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def Set(self, X, Y, Z):
        return _AnimatSimPy.CStdPoint_long_Set(self, X, Y, Z)

    def __eq__(self, oPoint):
        return _AnimatSimPy.CStdPoint_long___eq__(self, oPoint)

    def __ne__(self, oPoint):
        return _AnimatSimPy.CStdPoint_long___ne__(self, oPoint)

    def Equal(self, oPoint, fltTolerance):
        return _AnimatSimPy.CStdPoint_long_Equal(self, oPoint, fltTolerance)

    def dot(self, oPoint):
        return _AnimatSimPy.CStdPoint_long_dot(self, oPoint)

    def __iadd__(self, *args):
        return _AnimatSimPy.CStdPoint_long___iadd__(self, *args)

    def __isub__(self, *args):
        return _AnimatSimPy.CStdPoint_long___isub__(self, *args)

    def __imul__(self, fltVal):
        return _AnimatSimPy.CStdPoint_long___imul__(self, fltVal)

    def __idiv__(self, fltVal):
        return _AnimatSimPy.CStdPoint_long___idiv__(self, fltVal)

    def __add__(self, *args):
        return _AnimatSimPy.CStdPoint_long___add__(self, *args)

    def __sub__(self, *args):
        return _AnimatSimPy.CStdPoint_long___sub__(self, *args)

    def __mul__(self, *args):
        return _AnimatSimPy.CStdPoint_long___mul__(self, *args)

    def __div__(self, *args):
        return _AnimatSimPy.CStdPoint_long___div__(self, *args)

    def __xor__(self, vVal):
        return _AnimatSimPy.CStdPoint_long___xor__(self, vVal)

    def Magnitude(self):
        return _AnimatSimPy.CStdPoint_long_Magnitude(self)

    def Normalize(self):
        return _AnimatSimPy.CStdPoint_long_Normalize(self)

    def ClearNearZero(self, fltTolerance=1e-5):
        return _AnimatSimPy.CStdPoint_long_ClearNearZero(self, fltTolerance)
    __swig_destroy__ = _AnimatSimPy.delete_CStdPoint_long
    __del__ = lambda self: None
CStdPoint_long_swigregister = _AnimatSimPy.CStdPoint_long_swigregister
CStdPoint_long_swigregister(CStdPoint_long)

class CStdPoint_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPoint_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPoint_float, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _AnimatSimPy.CStdPoint_float_x_set
    __swig_getmethods__["x"] = _AnimatSimPy.CStdPoint_float_x_get
    if _newclass:
        x = _swig_property(_AnimatSimPy.CStdPoint_float_x_get, _AnimatSimPy.CStdPoint_float_x_set)
    __swig_setmethods__["y"] = _AnimatSimPy.CStdPoint_float_y_set
    __swig_getmethods__["y"] = _AnimatSimPy.CStdPoint_float_y_get
    if _newclass:
        y = _swig_property(_AnimatSimPy.CStdPoint_float_y_get, _AnimatSimPy.CStdPoint_float_y_set)
    __swig_setmethods__["z"] = _AnimatSimPy.CStdPoint_float_z_set
    __swig_getmethods__["z"] = _AnimatSimPy.CStdPoint_float_z_get
    if _newclass:
        z = _swig_property(_AnimatSimPy.CStdPoint_float_z_get, _AnimatSimPy.CStdPoint_float_z_set)

    def __init__(self, *args):
        this = _AnimatSimPy.new_CStdPoint_float(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def Set(self, X, Y, Z):
        return _AnimatSimPy.CStdPoint_float_Set(self, X, Y, Z)

    def __eq__(self, oPoint):
        return _AnimatSimPy.CStdPoint_float___eq__(self, oPoint)

    def __ne__(self, oPoint):
        return _AnimatSimPy.CStdPoint_float___ne__(self, oPoint)

    def Equal(self, oPoint, fltTolerance):
        return _AnimatSimPy.CStdPoint_float_Equal(self, oPoint, fltTolerance)

    def dot(self, oPoint):
        return _AnimatSimPy.CStdPoint_float_dot(self, oPoint)

    def __iadd__(self, *args):
        return _AnimatSimPy.CStdPoint_float___iadd__(self, *args)

    def __isub__(self, *args):
        return _AnimatSimPy.CStdPoint_float___isub__(self, *args)

    def __imul__(self, fltVal):
        return _AnimatSimPy.CStdPoint_float___imul__(self, fltVal)

    def __idiv__(self, fltVal):
        return _AnimatSimPy.CStdPoint_float___idiv__(self, fltVal)

    def __add__(self, *args):
        return _AnimatSimPy.CStdPoint_float___add__(self, *args)

    def __sub__(self, *args):
        return _AnimatSimPy.CStdPoint_float___sub__(self, *args)

    def __mul__(self, *args):
        return _AnimatSimPy.CStdPoint_float___mul__(self, *args)

    def __div__(self, *args):
        return _AnimatSimPy.CStdPoint_float___div__(self, *args)

    def __xor__(self, vVal):
        return _AnimatSimPy.CStdPoint_float___xor__(self, vVal)

    def Magnitude(self):
        return _AnimatSimPy.CStdPoint_float_Magnitude(self)

    def Normalize(self):
        return _AnimatSimPy.CStdPoint_float_Normalize(self)

    def ClearNearZero(self, fltTolerance=1e-5):
        return _AnimatSimPy.CStdPoint_float_ClearNearZero(self, fltTolerance)
    __swig_destroy__ = _AnimatSimPy.delete_CStdPoint_float
    __del__ = lambda self: None
CStdPoint_float_swigregister = _AnimatSimPy.CStdPoint_float_swigregister
CStdPoint_float_swigregister(CStdPoint_float)

class CStdPoint_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPoint_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPoint_double, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _AnimatSimPy.CStdPoint_double_x_set
    __swig_getmethods__["x"] = _AnimatSimPy.CStdPoint_double_x_get
    if _newclass:
        x = _swig_property(_AnimatSimPy.CStdPoint_double_x_get, _AnimatSimPy.CStdPoint_double_x_set)
    __swig_setmethods__["y"] = _AnimatSimPy.CStdPoint_double_y_set
    __swig_getmethods__["y"] = _AnimatSimPy.CStdPoint_double_y_get
    if _newclass:
        y = _swig_property(_AnimatSimPy.CStdPoint_double_y_get, _AnimatSimPy.CStdPoint_double_y_set)
    __swig_setmethods__["z"] = _AnimatSimPy.CStdPoint_double_z_set
    __swig_getmethods__["z"] = _AnimatSimPy.CStdPoint_double_z_get
    if _newclass:
        z = _swig_property(_AnimatSimPy.CStdPoint_double_z_get, _AnimatSimPy.CStdPoint_double_z_set)

    def __init__(self, *args):
        this = _AnimatSimPy.new_CStdPoint_double(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def Set(self, X, Y, Z):
        return _AnimatSimPy.CStdPoint_double_Set(self, X, Y, Z)

    def __eq__(self, oPoint):
        return _AnimatSimPy.CStdPoint_double___eq__(self, oPoint)

    def __ne__(self, oPoint):
        return _AnimatSimPy.CStdPoint_double___ne__(self, oPoint)

    def Equal(self, oPoint, fltTolerance):
        return _AnimatSimPy.CStdPoint_double_Equal(self, oPoint, fltTolerance)

    def dot(self, oPoint):
        return _AnimatSimPy.CStdPoint_double_dot(self, oPoint)

    def __iadd__(self, *args):
        return _AnimatSimPy.CStdPoint_double___iadd__(self, *args)

    def __isub__(self, *args):
        return _AnimatSimPy.CStdPoint_double___isub__(self, *args)

    def __imul__(self, fltVal):
        return _AnimatSimPy.CStdPoint_double___imul__(self, fltVal)

    def __idiv__(self, fltVal):
        return _AnimatSimPy.CStdPoint_double___idiv__(self, fltVal)

    def __add__(self, *args):
        return _AnimatSimPy.CStdPoint_double___add__(self, *args)

    def __sub__(self, *args):
        return _AnimatSimPy.CStdPoint_double___sub__(self, *args)

    def __mul__(self, *args):
        return _AnimatSimPy.CStdPoint_double___mul__(self, *args)

    def __div__(self, *args):
        return _AnimatSimPy.CStdPoint_double___div__(self, *args)

    def __xor__(self, vVal):
        return _AnimatSimPy.CStdPoint_double___xor__(self, vVal)

    def Magnitude(self):
        return _AnimatSimPy.CStdPoint_double_Magnitude(self)

    def Normalize(self):
        return _AnimatSimPy.CStdPoint_double_Normalize(self)

    def ClearNearZero(self, fltTolerance=1e-5):
        return _AnimatSimPy.CStdPoint_double_ClearNearZero(self, fltTolerance)
    __swig_destroy__ = _AnimatSimPy.delete_CStdPoint_double
    __del__ = lambda self: None
CStdPoint_double_swigregister = _AnimatSimPy.CStdPoint_double_swigregister
CStdPoint_double_swigregister(CStdPoint_double)

class CStdArray_int(vector_int):
    __swig_setmethods__ = {}
    for _s in [vector_int]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_int, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_int]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_int, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_int
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_int_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_int_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_int_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_int_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_int_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_int_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_int_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_int()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_int_swigregister = _AnimatSimPy.CStdArray_int_swigregister
CStdArray_int_swigregister(CStdArray_int)

class CStdArray_long(vector_long):
    __swig_setmethods__ = {}
    for _s in [vector_long]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_long, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_long]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_long, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_long
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_long_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_long_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_long_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_long_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_long_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_long_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_long_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_long()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_long_swigregister = _AnimatSimPy.CStdArray_long_swigregister
CStdArray_long_swigregister(CStdArray_long)

class CStdArray_float(vector_float):
    __swig_setmethods__ = {}
    for _s in [vector_float]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_float, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_float]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_float, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_float
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_float_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_float_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_float_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_float_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_float_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_float_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_float_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_float()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_float_swigregister = _AnimatSimPy.CStdArray_float_swigregister
CStdArray_float_swigregister(CStdArray_float)

class CStdArray_double(vector_double):
    __swig_setmethods__ = {}
    for _s in [vector_double]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_double, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_double]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_double, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_double
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_double_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_double_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_double_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_double_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_double_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_double_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_double_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_double()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_double_swigregister = _AnimatSimPy.CStdArray_double_swigregister
CStdArray_double_swigregister(CStdArray_double)

class CStdArray_string(vector_string):
    __swig_setmethods__ = {}
    for _s in [vector_string]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_string, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_string]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_string, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_string
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_string_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_string_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_string_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_string_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_string_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_string_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_string_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_string()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_string_swigregister = _AnimatSimPy.CStdArray_string_swigregister
CStdArray_string_swigregister(CStdArray_string)

class CStdArray_ActivatedItem(vector_ActivatedItemPtr):
    __swig_setmethods__ = {}
    for _s in [vector_ActivatedItemPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_ActivatedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_ActivatedItemPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_ActivatedItem, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_ActivatedItem
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_ActivatedItem_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_ActivatedItem_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_ActivatedItem_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_ActivatedItem_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_ActivatedItem_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_ActivatedItem_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_ActivatedItem_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_ActivatedItem()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_ActivatedItem_swigregister = _AnimatSimPy.CStdArray_ActivatedItem_swigregister
CStdArray_ActivatedItem_swigregister(CStdArray_ActivatedItem)

class CStdArray_RigidBody(vector_RigidBodyPtr):
    __swig_setmethods__ = {}
    for _s in [vector_RigidBodyPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_RigidBody, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_RigidBodyPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_RigidBody, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_RigidBody
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_RigidBody_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_RigidBody_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_RigidBody_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_RigidBody_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_RigidBody_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_RigidBody_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_RigidBody_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_RigidBody()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_RigidBody_swigregister = _AnimatSimPy.CStdArray_RigidBody_swigregister
CStdArray_RigidBody_swigregister(CStdArray_RigidBody)

class CStdArray_BodyPart(vector_BodyPartPtr):
    __swig_setmethods__ = {}
    for _s in [vector_BodyPartPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_BodyPart, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_BodyPartPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_BodyPart, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_BodyPart
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_BodyPart_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_BodyPart_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_BodyPart_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_BodyPart_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_BodyPart_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_BodyPart_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_BodyPart_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_BodyPart()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_BodyPart_swigregister = _AnimatSimPy.CStdArray_BodyPart_swigregister
CStdArray_BodyPart_swigregister(CStdArray_BodyPart)

class CStdArray_RobotPartInterface(vector_RobotPartInterfacePtr):
    __swig_setmethods__ = {}
    for _s in [vector_RobotPartInterfacePtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_RobotPartInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_RobotPartInterfacePtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_RobotPartInterface, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_RobotPartInterface
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_RobotPartInterface_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_RobotPartInterface_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_RobotPartInterface_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_RobotPartInterface_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_RobotPartInterface_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_RobotPartInterface_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_RobotPartInterface_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_RobotPartInterface()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_RobotPartInterface_swigregister = _AnimatSimPy.CStdArray_RobotPartInterface_swigregister
CStdArray_RobotPartInterface_swigregister(CStdArray_RobotPartInterface)

class CStdArray_Attachment(vector_AttachmentPtr):
    __swig_setmethods__ = {}
    for _s in [vector_AttachmentPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_Attachment, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_AttachmentPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_Attachment, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_Attachment
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_Attachment_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_Attachment_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_Attachment_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_Attachment_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_Attachment_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_Attachment_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_Attachment_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_Attachment()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_Attachment_swigregister = _AnimatSimPy.CStdArray_Attachment_swigregister
CStdArray_Attachment_swigregister(CStdArray_Attachment)

class CStdArray_Adapter(vector_AdapterPtr):
    __swig_setmethods__ = {}
    for _s in [vector_AdapterPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_Adapter, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_AdapterPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_Adapter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_Adapter
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_Adapter_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_Adapter_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_Adapter_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_Adapter_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_Adapter_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_Adapter_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_Adapter_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_Adapter()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_Adapter_swigregister = _AnimatSimPy.CStdArray_Adapter_swigregister
CStdArray_Adapter_swigregister(CStdArray_Adapter)

class CStdArray_KeyFrame(vector_KeyFramePtr):
    __swig_setmethods__ = {}
    for _s in [vector_KeyFramePtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_KeyFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_KeyFramePtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_KeyFrame, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_KeyFrame
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_KeyFrame_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_KeyFrame_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_KeyFrame_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_KeyFrame_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_KeyFrame_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_KeyFrame_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_KeyFrame_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_KeyFrame()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_KeyFrame_swigregister = _AnimatSimPy.CStdArray_KeyFrame_swigregister
CStdArray_KeyFrame_swigregister(CStdArray_KeyFrame)

class CStdArray_ModuleThreadProcessor(vector_ModuleThreadProcessorPtr):
    __swig_setmethods__ = {}
    for _s in [vector_ModuleThreadProcessorPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdArray_ModuleThreadProcessor, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_ModuleThreadProcessorPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdArray_ModuleThreadProcessor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdArray_ModuleThreadProcessor
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdArray_ModuleThreadProcessor_Add(self, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdArray_ModuleThreadProcessor_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdArray_ModuleThreadProcessor_RemoveAt(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdArray_ModuleThreadProcessor_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdArray_ModuleThreadProcessor_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdArray_ModuleThreadProcessor_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdArray_ModuleThreadProcessor_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdArray_ModuleThreadProcessor()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdArray_ModuleThreadProcessor_swigregister = _AnimatSimPy.CStdArray_ModuleThreadProcessor_swigregister
CStdArray_ModuleThreadProcessor_swigregister(CStdArray_ModuleThreadProcessor)

class CStdPtrArray_CStdVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_CStdVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_CStdVariable, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_CStdVariable
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_CStdVariable_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_CStdVariable_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_CStdVariable_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_CStdVariable_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_CStdVariable_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_CStdVariable_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_CStdVariable_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_CStdVariable_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_CStdVariable_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_CStdVariable()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_CStdVariable_swigregister = _AnimatSimPy.CStdPtrArray_CStdVariable_swigregister
CStdPtrArray_CStdVariable_swigregister(CStdPtrArray_CStdVariable)

class CStdPtrArray_TypeProperty(vector_TypePropertyPtr):
    __swig_setmethods__ = {}
    for _s in [vector_TypePropertyPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_TypeProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_TypePropertyPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_TypeProperty, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_TypeProperty
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_TypeProperty_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_TypeProperty_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_TypeProperty_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_TypeProperty_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_TypeProperty_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_TypeProperty_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_TypeProperty_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_TypeProperty_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_TypeProperty_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_TypeProperty()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_TypeProperty_swigregister = _AnimatSimPy.CStdPtrArray_TypeProperty_swigregister
CStdPtrArray_TypeProperty_swigregister(CStdPtrArray_TypeProperty)

class CStdPtrArray_ReceptiveFieldPair(vector_ReceptiveFieldPairPtr):
    __swig_setmethods__ = {}
    for _s in [vector_ReceptiveFieldPairPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_ReceptiveFieldPair, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_ReceptiveFieldPairPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_ReceptiveFieldPair, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_ReceptiveFieldPair
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_ReceptiveFieldPair_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_ReceptiveFieldPair_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_ReceptiveFieldPair_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_ReceptiveFieldPair_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_ReceptiveFieldPair_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_ReceptiveFieldPair_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_ReceptiveFieldPair_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_ReceptiveFieldPair_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_ReceptiveFieldPair_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_ReceptiveFieldPair()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_ReceptiveFieldPair_swigregister = _AnimatSimPy.CStdPtrArray_ReceptiveFieldPair_swigregister
CStdPtrArray_ReceptiveFieldPair_swigregister(CStdPtrArray_ReceptiveFieldPair)

class CStdPtrArray_ReceptiveField(vector_ReceptiveFieldPtr):
    __swig_setmethods__ = {}
    for _s in [vector_ReceptiveFieldPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_ReceptiveField, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_ReceptiveFieldPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_ReceptiveField, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_ReceptiveField
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_ReceptiveField_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_ReceptiveField_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_ReceptiveField_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_ReceptiveField_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_ReceptiveField_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_ReceptiveField_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_ReceptiveField_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_ReceptiveField_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_ReceptiveField_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_ReceptiveField()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_ReceptiveField_swigregister = _AnimatSimPy.CStdPtrArray_ReceptiveField_swigregister
CStdPtrArray_ReceptiveField_swigregister(CStdPtrArray_ReceptiveField)

class CStdPtrArray_DataColumn(vector_DataColumnPtr):
    __swig_setmethods__ = {}
    for _s in [vector_DataColumnPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_DataColumn, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_DataColumnPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_DataColumn, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_DataColumn
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_DataColumn_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_DataColumn_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_DataColumn_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_DataColumn_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_DataColumn_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_DataColumn_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_DataColumn_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_DataColumn_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_DataColumn_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_DataColumn()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_DataColumn_swigregister = _AnimatSimPy.CStdPtrArray_DataColumn_swigregister
CStdPtrArray_DataColumn_swigregister(CStdPtrArray_DataColumn)

class CStdPtrArray_HudItem(vector_HudItemPtr):
    __swig_setmethods__ = {}
    for _s in [vector_HudItemPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_HudItem, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_HudItemPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_HudItem, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_HudItem
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_HudItem_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_HudItem_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_HudItem_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_HudItem_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_HudItem_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_HudItem_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_HudItem_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_HudItem_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_HudItem_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_HudItem()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_HudItem_swigregister = _AnimatSimPy.CStdPtrArray_HudItem_swigregister
CStdPtrArray_HudItem_swigregister(CStdPtrArray_HudItem)

class CStdPtrArray_Light(vector_LightPtr):
    __swig_setmethods__ = {}
    for _s in [vector_LightPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_Light, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_LightPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_Light, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_Light
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_Light_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_Light_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_Light_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_Light_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_Light_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_Light_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_Light_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_Light_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_Light_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_Light()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_Light_swigregister = _AnimatSimPy.CStdPtrArray_Light_swigregister
CStdPtrArray_Light_swigregister(CStdPtrArray_Light)

class CStdPtrArray_MaterialType(vector_MaterialTypePtr):
    __swig_setmethods__ = {}
    for _s in [vector_MaterialTypePtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_MaterialType, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_MaterialTypePtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_MaterialType, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_MaterialType
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_MaterialType_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_MaterialType_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_MaterialType_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_MaterialType_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_MaterialType_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_MaterialType_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_MaterialType_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_MaterialType_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_MaterialType_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_MaterialType()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_MaterialType_swigregister = _AnimatSimPy.CStdPtrArray_MaterialType_swigregister
CStdPtrArray_MaterialType_swigregister(CStdPtrArray_MaterialType)

class CStdPtrArray_Adapter(vector_AdapterPtr):
    __swig_setmethods__ = {}
    for _s in [vector_AdapterPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_Adapter, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_AdapterPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_Adapter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_Adapter
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_Adapter_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_Adapter_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_Adapter_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_Adapter_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_Adapter_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_Adapter_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_Adapter_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_Adapter_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_Adapter_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_Adapter()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_Adapter_swigregister = _AnimatSimPy.CStdPtrArray_Adapter_swigregister
CStdPtrArray_Adapter_swigregister(CStdPtrArray_Adapter)

class CStdPtrArray_RigidBody(vector_RigidBodyPtr):
    __swig_setmethods__ = {}
    for _s in [vector_RigidBodyPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_RigidBody, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_RigidBodyPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_RigidBody, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_RigidBody
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_RigidBody_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_RigidBody_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_RigidBody_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_RigidBody_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_RigidBody_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_RigidBody_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_RigidBody_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_RigidBody_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_RigidBody_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_RigidBody()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_RigidBody_swigregister = _AnimatSimPy.CStdPtrArray_RigidBody_swigregister
CStdPtrArray_RigidBody_swigregister(CStdPtrArray_RigidBody)

class CStdPtrArray_RobotIOControl(vector_RobotIOControlPtr):
    __swig_setmethods__ = {}
    for _s in [vector_RobotIOControlPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_RobotIOControl, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_RobotIOControlPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_RobotIOControl, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_RobotIOControl
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_RobotIOControl_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_RobotIOControl_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_RobotIOControl_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_RobotIOControl_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_RobotIOControl_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_RobotIOControl_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_RobotIOControl_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_RobotIOControl_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_RobotIOControl_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_RobotIOControl()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_RobotIOControl_swigregister = _AnimatSimPy.CStdPtrArray_RobotIOControl_swigregister
CStdPtrArray_RobotIOControl_swigregister(CStdPtrArray_RobotIOControl)

class CStdPtrArray_RobotPartInterface(vector_RobotPartInterfacePtr):
    __swig_setmethods__ = {}
    for _s in [vector_RobotPartInterfacePtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_RobotPartInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_RobotPartInterfacePtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_RobotPartInterface, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_RobotPartInterface
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_RobotPartInterface_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_RobotPartInterface_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_RobotPartInterface_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_RobotPartInterface_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_RobotPartInterface_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_RobotPartInterface_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_RobotPartInterface_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_RobotPartInterface_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_RobotPartInterface_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_RobotPartInterface()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_RobotPartInterface_swigregister = _AnimatSimPy.CStdPtrArray_RobotPartInterface_swigregister
CStdPtrArray_RobotPartInterface_swigregister(CStdPtrArray_RobotPartInterface)

class CStdPtrArray_SimulationWindow(vector_SimulationWindowPtr):
    __swig_setmethods__ = {}
    for _s in [vector_SimulationWindowPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_SimulationWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_SimulationWindowPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_SimulationWindow, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_SimulationWindow
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_SimulationWindow_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_SimulationWindow_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_SimulationWindow_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_SimulationWindow_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_SimulationWindow_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_SimulationWindow_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_SimulationWindow_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_SimulationWindow_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_SimulationWindow_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_SimulationWindow()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_SimulationWindow_swigregister = _AnimatSimPy.CStdPtrArray_SimulationWindow_swigregister
CStdPtrArray_SimulationWindow_swigregister(CStdPtrArray_SimulationWindow)

class CStdPtrArray_CollisionPair(vector_CollisionPairPtr):
    __swig_setmethods__ = {}
    for _s in [vector_CollisionPairPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_CollisionPair, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_CollisionPairPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_CollisionPair, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_CollisionPair
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_CollisionPair_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_CollisionPair_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_CollisionPair_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_CollisionPair_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_CollisionPair_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_CollisionPair_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_CollisionPair_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_CollisionPair_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_CollisionPair_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_CollisionPair()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_CollisionPair_swigregister = _AnimatSimPy.CStdPtrArray_CollisionPair_swigregister
CStdPtrArray_CollisionPair_swigregister(CStdPtrArray_CollisionPair)

class CStdPtrArray_SimulationThread(vector_SimulationThread):
    __swig_setmethods__ = {}
    for _s in [vector_SimulationThread]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_SimulationThread, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_SimulationThread]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_SimulationThread, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_SimulationThread
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_SimulationThread_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_SimulationThread_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_SimulationThread_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_SimulationThread_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_SimulationThread_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_SimulationThread_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_SimulationThread_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_SimulationThread_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_SimulationThread_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_SimulationThread()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_SimulationThread_swigregister = _AnimatSimPy.CStdPtrArray_SimulationThread_swigregister
CStdPtrArray_SimulationThread_swigregister(CStdPtrArray_SimulationThread)

class CStdPtrArray_Synapse(vector_Synapse):
    __swig_setmethods__ = {}
    for _s in [vector_Synapse]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_Synapse, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_Synapse]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_Synapse, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_Synapse
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_Synapse_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_Synapse_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_Synapse_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_Synapse_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_Synapse_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_Synapse_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_Synapse_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_Synapse_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_Synapse_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_Synapse()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_Synapse_swigregister = _AnimatSimPy.CStdPtrArray_Synapse_swigregister
CStdPtrArray_Synapse_swigregister(CStdPtrArray_Synapse)

class CStdPtrArray_Neuron(vector_Neuron):
    __swig_setmethods__ = {}
    for _s in [vector_Neuron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrArray_Neuron, name, value)
    __swig_getmethods__ = {}
    for _s in [vector_Neuron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrArray_Neuron, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrArray_Neuron
    __del__ = lambda self: None

    def Add(self, lpVal):
        return _AnimatSimPy.CStdPtrArray_Neuron_Add(self, lpVal)

    def clear(self):
        return _AnimatSimPy.CStdPtrArray_Neuron_clear(self)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrArray_Neuron_RemoveAll(self)

    def RemoveAt(self, *args):
        return _AnimatSimPy.CStdPtrArray_Neuron_RemoveAt(self, *args)

    def erase(self, *args):
        return _AnimatSimPy.CStdPtrArray_Neuron_erase(self, *args)

    def SetSize(self, lSize):
        return _AnimatSimPy.CStdPtrArray_Neuron_SetSize(self, lSize)

    def InsertAt(self, iPos, lpVal):
        return _AnimatSimPy.CStdPtrArray_Neuron_InsertAt(self, iPos, lpVal)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrArray_Neuron_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrArray_Neuron_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrArray_Neuron()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrArray_Neuron_swigregister = _AnimatSimPy.CStdPtrArray_Neuron_swigregister
CStdPtrArray_Neuron_swigregister(CStdPtrArray_Neuron)

class CStdCircularArray_float(CStdArray_float):
    __swig_setmethods__ = {}
    for _s in [CStdArray_float]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdCircularArray_float, name, value)
    __swig_getmethods__ = {}
    for _s in [CStdArray_float]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdCircularArray_float, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_CStdCircularArray_float()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CStdCircularArray_float
    __del__ = lambda self: None

    def CurrentPos(self):
        return _AnimatSimPy.CStdCircularArray_float_CurrentPos(self)

    def GetHead(self):
        return _AnimatSimPy.CStdCircularArray_float_GetHead(self)

    def AddEnd(self, newNum):
        return _AnimatSimPy.CStdCircularArray_float_AddEnd(self, newNum)

    def GetAt(self, iPos):
        return _AnimatSimPy.CStdCircularArray_float_GetAt(self, iPos)

    def Average(self):
        return _AnimatSimPy.CStdCircularArray_float_Average(self)
CStdCircularArray_float_swigregister = _AnimatSimPy.CStdCircularArray_float_swigregister
CStdCircularArray_float_swigregister(CStdCircularArray_float)

class CStdStack_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdStack_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdStack_double, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdStack_double
    __del__ = lambda self: None

    def RemoveAll(self):
        return _AnimatSimPy.CStdStack_double_RemoveAll(self)

    def Clear(self):
        return _AnimatSimPy.CStdStack_double_Clear(self)

    def clear(self):
        return _AnimatSimPy.CStdStack_double_clear(self)

    def Push(self, lpElement):
        return _AnimatSimPy.CStdStack_double_Push(self, lpElement)

    def Pop(self):
        return _AnimatSimPy.CStdStack_double_Pop(self)

    def Top(self):
        return _AnimatSimPy.CStdStack_double_Top(self)

    def IsEmpty(self):
        return _AnimatSimPy.CStdStack_double_IsEmpty(self)

    def GetSize(self):
        return _AnimatSimPy.CStdStack_double_GetSize(self)

    def Examine(self):
        return _AnimatSimPy.CStdStack_double_Examine(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdStack_double()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdStack_double_swigregister = _AnimatSimPy.CStdStack_double_swigregister
CStdStack_double_swigregister(CStdStack_double)

class CStdMap_string_DataColumn(map_string_DataColumn):
    __swig_setmethods__ = {}
    for _s in [map_string_DataColumn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdMap_string_DataColumn, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_DataColumn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdMap_string_DataColumn, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdMap_string_DataColumn
    __del__ = lambda self: None

    def Add(self, oKey, oVal):
        return _AnimatSimPy.CStdMap_string_DataColumn_Add(self, oKey, oVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdMap_string_DataColumn_RemoveAll(self)

    def RemoveAt(self, it):
        return _AnimatSimPy.CStdMap_string_DataColumn_RemoveAt(self, it)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdMap_string_DataColumn_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdMap_string_DataColumn_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdMap_string_DataColumn_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdMap_string_DataColumn()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdMap_string_DataColumn_swigregister = _AnimatSimPy.CStdMap_string_DataColumn_swigregister
CStdMap_string_DataColumn_swigregister(CStdMap_string_DataColumn)

class CStdMap_string_Odor(map_string_Odor):
    __swig_setmethods__ = {}
    for _s in [map_string_Odor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdMap_string_Odor, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_Odor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdMap_string_Odor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdMap_string_Odor
    __del__ = lambda self: None

    def Add(self, oKey, oVal):
        return _AnimatSimPy.CStdMap_string_Odor_Add(self, oKey, oVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdMap_string_Odor_RemoveAll(self)

    def RemoveAt(self, it):
        return _AnimatSimPy.CStdMap_string_Odor_RemoveAt(self, it)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdMap_string_Odor_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdMap_string_Odor_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdMap_string_Odor_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdMap_string_Odor()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdMap_string_Odor_swigregister = _AnimatSimPy.CStdMap_string_Odor_swigregister
CStdMap_string_Odor_swigregister(CStdMap_string_Odor)

class CStdMap_string_Structure(map_string_Structure):
    __swig_setmethods__ = {}
    for _s in [map_string_Structure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdMap_string_Structure, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_Structure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdMap_string_Structure, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdMap_string_Structure
    __del__ = lambda self: None

    def Add(self, oKey, oVal):
        return _AnimatSimPy.CStdMap_string_Structure_Add(self, oKey, oVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdMap_string_Structure_RemoveAll(self)

    def RemoveAt(self, it):
        return _AnimatSimPy.CStdMap_string_Structure_RemoveAt(self, it)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdMap_string_Structure_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdMap_string_Structure_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdMap_string_Structure_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdMap_string_Structure()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdMap_string_Structure_swigregister = _AnimatSimPy.CStdMap_string_Structure_swigregister
CStdMap_string_Structure_swigregister(CStdMap_string_Structure)

class CStdMap_string_IStdClassFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdMap_string_IStdClassFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdMap_string_IStdClassFactory, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdMap_string_IStdClassFactory
    __del__ = lambda self: None

    def Add(self, oKey, oVal):
        return _AnimatSimPy.CStdMap_string_IStdClassFactory_Add(self, oKey, oVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdMap_string_IStdClassFactory_RemoveAll(self)

    def RemoveAt(self, it):
        return _AnimatSimPy.CStdMap_string_IStdClassFactory_RemoveAt(self, it)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdMap_string_IStdClassFactory_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdMap_string_IStdClassFactory_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdMap_string_IStdClassFactory_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdMap_string_IStdClassFactory()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdMap_string_IStdClassFactory_swigregister = _AnimatSimPy.CStdMap_string_IStdClassFactory_swigregister
CStdMap_string_IStdClassFactory_swigregister(CStdMap_string_IStdClassFactory)

class CStdMap_string_AnimatBase(map_string_AnimatBase):
    __swig_setmethods__ = {}
    for _s in [map_string_AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdMap_string_AnimatBase, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdMap_string_AnimatBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdMap_string_AnimatBase
    __del__ = lambda self: None

    def Add(self, oKey, oVal):
        return _AnimatSimPy.CStdMap_string_AnimatBase_Add(self, oKey, oVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdMap_string_AnimatBase_RemoveAll(self)

    def RemoveAt(self, it):
        return _AnimatSimPy.CStdMap_string_AnimatBase_RemoveAt(self, it)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdMap_string_AnimatBase_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdMap_string_AnimatBase_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdMap_string_AnimatBase_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdMap_string_AnimatBase()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdMap_string_AnimatBase_swigregister = _AnimatSimPy.CStdMap_string_AnimatBase_swigregister
CStdMap_string_AnimatBase_swigregister(CStdMap_string_AnimatBase)

class CStdMap_string_RigidBody(map_string_RigidBody):
    __swig_setmethods__ = {}
    for _s in [map_string_RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdMap_string_RigidBody, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdMap_string_RigidBody, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdMap_string_RigidBody
    __del__ = lambda self: None

    def Add(self, oKey, oVal):
        return _AnimatSimPy.CStdMap_string_RigidBody_Add(self, oKey, oVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdMap_string_RigidBody_RemoveAll(self)

    def RemoveAt(self, it):
        return _AnimatSimPy.CStdMap_string_RigidBody_RemoveAt(self, it)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdMap_string_RigidBody_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdMap_string_RigidBody_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdMap_string_RigidBody_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdMap_string_RigidBody()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdMap_string_RigidBody_swigregister = _AnimatSimPy.CStdMap_string_RigidBody_swigregister
CStdMap_string_RigidBody_swigregister(CStdMap_string_RigidBody)

class CStdMap_string_Joint(map_string_Joint):
    __swig_setmethods__ = {}
    for _s in [map_string_Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdMap_string_Joint, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdMap_string_Joint, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdMap_string_Joint
    __del__ = lambda self: None

    def Add(self, oKey, oVal):
        return _AnimatSimPy.CStdMap_string_Joint_Add(self, oKey, oVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdMap_string_Joint_RemoveAll(self)

    def RemoveAt(self, it):
        return _AnimatSimPy.CStdMap_string_Joint_RemoveAt(self, it)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdMap_string_Joint_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdMap_string_Joint_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdMap_string_Joint_Clear(self)

    def __init__(self):
        this = _AnimatSimPy.new_CStdMap_string_Joint()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdMap_string_Joint_swigregister = _AnimatSimPy.CStdMap_string_Joint_swigregister
CStdMap_string_Joint_swigregister(CStdMap_string_Joint)

class CStdPtrMap_string_ActivatedItem(map_string_ActivatedItem):
    __swig_setmethods__ = {}
    for _s in [map_string_ActivatedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrMap_string_ActivatedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_ActivatedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrMap_string_ActivatedItem, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrMap_string_ActivatedItem
    __del__ = lambda self: None

    def Add(self, oKey, lpVal):
        return _AnimatSimPy.CStdPtrMap_string_ActivatedItem_Add(self, oKey, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrMap_string_ActivatedItem_RemoveAll(self)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_ActivatedItem_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrMap_string_ActivatedItem_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrMap_string_ActivatedItem_Clear(self)

    def clear(self):
        return _AnimatSimPy.CStdPtrMap_string_ActivatedItem_clear(self)

    def erase(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_ActivatedItem_erase(self, oKey)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrMap_string_ActivatedItem()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrMap_string_ActivatedItem_swigregister = _AnimatSimPy.CStdPtrMap_string_ActivatedItem_swigregister
CStdPtrMap_string_ActivatedItem_swigregister(CStdPtrMap_string_ActivatedItem)

class CStdPtrMap_string_NeuralModule(map_string_NeuralModule):
    __swig_setmethods__ = {}
    for _s in [map_string_NeuralModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrMap_string_NeuralModule, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_NeuralModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrMap_string_NeuralModule, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrMap_string_NeuralModule
    __del__ = lambda self: None

    def Add(self, oKey, lpVal):
        return _AnimatSimPy.CStdPtrMap_string_NeuralModule_Add(self, oKey, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrMap_string_NeuralModule_RemoveAll(self)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_NeuralModule_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrMap_string_NeuralModule_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrMap_string_NeuralModule_Clear(self)

    def clear(self):
        return _AnimatSimPy.CStdPtrMap_string_NeuralModule_clear(self)

    def erase(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_NeuralModule_erase(self, oKey)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrMap_string_NeuralModule()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrMap_string_NeuralModule_swigregister = _AnimatSimPy.CStdPtrMap_string_NeuralModule_swigregister
CStdPtrMap_string_NeuralModule_swigregister(CStdPtrMap_string_NeuralModule)

class CStdPtrMap_string_Odor(map_string_Odor):
    __swig_setmethods__ = {}
    for _s in [map_string_Odor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrMap_string_Odor, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_Odor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrMap_string_Odor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrMap_string_Odor
    __del__ = lambda self: None

    def Add(self, oKey, lpVal):
        return _AnimatSimPy.CStdPtrMap_string_Odor_Add(self, oKey, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrMap_string_Odor_RemoveAll(self)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_Odor_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrMap_string_Odor_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrMap_string_Odor_Clear(self)

    def clear(self):
        return _AnimatSimPy.CStdPtrMap_string_Odor_clear(self)

    def erase(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_Odor_erase(self, oKey)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrMap_string_Odor()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrMap_string_Odor_swigregister = _AnimatSimPy.CStdPtrMap_string_Odor_swigregister
CStdPtrMap_string_Odor_swigregister(CStdPtrMap_string_Odor)

class CStdPtrMap_string_OdorType(map_string_OdorType):
    __swig_setmethods__ = {}
    for _s in [map_string_OdorType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrMap_string_OdorType, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_OdorType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrMap_string_OdorType, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrMap_string_OdorType
    __del__ = lambda self: None

    def Add(self, oKey, lpVal):
        return _AnimatSimPy.CStdPtrMap_string_OdorType_Add(self, oKey, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrMap_string_OdorType_RemoveAll(self)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_OdorType_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrMap_string_OdorType_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrMap_string_OdorType_Clear(self)

    def clear(self):
        return _AnimatSimPy.CStdPtrMap_string_OdorType_clear(self)

    def erase(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_OdorType_erase(self, oKey)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrMap_string_OdorType()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrMap_string_OdorType_swigregister = _AnimatSimPy.CStdPtrMap_string_OdorType_swigregister
CStdPtrMap_string_OdorType_swigregister(CStdPtrMap_string_OdorType)

class CStdPtrMap_string_Organism(map_string_Organism):
    __swig_setmethods__ = {}
    for _s in [map_string_Organism]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrMap_string_Organism, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_Organism]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrMap_string_Organism, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrMap_string_Organism
    __del__ = lambda self: None

    def Add(self, oKey, lpVal):
        return _AnimatSimPy.CStdPtrMap_string_Organism_Add(self, oKey, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrMap_string_Organism_RemoveAll(self)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_Organism_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrMap_string_Organism_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrMap_string_Organism_Clear(self)

    def clear(self):
        return _AnimatSimPy.CStdPtrMap_string_Organism_clear(self)

    def erase(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_Organism_erase(self, oKey)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrMap_string_Organism()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrMap_string_Organism_swigregister = _AnimatSimPy.CStdPtrMap_string_Organism_swigregister
CStdPtrMap_string_Organism_swigregister(CStdPtrMap_string_Organism)

class CStdPtrMap_string_Structure(map_string_Structure):
    __swig_setmethods__ = {}
    for _s in [map_string_Structure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPtrMap_string_Structure, name, value)
    __swig_getmethods__ = {}
    for _s in [map_string_Structure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPtrMap_string_Structure, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdPtrMap_string_Structure
    __del__ = lambda self: None

    def Add(self, oKey, lpVal):
        return _AnimatSimPy.CStdPtrMap_string_Structure_Add(self, oKey, lpVal)

    def RemoveAll(self):
        return _AnimatSimPy.CStdPtrMap_string_Structure_RemoveAll(self)

    def Remove(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_Structure_Remove(self, oKey)

    def GetSize(self):
        return _AnimatSimPy.CStdPtrMap_string_Structure_GetSize(self)

    def Clear(self):
        return _AnimatSimPy.CStdPtrMap_string_Structure_Clear(self)

    def clear(self):
        return _AnimatSimPy.CStdPtrMap_string_Structure_clear(self)

    def erase(self, oKey):
        return _AnimatSimPy.CStdPtrMap_string_Structure_erase(self, oKey)

    def __init__(self):
        this = _AnimatSimPy.new_CStdPtrMap_string_Structure()
        try:
            self.this.append(this)
        except:
            self.this = this
CStdPtrMap_string_Structure_swigregister = _AnimatSimPy.CStdPtrMap_string_Structure_swigregister
CStdPtrMap_string_Structure_swigregister(CStdPtrMap_string_Structure)

class CStdSerialize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdSerialize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdSerialize, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_CStdSerialize()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CStdSerialize
    __del__ = lambda self: None

    def Clone(self):
        return _AnimatSimPy.CStdSerialize_Clone(self)

    def Copy(self, lpSource):
        return _AnimatSimPy.CStdSerialize_Copy(self, lpSource)

    def Trace(self, oOs):
        return _AnimatSimPy.CStdSerialize_Trace(self, oOs)

    def Load(self, oXml):
        return _AnimatSimPy.CStdSerialize_Load(self, oXml)

    def Save(self, oXml):
        return _AnimatSimPy.CStdSerialize_Save(self, oXml)
CStdSerialize_swigregister = _AnimatSimPy.CStdSerialize_swigregister
CStdSerialize_swigregister(CStdSerialize)


def __lshift__(*args):
    return _AnimatSimPy.__lshift__(*args)
__lshift__ = _AnimatSimPy.__lshift__

def Std_SavePoint(*args):
    return _AnimatSimPy.Std_SavePoint(*args)
Std_SavePoint = _AnimatSimPy.Std_SavePoint

def Std_LoadPoint(*args):
    return _AnimatSimPy.Std_LoadPoint(*args)
Std_LoadPoint = _AnimatSimPy.Std_LoadPoint

def Std_CalculateDistance(*args):
    return _AnimatSimPy.Std_CalculateDistance(*args)
Std_CalculateDistance = _AnimatSimPy.Std_CalculateDistance
class CMarkupSTL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMarkupSTL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMarkupSTL, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimatSimPy.new_CMarkupSTL(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CMarkupSTL
    __del__ = lambda self: None

    def Load(self, szFileName):
        return _AnimatSimPy.CMarkupSTL_Load(self, szFileName)

    def SetDoc(self, szDoc):
        return _AnimatSimPy.CMarkupSTL_SetDoc(self, szDoc)

    def IsWellFormed(self):
        return _AnimatSimPy.CMarkupSTL_IsWellFormed(self)

    def FindElem(self, szName=None):
        return _AnimatSimPy.CMarkupSTL_FindElem(self, szName)

    def FindChildElem(self, szName=None):
        return _AnimatSimPy.CMarkupSTL_FindChildElem(self, szName)

    def IntoElem(self):
        return _AnimatSimPy.CMarkupSTL_IntoElem(self)

    def OutOfElem(self):
        return _AnimatSimPy.CMarkupSTL_OutOfElem(self)

    def ResetChildPos(self):
        return _AnimatSimPy.CMarkupSTL_ResetChildPos(self)

    def ResetMainPos(self):
        return _AnimatSimPy.CMarkupSTL_ResetMainPos(self)

    def ResetPos(self):
        return _AnimatSimPy.CMarkupSTL_ResetPos(self)

    def GetTagName(self):
        return _AnimatSimPy.CMarkupSTL_GetTagName(self)

    def GetChildTagName(self):
        return _AnimatSimPy.CMarkupSTL_GetChildTagName(self)

    def GetData(self):
        return _AnimatSimPy.CMarkupSTL_GetData(self)

    def GetChildData(self):
        return _AnimatSimPy.CMarkupSTL_GetChildData(self)

    def GetAttrib(self, szAttrib):
        return _AnimatSimPy.CMarkupSTL_GetAttrib(self, szAttrib)

    def GetChildAttrib(self, szAttrib):
        return _AnimatSimPy.CMarkupSTL_GetChildAttrib(self, szAttrib)

    def GetAttribName(self, n):
        return _AnimatSimPy.CMarkupSTL_GetAttribName(self, n)

    def SavePos(self, *args):
        return _AnimatSimPy.CMarkupSTL_SavePos(self, *args)

    def RestorePos(self, *args):
        return _AnimatSimPy.CMarkupSTL_RestorePos(self, *args)

    def GetOffsets(self, nStart, nEnd):
        return _AnimatSimPy.CMarkupSTL_GetOffsets(self, nStart, nEnd)

    def GetError(self):
        return _AnimatSimPy.CMarkupSTL_GetError(self)
    MNT_ELEMENT = _AnimatSimPy.CMarkupSTL_MNT_ELEMENT
    MNT_TEXT = _AnimatSimPy.CMarkupSTL_MNT_TEXT
    MNT_WHITESPACE = _AnimatSimPy.CMarkupSTL_MNT_WHITESPACE
    MNT_CDATA_SECTION = _AnimatSimPy.CMarkupSTL_MNT_CDATA_SECTION
    MNT_PROCESSING_INSTRUCTION = _AnimatSimPy.CMarkupSTL_MNT_PROCESSING_INSTRUCTION
    MNT_COMMENT = _AnimatSimPy.CMarkupSTL_MNT_COMMENT
    MNT_DOCUMENT_TYPE = _AnimatSimPy.CMarkupSTL_MNT_DOCUMENT_TYPE
    MNT_EXCLUDE_WHITESPACE = _AnimatSimPy.CMarkupSTL_MNT_EXCLUDE_WHITESPACE

    def Save(self, szFileName):
        return _AnimatSimPy.CMarkupSTL_Save(self, szFileName)

    def GetDoc(self):
        return _AnimatSimPy.CMarkupSTL_GetDoc(self)

    def AddElem(self, szName, szData=None):
        return _AnimatSimPy.CMarkupSTL_AddElem(self, szName, szData)

    def InsertElem(self, szName, szData=None):
        return _AnimatSimPy.CMarkupSTL_InsertElem(self, szName, szData)

    def AddChildElem(self, szName, szData=None):
        return _AnimatSimPy.CMarkupSTL_AddChildElem(self, szName, szData)

    def InsertChildElem(self, szName, szData=None):
        return _AnimatSimPy.CMarkupSTL_InsertChildElem(self, szName, szData)

    def AddAttrib(self, *args):
        return _AnimatSimPy.CMarkupSTL_AddAttrib(self, *args)

    def AddChildAttrib(self, *args):
        return _AnimatSimPy.CMarkupSTL_AddChildAttrib(self, *args)

    def AddChildSubDoc(self, szSubDoc):
        return _AnimatSimPy.CMarkupSTL_AddChildSubDoc(self, szSubDoc)

    def InsertChildSubDoc(self, szSubDoc):
        return _AnimatSimPy.CMarkupSTL_InsertChildSubDoc(self, szSubDoc)

    def GetChildSubDoc(self):
        return _AnimatSimPy.CMarkupSTL_GetChildSubDoc(self)

    def RemoveElem(self):
        return _AnimatSimPy.CMarkupSTL_RemoveElem(self)

    def RemoveChildElem(self):
        return _AnimatSimPy.CMarkupSTL_RemoveChildElem(self)

    def SetAttrib(self, *args):
        return _AnimatSimPy.CMarkupSTL_SetAttrib(self, *args)

    def SetChildAttrib(self, *args):
        return _AnimatSimPy.CMarkupSTL_SetChildAttrib(self, *args)

    def SetData(self, szData, nCDATA=0):
        return _AnimatSimPy.CMarkupSTL_SetData(self, szData, nCDATA)

    def SetChildData(self, szData, nCDATA=0):
        return _AnimatSimPy.CMarkupSTL_SetChildData(self, szData, nCDATA)
CMarkupSTL_swigregister = _AnimatSimPy.CMarkupSTL_swigregister
CMarkupSTL_swigregister(CMarkupSTL)

class CStdXml(CMarkupSTL):
    __swig_setmethods__ = {}
    for _s in [CMarkupSTL]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdXml, name, value)
    __swig_getmethods__ = {}
    for _s in [CMarkupSTL]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdXml, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_CStdXml()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CStdXml
    __del__ = lambda self: None

    def Serialize(self):
        return _AnimatSimPy.CStdXml_Serialize(self)

    def Deserialize(self, strXml):
        return _AnimatSimPy.CStdXml_Deserialize(self, strXml)

    def IntoElem(self):
        return _AnimatSimPy.CStdXml_IntoElem(self)

    def OutOfElem(self):
        return _AnimatSimPy.CStdXml_OutOfElem(self)

    def FullTagPath(self, bAddChildName=True):
        return _AnimatSimPy.CStdXml_FullTagPath(self, bAddChildName)

    def NumberOfChildren(self):
        return _AnimatSimPy.CStdXml_NumberOfChildren(self)

    def FindElement(self, strElementName, fThrowError=True):
        return _AnimatSimPy.CStdXml_FindElement(self, strElementName, fThrowError)

    def FindChildByIndex(self, iIndex, bThrowError=True):
        return _AnimatSimPy.CStdXml_FindChildByIndex(self, iIndex, bThrowError)

    def FindChildElement(self, strElementName, fThrowError=True):
        return _AnimatSimPy.CStdXml_FindChildElement(self, strElementName, fThrowError)

    def IntoChildElement(self, strElementName, bThrowError=True):
        return _AnimatSimPy.CStdXml_IntoChildElement(self, strElementName, bThrowError)

    def GetChildString(self, *args):
        return _AnimatSimPy.CStdXml_GetChildString(self, *args)

    def GetChildLong(self, *args):
        return _AnimatSimPy.CStdXml_GetChildLong(self, *args)

    def GetChildInt(self, *args):
        return _AnimatSimPy.CStdXml_GetChildInt(self, *args)

    def GetChildDouble(self, *args):
        return _AnimatSimPy.CStdXml_GetChildDouble(self, *args)

    def GetChildFloat(self, *args):
        return _AnimatSimPy.CStdXml_GetChildFloat(self, *args)

    def GetChildBool(self, *args):
        return _AnimatSimPy.CStdXml_GetChildBool(self, *args)

    def AddElement(self, *args):
        return _AnimatSimPy.CStdXml_AddElement(self, *args)

    def AddChildElement(self, *args):
        return _AnimatSimPy.CStdXml_AddChildElement(self, *args)

    def AddChildCData(self, strElementName, strCData):
        return _AnimatSimPy.CStdXml_AddChildCData(self, strElementName, strCData)

    def GetAttribString(self, *args):
        return _AnimatSimPy.CStdXml_GetAttribString(self, *args)

    def GetAttribLong(self, strAttribName, bThrowError=True, lDefault=0):
        return _AnimatSimPy.CStdXml_GetAttribLong(self, strAttribName, bThrowError, lDefault)

    def GetAttribInt(self, strAttribName, bThrowError=True, iDefault=0):
        return _AnimatSimPy.CStdXml_GetAttribInt(self, strAttribName, bThrowError, iDefault)

    def GetAttribDouble(self, strAttribName, bThrowError=True, dblDefault=0):
        return _AnimatSimPy.CStdXml_GetAttribDouble(self, strAttribName, bThrowError, dblDefault)

    def GetAttribFloat(self, strAttribName, bThrowError=True, fltDefault=0):
        return _AnimatSimPy.CStdXml_GetAttribFloat(self, strAttribName, bThrowError, fltDefault)

    def GetAttribBool(self, strAttribName, bThrowError=True, bDefault=False):
        return _AnimatSimPy.CStdXml_GetAttribBool(self, strAttribName, bThrowError, bDefault)

    def SetAttrib(self, *args):
        return _AnimatSimPy.CStdXml_SetAttrib(self, *args)

    def GetChildAttribString(self, *args):
        return _AnimatSimPy.CStdXml_GetChildAttribString(self, *args)

    def GetChildAttribLong(self, strAttribName, bThrowError=True, lDefault=0):
        return _AnimatSimPy.CStdXml_GetChildAttribLong(self, strAttribName, bThrowError, lDefault)

    def GetChildAttribInt(self, strAttribName, bThrowError=True, iDefault=0):
        return _AnimatSimPy.CStdXml_GetChildAttribInt(self, strAttribName, bThrowError, iDefault)

    def GetChildAttribDouble(self, strAttribName, bThrowError=True, dblDefault=0):
        return _AnimatSimPy.CStdXml_GetChildAttribDouble(self, strAttribName, bThrowError, dblDefault)

    def GetChildAttribFloat(self, strAttribName, bThrowError=True, fltDefault=0):
        return _AnimatSimPy.CStdXml_GetChildAttribFloat(self, strAttribName, bThrowError, fltDefault)

    def GetChildAttribBool(self, strAttribName, bThrowError=True, bDefault=False):
        return _AnimatSimPy.CStdXml_GetChildAttribBool(self, strAttribName, bThrowError, bDefault)

    def SetChildAttrib(self, *args):
        return _AnimatSimPy.CStdXml_SetChildAttrib(self, *args)

    def AddChildDoc(self, strDoc):
        return _AnimatSimPy.CStdXml_AddChildDoc(self, strDoc)

    def GetChildDoc(self):
        return _AnimatSimPy.CStdXml_GetChildDoc(self)

    def GetParentTagName(self):
        return _AnimatSimPy.CStdXml_GetParentTagName(self)

    def Load(self, strFilename):
        return _AnimatSimPy.CStdXml_Load(self, strFilename)

    def Save(self, strFilename):
        return _AnimatSimPy.CStdXml_Save(self, strFilename)
CStdXml_swigregister = _AnimatSimPy.CStdXml_swigregister
CStdXml_swigregister(CStdXml)

class CStdFont(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdFont, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdFont, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_strName"] = _AnimatSimPy.CStdFont_m_strName_set
    __swig_getmethods__["m_strName"] = _AnimatSimPy.CStdFont_m_strName_get
    if _newclass:
        m_strName = _swig_property(_AnimatSimPy.CStdFont_m_strName_get, _AnimatSimPy.CStdFont_m_strName_set)
    __swig_setmethods__["m_fltSize"] = _AnimatSimPy.CStdFont_m_fltSize_set
    __swig_getmethods__["m_fltSize"] = _AnimatSimPy.CStdFont_m_fltSize_get
    if _newclass:
        m_fltSize = _swig_property(_AnimatSimPy.CStdFont_m_fltSize_get, _AnimatSimPy.CStdFont_m_fltSize_set)
    __swig_setmethods__["m_fltWeight"] = _AnimatSimPy.CStdFont_m_fltWeight_set
    __swig_getmethods__["m_fltWeight"] = _AnimatSimPy.CStdFont_m_fltWeight_get
    if _newclass:
        m_fltWeight = _swig_property(_AnimatSimPy.CStdFont_m_fltWeight_get, _AnimatSimPy.CStdFont_m_fltWeight_set)
    __swig_setmethods__["m_bBold"] = _AnimatSimPy.CStdFont_m_bBold_set
    __swig_getmethods__["m_bBold"] = _AnimatSimPy.CStdFont_m_bBold_get
    if _newclass:
        m_bBold = _swig_property(_AnimatSimPy.CStdFont_m_bBold_get, _AnimatSimPy.CStdFont_m_bBold_set)
    __swig_setmethods__["m_bItalic"] = _AnimatSimPy.CStdFont_m_bItalic_set
    __swig_getmethods__["m_bItalic"] = _AnimatSimPy.CStdFont_m_bItalic_get
    if _newclass:
        m_bItalic = _swig_property(_AnimatSimPy.CStdFont_m_bItalic_get, _AnimatSimPy.CStdFont_m_bItalic_set)
    __swig_setmethods__["m_bStrikethrough"] = _AnimatSimPy.CStdFont_m_bStrikethrough_set
    __swig_getmethods__["m_bStrikethrough"] = _AnimatSimPy.CStdFont_m_bStrikethrough_get
    if _newclass:
        m_bStrikethrough = _swig_property(_AnimatSimPy.CStdFont_m_bStrikethrough_get, _AnimatSimPy.CStdFont_m_bStrikethrough_set)
    __swig_setmethods__["m_bUnderline"] = _AnimatSimPy.CStdFont_m_bUnderline_set
    __swig_getmethods__["m_bUnderline"] = _AnimatSimPy.CStdFont_m_bUnderline_get
    if _newclass:
        m_bUnderline = _swig_property(_AnimatSimPy.CStdFont_m_bUnderline_get, _AnimatSimPy.CStdFont_m_bUnderline_set)

    def __init__(self):
        this = _AnimatSimPy.new_CStdFont()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CStdFont
    __del__ = lambda self: None

    def Load(self, oXml, strParamName, bThrowError=False):
        return _AnimatSimPy.CStdFont_Load(self, oXml, strParamName, bThrowError)

    def Save(self, oXml, strParamName):
        return _AnimatSimPy.CStdFont_Save(self, oXml, strParamName)
CStdFont_swigregister = _AnimatSimPy.CStdFont_swigregister
CStdFont_swigregister(CStdFont)

class CStdVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdVariable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_strVariable"] = _AnimatSimPy.CStdVariable_m_strVariable_set
    __swig_getmethods__["m_strVariable"] = _AnimatSimPy.CStdVariable_m_strVariable_get
    if _newclass:
        m_strVariable = _swig_property(_AnimatSimPy.CStdVariable_m_strVariable_get, _AnimatSimPy.CStdVariable_m_strVariable_set)
    __swig_setmethods__["m_dblValue"] = _AnimatSimPy.CStdVariable_m_dblValue_set
    __swig_getmethods__["m_dblValue"] = _AnimatSimPy.CStdVariable_m_dblValue_get
    if _newclass:
        m_dblValue = _swig_property(_AnimatSimPy.CStdVariable_m_dblValue_get, _AnimatSimPy.CStdVariable_m_dblValue_set)

    def __init__(self):
        this = _AnimatSimPy.new_CStdVariable()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CStdVariable
    __del__ = lambda self: None
CStdVariable_swigregister = _AnimatSimPy.CStdVariable_swigregister
CStdVariable_swigregister(CStdVariable)

class CStdPostFixEval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPostFixEval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPostFixEval, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_CStdPostFixEval()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CStdPostFixEval
    __del__ = lambda self: None

    def AddVariable(self, strVarName):
        return _AnimatSimPy.CStdPostFixEval_AddVariable(self, strVarName)

    def SetVariable(self, strVarName, dblVal):
        return _AnimatSimPy.CStdPostFixEval_SetVariable(self, strVarName, dblVal)

    def Solution(self):
        return _AnimatSimPy.CStdPostFixEval_Solution(self)

    def Equation(self, *args):
        return _AnimatSimPy.CStdPostFixEval_Equation(self, *args)

    def Solve(self):
        return _AnimatSimPy.CStdPostFixEval_Solve(self)
CStdPostFixEval_swigregister = _AnimatSimPy.CStdPostFixEval_swigregister
CStdPostFixEval_swigregister(CStdPostFixEval)


_AnimatSimPy.StdVtEmpty_swigconstant(_AnimatSimPy)
StdVtEmpty = _AnimatSimPy.StdVtEmpty

_AnimatSimPy.StdVtShort_swigconstant(_AnimatSimPy)
StdVtShort = _AnimatSimPy.StdVtShort

_AnimatSimPy.StdVtLong_swigconstant(_AnimatSimPy)
StdVtLong = _AnimatSimPy.StdVtLong

_AnimatSimPy.StdVtFloat_swigconstant(_AnimatSimPy)
StdVtFloat = _AnimatSimPy.StdVtFloat

_AnimatSimPy.StdVtDouble_swigconstant(_AnimatSimPy)
StdVtDouble = _AnimatSimPy.StdVtDouble

_AnimatSimPy.StdVtBool_swigconstant(_AnimatSimPy)
StdVtBool = _AnimatSimPy.StdVtBool

_AnimatSimPy.StdVtChar_swigconstant(_AnimatSimPy)
StdVtChar = _AnimatSimPy.StdVtChar

_AnimatSimPy.StdVtUChar_swigconstant(_AnimatSimPy)
StdVtUChar = _AnimatSimPy.StdVtUChar

_AnimatSimPy.StdVtUShort_swigconstant(_AnimatSimPy)
StdVtUShort = _AnimatSimPy.StdVtUShort

_AnimatSimPy.StdVtULong_swigconstant(_AnimatSimPy)
StdVtULong = _AnimatSimPy.StdVtULong

_AnimatSimPy.StdVtInt_swigconstant(_AnimatSimPy)
StdVtInt = _AnimatSimPy.StdVtInt

_AnimatSimPy.StdVtUInt_swigconstant(_AnimatSimPy)
StdVtUInt = _AnimatSimPy.StdVtUInt

_AnimatSimPy.StdVtString_swigconstant(_AnimatSimPy)
StdVtString = _AnimatSimPy.StdVtString
class CStdVariant(CStdSerialize):
    __swig_setmethods__ = {}
    for _s in [CStdSerialize]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdVariant, name, value)
    __swig_getmethods__ = {}
    for _s in [CStdSerialize]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStdVariant, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_CStdVariant()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CStdVariant
    __del__ = lambda self: None

    def Reset(self):
        return _AnimatSimPy.CStdVariant_Reset(self)

    def VariantType(self):
        return _AnimatSimPy.CStdVariant_VariantType(self)

    def VariantTypeName(self):
        return _AnimatSimPy.CStdVariant_VariantTypeName(self)

    def GetShort(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetShort(self, bConvert)

    def GetShortPtr(self):
        return _AnimatSimPy.CStdVariant_GetShortPtr(self)

    def GetLong(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetLong(self, bConvert)

    def GetLongPtr(self):
        return _AnimatSimPy.CStdVariant_GetLongPtr(self)

    def GetFloat(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetFloat(self, bConvert)

    def GetFloatPtr(self):
        return _AnimatSimPy.CStdVariant_GetFloatPtr(self)

    def GetDouble(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetDouble(self, bConvert)

    def GetDoublePtr(self):
        return _AnimatSimPy.CStdVariant_GetDoublePtr(self)

    def GetBool(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetBool(self, bConvert)

    def GetBoolPtr(self):
        return _AnimatSimPy.CStdVariant_GetBoolPtr(self)

    def GetChar(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetChar(self, bConvert)

    def GetCharPtr(self):
        return _AnimatSimPy.CStdVariant_GetCharPtr(self)

    def GetUChar(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetUChar(self, bConvert)

    def GetUCharPtr(self):
        return _AnimatSimPy.CStdVariant_GetUCharPtr(self)

    def GetUShort(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetUShort(self, bConvert)

    def GetUShortPtr(self):
        return _AnimatSimPy.CStdVariant_GetUShortPtr(self)

    def GetULong(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetULong(self, bConvert)

    def GetULongPtr(self):
        return _AnimatSimPy.CStdVariant_GetULongPtr(self)

    def GetInt(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetInt(self, bConvert)

    def GetIntPtr(self):
        return _AnimatSimPy.CStdVariant_GetIntPtr(self)

    def GetUInt(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetUInt(self, bConvert)

    def GetUIntPtr(self):
        return _AnimatSimPy.CStdVariant_GetUIntPtr(self)

    def GetString(self, bConvert=True):
        return _AnimatSimPy.CStdVariant_GetString(self, bConvert)

    def GetNumericString(self):
        return _AnimatSimPy.CStdVariant_GetNumericString(self)

    def GetStringPtr(self):
        return _AnimatSimPy.CStdVariant_GetStringPtr(self)

    def SetValue(self, *args):
        return _AnimatSimPy.CStdVariant_SetValue(self, *args)

    def SetPtr(self, *args):
        return _AnimatSimPy.CStdVariant_SetPtr(self, *args)

    def Copy(self, oVar):
        return _AnimatSimPy.CStdVariant_Copy(self, oVar)

    def Clone(self):
        return _AnimatSimPy.CStdVariant_Clone(self)

    def Trace(self, oOs):
        return _AnimatSimPy.CStdVariant_Trace(self, oOs)

    def Load(self, oXml):
        return _AnimatSimPy.CStdVariant_Load(self, oXml)

    def Save(self, oXml):
        return _AnimatSimPy.CStdVariant_Save(self, oXml)
CStdVariant_swigregister = _AnimatSimPy.CStdVariant_swigregister
CStdVariant_swigregister(CStdVariant)

class IStdClassFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStdClassFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IStdClassFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_IStdClassFactory
    __del__ = lambda self: None

    def CreateObject(self, strClassType, strObjectType, bThrowError=True):
        return _AnimatSimPy.IStdClassFactory_CreateObject(self, strClassType, strObjectType, bThrowError)
    __swig_getmethods__["LoadModule"] = lambda x: _AnimatSimPy.IStdClassFactory_LoadModule
    if _newclass:
        LoadModule = staticmethod(_AnimatSimPy.IStdClassFactory_LoadModule)
IStdClassFactory_swigregister = _AnimatSimPy.IStdClassFactory_swigregister
IStdClassFactory_swigregister(IStdClassFactory)

def IStdClassFactory_LoadModule(strModuleName, bThrowError=True):
    return _AnimatSimPy.IStdClassFactory_LoadModule(strModuleName, bThrowError)
IStdClassFactory_LoadModule = _AnimatSimPy.IStdClassFactory_LoadModule

class CStdLookupTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdLookupTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdLookupTable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_CStdLookupTable()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CStdLookupTable
    __del__ = lambda self: None

    def InitialPointCount(self):
        return _AnimatSimPy.CStdLookupTable_InitialPointCount(self)

    def InitialPoint(self, iIndex):
        return _AnimatSimPy.CStdLookupTable_InitialPoint(self, iIndex)

    def TableSize(self):
        return _AnimatSimPy.CStdLookupTable_TableSize(self)

    def Delta(self):
        return _AnimatSimPy.CStdLookupTable_Delta(self)

    def StartX(self):
        return _AnimatSimPy.CStdLookupTable_StartX(self)

    def EndX(self):
        return _AnimatSimPy.CStdLookupTable_EndX(self)

    def UseLowLimitValue(self, *args):
        return _AnimatSimPy.CStdLookupTable_UseLowLimitValue(self, *args)

    def UseHighLimitValue(self, *args):
        return _AnimatSimPy.CStdLookupTable_UseHighLimitValue(self, *args)

    def LowLimitValue(self, *args):
        return _AnimatSimPy.CStdLookupTable_LowLimitValue(self, *args)

    def HighLimitValue(self, *args):
        return _AnimatSimPy.CStdLookupTable_HighLimitValue(self, *args)

    def AddPoint(self, dblX, dblY):
        return _AnimatSimPy.CStdLookupTable_AddPoint(self, dblX, dblY)

    def Initialize(self):
        return _AnimatSimPy.CStdLookupTable_Initialize(self)

    def Clear(self):
        return _AnimatSimPy.CStdLookupTable_Clear(self)

    def Evaluate(self, dblX):
        return _AnimatSimPy.CStdLookupTable_Evaluate(self, dblX)

    def Load(self, oXml, strParamName, bThrowError=False):
        return _AnimatSimPy.CStdLookupTable_Load(self, oXml, strParamName, bThrowError)

    def Save(self, oXml, strParamName):
        return _AnimatSimPy.CStdLookupTable_Save(self, oXml, strParamName)
CStdLookupTable_swigregister = _AnimatSimPy.CStdLookupTable_swigregister
CStdLookupTable_swigregister(CStdLookupTable)

class CStdFixed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdFixed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdFixed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimatSimPy.new_CStdFixed(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CStdFixed
    __del__ = lambda self: None

    def M(self):
        return _AnimatSimPy.CStdFixed_M(self)

    def N(self):
        return _AnimatSimPy.CStdFixed_N(self)

    def MultM(self):
        return _AnimatSimPy.CStdFixed_MultM(self)

    def MultN(self):
        return _AnimatSimPy.CStdFixed_MultN(self)

    def FixedVal(self):
        return _AnimatSimPy.CStdFixed_FixedVal(self)

    def Fixed(self, lVal):
        return _AnimatSimPy.CStdFixed_Fixed(self, lVal)

    def GetFloat(self):
        return _AnimatSimPy.CStdFixed_GetFloat(self)

    def GetFloatPtr(self):
        return _AnimatSimPy.CStdFixed_GetFloatPtr(self)

    def GetDouble(self):
        return _AnimatSimPy.CStdFixed_GetDouble(self)

    def GetDoublePtr(self):
        return _AnimatSimPy.CStdFixed_GetDoublePtr(self)

    def GetLongPtr(self):
        return _AnimatSimPy.CStdFixed_GetLongPtr(self)

    def Configure(self, iM, iN, iMultM=-1, iMultN=-1):
        return _AnimatSimPy.CStdFixed_Configure(self, iM, iN, iMultM, iMultN)

    def __add__(self, *args):
        return _AnimatSimPy.CStdFixed___add__(self, *args)

    def __iadd__(self, *args):
        return _AnimatSimPy.CStdFixed___iadd__(self, *args)

    def __sub__(self, *args):
        return _AnimatSimPy.CStdFixed___sub__(self, *args)

    def __isub__(self, *args):
        return _AnimatSimPy.CStdFixed___isub__(self, *args)

    def __mul__(self, *args):
        return _AnimatSimPy.CStdFixed___mul__(self, *args)

    def __imul__(self, *args):
        return _AnimatSimPy.CStdFixed___imul__(self, *args)

    def __div__(self, *args):
        return _AnimatSimPy.CStdFixed___div__(self, *args)

    def __idiv__(self, *args):
        return _AnimatSimPy.CStdFixed___idiv__(self, *args)

    def __eq__(self, *args):
        return _AnimatSimPy.CStdFixed___eq__(self, *args)

    def __lt__(self, *args):
        return _AnimatSimPy.CStdFixed___lt__(self, *args)

    def __le__(self, *args):
        return _AnimatSimPy.CStdFixed___le__(self, *args)

    def __gt__(self, *args):
        return _AnimatSimPy.CStdFixed___gt__(self, *args)

    def __ge__(self, *args):
        return _AnimatSimPy.CStdFixed___ge__(self, *args)

    def __ne__(self, *args):
        return _AnimatSimPy.CStdFixed___ne__(self, *args)

    def __lshift__(self, output):
        return _AnimatSimPy.CStdFixed___lshift__(self, output)
CStdFixed_swigregister = _AnimatSimPy.CStdFixed_swigregister
CStdFixed_swigregister(CStdFixed)

class CStdColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimatSimPy.new_CStdColor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def r(self, *args):
        return _AnimatSimPy.CStdColor_r(self, *args)

    def g(self, *args):
        return _AnimatSimPy.CStdColor_g(self, *args)

    def b(self, *args):
        return _AnimatSimPy.CStdColor_b(self, *args)

    def a(self, *args):
        return _AnimatSimPy.CStdColor_a(self, *args)

    def Set(self, R, G, B, A):
        return _AnimatSimPy.CStdColor_Set(self, R, G, B, A)

    def __eq__(self, oPoint):
        return _AnimatSimPy.CStdColor___eq__(self, oPoint)

    def __ne__(self, oPoint):
        return _AnimatSimPy.CStdColor___ne__(self, oPoint)

    def __iadd__(self, *args):
        return _AnimatSimPy.CStdColor___iadd__(self, *args)

    def __isub__(self, *args):
        return _AnimatSimPy.CStdColor___isub__(self, *args)

    def __imul__(self, fltVal):
        return _AnimatSimPy.CStdColor___imul__(self, fltVal)

    def __idiv__(self, fltVal):
        return _AnimatSimPy.CStdColor___idiv__(self, fltVal)

    def __add__(self, *args):
        return _AnimatSimPy.CStdColor___add__(self, *args)

    def __sub__(self, *args):
        return _AnimatSimPy.CStdColor___sub__(self, *args)

    def __mul__(self, fltVal):
        return _AnimatSimPy.CStdColor___mul__(self, fltVal)

    def __div__(self, fltVal):
        return _AnimatSimPy.CStdColor___div__(self, fltVal)

    def Magnitude(self):
        return _AnimatSimPy.CStdColor_Magnitude(self)

    def Normalize(self):
        return _AnimatSimPy.CStdColor_Normalize(self)

    def ClearNearZero(self, fltTolerance=1e-5):
        return _AnimatSimPy.CStdColor_ClearNearZero(self, fltTolerance)

    def Load(self, *args):
        return _AnimatSimPy.CStdColor_Load(self, *args)
    __swig_destroy__ = _AnimatSimPy.delete_CStdColor
    __del__ = lambda self: None
CStdColor_swigregister = _AnimatSimPy.CStdColor_swigregister
CStdColor_swigregister(CStdColor)

class CStdCriticalSection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdCriticalSection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdCriticalSection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_CStdCriticalSection
    __del__ = lambda self: None

    def TryEnter(self):
        return _AnimatSimPy.CStdCriticalSection_TryEnter(self)

    def Leave(self):
        return _AnimatSimPy.CStdCriticalSection_Leave(self)
CStdCriticalSection_swigregister = _AnimatSimPy.CStdCriticalSection_swigregister
CStdCriticalSection_swigregister(CStdCriticalSection)


def Std_GetCriticalSection():
    return _AnimatSimPy.Std_GetCriticalSection()
Std_GetCriticalSection = _AnimatSimPy.Std_GetCriticalSection
class CStdPID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStdPID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStdPID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimatSimPy.new_CStdPID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CStdPID
    __del__ = lambda self: None

    def Error(self):
        return _AnimatSimPy.CStdPID_Error(self)

    def ErrorChange(self):
        return _AnimatSimPy.CStdPID_ErrorChange(self)

    def Setpoint(self, *args):
        return _AnimatSimPy.CStdPID_Setpoint(self, *args)

    def Gain(self, *args):
        return _AnimatSimPy.CStdPID_Gain(self, *args)

    def IntegralAct(self, *args):
        return _AnimatSimPy.CStdPID_IntegralAct(self, *args)

    def DerivativeAct(self, *args):
        return _AnimatSimPy.CStdPID_DerivativeAct(self, *args)

    def Proportional(self):
        return _AnimatSimPy.CStdPID_Proportional(self)

    def Integral(self):
        return _AnimatSimPy.CStdPID_Integral(self)

    def OldIntegral(self):
        return _AnimatSimPy.CStdPID_OldIntegral(self)

    def Derivative(self):
        return _AnimatSimPy.CStdPID_Derivative(self)

    def Output(self):
        return _AnimatSimPy.CStdPID_Output(self)

    def OldOutput(self):
        return _AnimatSimPy.CStdPID_OldOutput(self)

    def ComplexError(self, *args):
        return _AnimatSimPy.CStdPID_ComplexError(self, *args)

    def AntiResetWindup(self, *args):
        return _AnimatSimPy.CStdPID_AntiResetWindup(self, *args)

    def RampLimit(self, *args):
        return _AnimatSimPy.CStdPID_RampLimit(self, *args)

    def RangeMax(self, *args):
        return _AnimatSimPy.CStdPID_RangeMax(self, *args)

    def RangeMin(self, *args):
        return _AnimatSimPy.CStdPID_RangeMin(self, *args)

    def Range(self):
        return _AnimatSimPy.CStdPID_Range(self)

    def ARWBound(self, *args):
        return _AnimatSimPy.CStdPID_ARWBound(self, *args)

    def RampGradient(self, *args):
        return _AnimatSimPy.CStdPID_RampGradient(self, *args)

    def ResetVars(self):
        return _AnimatSimPy.CStdPID_ResetVars(self)

    def Calculate(self, fltDt, fltInput):
        return _AnimatSimPy.CStdPID_Calculate(self, fltDt, fltInput)
CStdPID_swigregister = _AnimatSimPy.CStdPID_swigregister
CStdPID_swigregister(CStdPID)


def GetFilePath(strProjectPath, strFilename):
    return _AnimatSimPy.GetFilePath(strProjectPath, strFilename)
GetFilePath = _AnimatSimPy.GetFilePath
class IMovableItemCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMovableItemCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMovableItemCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_IMovableItemCallback
    __del__ = lambda self: None

    def PositionChanged(self):
        return _AnimatSimPy.IMovableItemCallback_PositionChanged(self)

    def RotationChanged(self):
        return _AnimatSimPy.IMovableItemCallback_RotationChanged(self)

    def SizeChanged(self):
        return _AnimatSimPy.IMovableItemCallback_SizeChanged(self)

    def SelectionChanged(self, bSelected, bSelectMultiple):
        return _AnimatSimPy.IMovableItemCallback_SelectionChanged(self, bSelected, bSelectMultiple)

    def AddBodyClicked(self, fltPosX, fltPosY, fltPosZ, fltNormX, fltNormY, fltNormZ):
        return _AnimatSimPy.IMovableItemCallback_AddBodyClicked(self, fltPosX, fltPosY, fltPosZ, fltNormX, fltNormY, fltNormZ)

    def SelectedVertexChanged(self, fltPosX, fltPosY, fltPosZ):
        return _AnimatSimPy.IMovableItemCallback_SelectedVertexChanged(self, fltPosX, fltPosY, fltPosZ)
IMovableItemCallback_swigregister = _AnimatSimPy.IMovableItemCallback_swigregister
IMovableItemCallback_swigregister(IMovableItemCallback)

class IMotorizedJoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMotorizedJoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMotorizedJoint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_IMotorizedJoint
    __del__ = lambda self: None

    def Physics_SetVelocityToDesired(self):
        return _AnimatSimPy.IMotorizedJoint_Physics_SetVelocityToDesired(self)

    def Physics_EnableLock(self, bOn, fltPosition, fltMaxLockForce):
        return _AnimatSimPy.IMotorizedJoint_Physics_EnableLock(self, bOn, fltPosition, fltMaxLockForce)

    def Physics_EnableMotor(self, bOn, fltDesiredVelocity, fltMaxForce, bForceWakeup):
        return _AnimatSimPy.IMotorizedJoint_Physics_EnableMotor(self, bOn, fltDesiredVelocity, fltMaxForce, bForceWakeup)

    def Physics_MaxForce(self, fltVal):
        return _AnimatSimPy.IMotorizedJoint_Physics_MaxForce(self, fltVal)
IMotorizedJoint_swigregister = _AnimatSimPy.IMotorizedJoint_swigregister
IMotorizedJoint_swigregister(IMotorizedJoint)

class ISimGUICallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISimGUICallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISimGUICallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_ISimGUICallback
    __del__ = lambda self: None

    def NeedToStopSimulation(self):
        return _AnimatSimPy.ISimGUICallback_NeedToStopSimulation(self)

    def HandleNonCriticalError(self, strError):
        return _AnimatSimPy.ISimGUICallback_HandleNonCriticalError(self, strError)

    def HandleCriticalError(self, strError):
        return _AnimatSimPy.ISimGUICallback_HandleCriticalError(self, strError)
ISimGUICallback_swigregister = _AnimatSimPy.ISimGUICallback_swigregister
ISimGUICallback_swigregister(ISimGUICallback)

class AnimatBase(CStdSerialize):
    __swig_setmethods__ = {}
    for _s in [CStdSerialize]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimatBase, name, value)
    __swig_getmethods__ = {}
    for _s in [CStdSerialize]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimatBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_AnimatBase()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_AnimatBase
    __del__ = lambda self: None

    def GetSimulator(self):
        return _AnimatSimPy.AnimatBase_GetSimulator(self)

    def GetStructure(self):
        return _AnimatSimPy.AnimatBase_GetStructure(self)

    def GetNeuralModule(self):
        return _AnimatSimPy.AnimatBase_GetNeuralModule(self)

    def GetNode(self):
        return _AnimatSimPy.AnimatBase_GetNode(self)

    def Enabled(self, *args):
        return _AnimatSimPy.AnimatBase_Enabled(self, *args)

    def ID(self, *args):
        return _AnimatSimPy.AnimatBase_ID(self, *args)

    def Name(self, *args):
        return _AnimatSimPy.AnimatBase_Name(self, *args)

    def Type(self, *args):
        return _AnimatSimPy.AnimatBase_Type(self, *args)

    def Selected(self, *args):
        return _AnimatSimPy.AnimatBase_Selected(self, *args)

    def Copy(self, lpSource):
        return _AnimatSimPy.AnimatBase_Copy(self, lpSource)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify):
        return _AnimatSimPy.AnimatBase_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify)

    def VerifySystemPointers(self):
        return _AnimatSimPy.AnimatBase_VerifySystemPointers(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.AnimatBase_GetDataPointer(self, strDataType)

    def SetData(self, *args):
        return _AnimatSimPy.AnimatBase_SetData(self, *args)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.AnimatBase_QueryProperties(self, aryProperties)

    def HasProperty(self, strName):
        return _AnimatSimPy.AnimatBase_HasProperty(self, strName)

    def PropertyType(self, strName):
        return _AnimatSimPy.AnimatBase_PropertyType(self, strName)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.AnimatBase_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.AnimatBase_RemoveItem(self, strItemType, strID, bThrowError)

    def RigidBodyAdded(self, strID):
        return _AnimatSimPy.AnimatBase_RigidBodyAdded(self, strID)

    def RigidBodyRemoved(self, strID):
        return _AnimatSimPy.AnimatBase_RigidBodyRemoved(self, strID)

    def Reset(self):
        return _AnimatSimPy.AnimatBase_Reset(self)

    def Initialize(self):
        return _AnimatSimPy.AnimatBase_Initialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.AnimatBase_ResetSimulation(self)

    def AfterResetSimulation(self):
        return _AnimatSimPy.AnimatBase_AfterResetSimulation(self)

    def ReInitialize(self):
        return _AnimatSimPy.AnimatBase_ReInitialize(self)

    def Kill(self, bState=True):
        return _AnimatSimPy.AnimatBase_Kill(self, bState)

    def StepSimulation(self):
        return _AnimatSimPy.AnimatBase_StepSimulation(self)

    def SimStarting(self):
        return _AnimatSimPy.AnimatBase_SimStarting(self)

    def SimPausing(self):
        return _AnimatSimPy.AnimatBase_SimPausing(self)

    def SimStopping(self):
        return _AnimatSimPy.AnimatBase_SimStopping(self)

    def TimeStepModified(self):
        return _AnimatSimPy.AnimatBase_TimeStepModified(self)

    def CalculateSnapshotByteSize(self):
        return _AnimatSimPy.AnimatBase_CalculateSnapshotByteSize(self)

    def SaveKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.AnimatBase_SaveKeyFrameSnapshot(self, aryBytes, lIndex)

    def LoadKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.AnimatBase_LoadKeyFrameSnapshot(self, aryBytes, lIndex)

    def VisualSelectionModeChanged(self, iNewMode):
        return _AnimatSimPy.AnimatBase_VisualSelectionModeChanged(self, iNewMode)

    def Load(self, oXml):
        return _AnimatSimPy.AnimatBase_Load(self, oXml)
AnimatBase_swigregister = _AnimatSimPy.AnimatBase_swigregister
AnimatBase_swigregister(AnimatBase)

class DelayLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DelayLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DelayLine, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_DelayLine()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_DelayLine
    __del__ = lambda self: None

    def Initialize(self, fltDelayTime, fltTimeStep):
        return _AnimatSimPy.DelayLine_Initialize(self, fltDelayTime, fltTimeStep)

    def AddValue(self, fltVal):
        return _AnimatSimPy.DelayLine_AddValue(self, fltVal)

    def ReadValue(self):
        return _AnimatSimPy.DelayLine_ReadValue(self)
DelayLine_swigregister = _AnimatSimPy.DelayLine_swigregister
DelayLine_swigregister(DelayLine)

class Gain(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gain, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gain, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_Gain
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Gain_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Gain_CastToDerived)

    def UseLimits(self, *args):
        return _AnimatSimPy.Gain_UseLimits(self, *args)

    def LowerLimit(self, *args):
        return _AnimatSimPy.Gain_LowerLimit(self, *args)

    def UpperLimit(self, *args):
        return _AnimatSimPy.Gain_UpperLimit(self, *args)

    def LowerOutput(self, *args):
        return _AnimatSimPy.Gain_LowerOutput(self, *args)

    def UpperOutput(self, *args):
        return _AnimatSimPy.Gain_UpperOutput(self, *args)

    def Copy(self, lpSource):
        return _AnimatSimPy.Gain_Copy(self, lpSource)

    def CalculateGain(self, fltInput):
        return _AnimatSimPy.Gain_CalculateGain(self, fltInput)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Gain_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Gain_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Gain_Load(self, oXml)
Gain_swigregister = _AnimatSimPy.Gain_swigregister
Gain_swigregister(Gain)

def Gain_CastToDerived(lpBase):
    return _AnimatSimPy.Gain_CastToDerived(lpBase)
Gain_CastToDerived = _AnimatSimPy.Gain_CastToDerived


def LoadGain(lpSim, strName, oXml):
    return _AnimatSimPy.LoadGain(lpSim, strName, oXml)
LoadGain = _AnimatSimPy.LoadGain
class BellGain(Gain):
    __swig_setmethods__ = {}
    for _s in [Gain]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BellGain, name, value)
    __swig_getmethods__ = {}
    for _s in [Gain]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BellGain, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_BellGain()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_BellGain
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.BellGain_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.BellGain_CastToDerived)

    def A(self, *args):
        return _AnimatSimPy.BellGain_A(self, *args)

    def B(self, *args):
        return _AnimatSimPy.BellGain_B(self, *args)

    def C(self, *args):
        return _AnimatSimPy.BellGain_C(self, *args)

    def D(self, *args):
        return _AnimatSimPy.BellGain_D(self, *args)

    def Copy(self, lpSource):
        return _AnimatSimPy.BellGain_Copy(self, lpSource)

    def Clone(self):
        return _AnimatSimPy.BellGain_Clone(self)

    def CalculateGain(self, fltInput):
        return _AnimatSimPy.BellGain_CalculateGain(self, fltInput)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.BellGain_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.BellGain_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.BellGain_Load(self, oXml)
BellGain_swigregister = _AnimatSimPy.BellGain_swigregister
BellGain_swigregister(BellGain)

def BellGain_CastToDerived(lpBase):
    return _AnimatSimPy.BellGain_CastToDerived(lpBase)
BellGain_CastToDerived = _AnimatSimPy.BellGain_CastToDerived

class EquationGain(Gain):
    __swig_setmethods__ = {}
    for _s in [Gain]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EquationGain, name, value)
    __swig_getmethods__ = {}
    for _s in [Gain]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EquationGain, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_EquationGain()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_EquationGain
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.EquationGain_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.EquationGain_CastToDerived)

    def GainEquation(self, *args):
        return _AnimatSimPy.EquationGain_GainEquation(self, *args)

    def Copy(self, lpSource):
        return _AnimatSimPy.EquationGain_Copy(self, lpSource)

    def Clone(self):
        return _AnimatSimPy.EquationGain_Clone(self)

    def CalculateGain(self, fltInput):
        return _AnimatSimPy.EquationGain_CalculateGain(self, fltInput)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.EquationGain_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.EquationGain_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.EquationGain_Load(self, oXml)
EquationGain_swigregister = _AnimatSimPy.EquationGain_swigregister
EquationGain_swigregister(EquationGain)

def EquationGain_CastToDerived(lpBase):
    return _AnimatSimPy.EquationGain_CastToDerived(lpBase)
EquationGain_CastToDerived = _AnimatSimPy.EquationGain_CastToDerived

class PolynomialGain(Gain):
    __swig_setmethods__ = {}
    for _s in [Gain]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomialGain, name, value)
    __swig_getmethods__ = {}
    for _s in [Gain]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomialGain, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_PolynomialGain()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_PolynomialGain
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.PolynomialGain_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.PolynomialGain_CastToDerived)

    def A(self, *args):
        return _AnimatSimPy.PolynomialGain_A(self, *args)

    def B(self, *args):
        return _AnimatSimPy.PolynomialGain_B(self, *args)

    def C(self, *args):
        return _AnimatSimPy.PolynomialGain_C(self, *args)

    def D(self, *args):
        return _AnimatSimPy.PolynomialGain_D(self, *args)

    def Copy(self, lpSource):
        return _AnimatSimPy.PolynomialGain_Copy(self, lpSource)

    def Clone(self):
        return _AnimatSimPy.PolynomialGain_Clone(self)

    def CalculateGain(self, fltInput):
        return _AnimatSimPy.PolynomialGain_CalculateGain(self, fltInput)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.PolynomialGain_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.PolynomialGain_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.PolynomialGain_Load(self, oXml)
PolynomialGain_swigregister = _AnimatSimPy.PolynomialGain_swigregister
PolynomialGain_swigregister(PolynomialGain)

def PolynomialGain_CastToDerived(lpBase):
    return _AnimatSimPy.PolynomialGain_CastToDerived(lpBase)
PolynomialGain_CastToDerived = _AnimatSimPy.PolynomialGain_CastToDerived

class SigmoidGain(Gain):
    __swig_setmethods__ = {}
    for _s in [Gain]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SigmoidGain, name, value)
    __swig_getmethods__ = {}
    for _s in [Gain]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SigmoidGain, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_SigmoidGain()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_SigmoidGain
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.SigmoidGain_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.SigmoidGain_CastToDerived)

    def A(self, *args):
        return _AnimatSimPy.SigmoidGain_A(self, *args)

    def B(self, *args):
        return _AnimatSimPy.SigmoidGain_B(self, *args)

    def C(self, *args):
        return _AnimatSimPy.SigmoidGain_C(self, *args)

    def D(self, *args):
        return _AnimatSimPy.SigmoidGain_D(self, *args)

    def Copy(self, lpSource):
        return _AnimatSimPy.SigmoidGain_Copy(self, lpSource)

    def Clone(self):
        return _AnimatSimPy.SigmoidGain_Clone(self)

    def CalculateGain(self, fltInput):
        return _AnimatSimPy.SigmoidGain_CalculateGain(self, fltInput)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.SigmoidGain_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.SigmoidGain_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.SigmoidGain_Load(self, oXml)
SigmoidGain_swigregister = _AnimatSimPy.SigmoidGain_swigregister
SigmoidGain_swigregister(SigmoidGain)

def SigmoidGain_CastToDerived(lpBase):
    return _AnimatSimPy.SigmoidGain_CastToDerived(lpBase)
SigmoidGain_CastToDerived = _AnimatSimPy.SigmoidGain_CastToDerived

class LengthTensionGain(Gain):
    __swig_setmethods__ = {}
    for _s in [Gain]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LengthTensionGain, name, value)
    __swig_getmethods__ = {}
    for _s in [Gain]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LengthTensionGain, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_LengthTensionGain()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_LengthTensionGain
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.LengthTensionGain_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.LengthTensionGain_CastToDerived)

    def RestingLength(self, *args):
        return _AnimatSimPy.LengthTensionGain_RestingLength(self, *args)

    def TLwidth(self, *args):
        return _AnimatSimPy.LengthTensionGain_TLwidth(self, *args)

    def TLc(self):
        return _AnimatSimPy.LengthTensionGain_TLc(self)

    def PeLengthPercentage(self, *args):
        return _AnimatSimPy.LengthTensionGain_PeLengthPercentage(self, *args)

    def MinPeLengthPercentage(self, *args):
        return _AnimatSimPy.LengthTensionGain_MinPeLengthPercentage(self, *args)

    def SeRestLength(self):
        return _AnimatSimPy.LengthTensionGain_SeRestLength(self)

    def MinPeLength(self):
        return _AnimatSimPy.LengthTensionGain_MinPeLength(self)

    def Copy(self, lpSource):
        return _AnimatSimPy.LengthTensionGain_Copy(self, lpSource)

    def Clone(self):
        return _AnimatSimPy.LengthTensionGain_Clone(self)

    def CalculateGain(self, fltInput):
        return _AnimatSimPy.LengthTensionGain_CalculateGain(self, fltInput)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.LengthTensionGain_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.LengthTensionGain_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.LengthTensionGain_Load(self, oXml)
LengthTensionGain_swigregister = _AnimatSimPy.LengthTensionGain_swigregister
LengthTensionGain_swigregister(LengthTensionGain)

def LengthTensionGain_CastToDerived(lpBase):
    return _AnimatSimPy.LengthTensionGain_CastToDerived(lpBase)
LengthTensionGain_CastToDerived = _AnimatSimPy.LengthTensionGain_CastToDerived

class Node(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_Node
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Node_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Node_CastToDerived)

    def Enabled(self, *args):
        return _AnimatSimPy.Node_Enabled(self, *args)

    def Kill(self, bState=True):
        return _AnimatSimPy.Node_Kill(self, bState)

    def Copy(self, lpSource):
        return _AnimatSimPy.Node_Copy(self, lpSource)

    def AddExternalNodeInput(self, iTargetDataType, fltInput):
        return _AnimatSimPy.Node_AddExternalNodeInput(self, iTargetDataType, fltInput)

    def GetTargetDataTypeIndex(self, strDataType):
        return _AnimatSimPy.Node_GetTargetDataTypeIndex(self, strDataType)

    def ResetSimulation(self):
        return _AnimatSimPy.Node_ResetSimulation(self)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify):
        return _AnimatSimPy.Node_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify)

    def VerifySystemPointers(self):
        return _AnimatSimPy.Node_VerifySystemPointers(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Node_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Node_QueryProperties(self, aryProperties)
Node_swigregister = _AnimatSimPy.Node_swigregister
Node_swigregister(Node)

def Node_CastToDerived(lpBase):
    return _AnimatSimPy.Node_CastToDerived(lpBase)
Node_CastToDerived = _AnimatSimPy.Node_CastToDerived

class Link(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Link, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Link, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Link()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Link
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Link_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Link_CastToDerived)

    def Enabled(self, *args):
        return _AnimatSimPy.Link_Enabled(self, *args)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify):
        return _AnimatSimPy.Link_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify)

    def VerifySystemPointers(self):
        return _AnimatSimPy.Link_VerifySystemPointers(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Link_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Link_QueryProperties(self, aryProperties)
Link_swigregister = _AnimatSimPy.Link_swigregister
Link_swigregister(Link)

def Link_CastToDerived(lpBase):
    return _AnimatSimPy.Link_CastToDerived(lpBase)
Link_CastToDerived = _AnimatSimPy.Link_CastToDerived

class IPhysicsMovableItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPhysicsMovableItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPhysicsMovableItem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_IPhysicsMovableItem
    __del__ = lambda self: None

    def SetVisible(self, bVisible):
        return _AnimatSimPy.IPhysicsMovableItem_SetVisible(self, bVisible)

    def SetAlpha(self):
        return _AnimatSimPy.IPhysicsMovableItem_SetAlpha(self)

    def Physics_SetParent(self, lpParent):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_SetParent(self, lpParent)

    def Physics_SetChild(self, lpChild):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_SetChild(self, lpChild)

    def Physics_UpdateMatrix(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_UpdateMatrix(self)

    def Physics_ResetGraphicsAndPhysics(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_ResetGraphicsAndPhysics(self)

    def Physics_PositionChanged(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_PositionChanged(self)

    def Physics_RotationChanged(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_RotationChanged(self)

    def Physics_UpdateAbsolutePosition(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_UpdateAbsolutePosition(self)

    def Physics_CollectData(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_CollectData(self)

    def Physics_CollectExtraData(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_CollectExtraData(self)

    def Physics_ResetSimulation(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_ResetSimulation(self)

    def Physics_AfterResetSimulation(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_AfterResetSimulation(self)

    def Physics_GetDataPointer(self, strDataType):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_GetDataPointer(self, strDataType)

    def Physics_Selected(self, bValue, bSelectMultiple):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_Selected(self, bValue, bSelectMultiple)

    def Physics_GetBoundingRadius(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_GetBoundingRadius(self)

    def Physics_GetBoundingBox(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_GetBoundingBox(self)

    def Physics_SetColor(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_SetColor(self)

    def Physics_TextureChanged(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_TextureChanged(self)

    def Physics_OrientNewPart(self, fltXPos, fltYPos, fltZPos, fltXNorm, fltYNorm, fltZNorm):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_OrientNewPart(self, fltXPos, fltYPos, fltZPos, fltXNorm, fltYNorm, fltZNorm)

    def Physics_SelectedVertex(self, fltXPos, fltYPos, fltZPos):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_SelectedVertex(self, fltXPos, fltYPos, fltZPos)

    def Physics_CalculateLocalPosForWorldPos(self, fltWorldX, fltWorldY, fltWorldZ, vLocalPos):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_CalculateLocalPosForWorldPos(self, fltWorldX, fltWorldY, fltWorldZ, vLocalPos)

    def Physics_Resize(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_Resize(self)

    def Physics_LoadLocalTransformMatrix(self, oXml):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_LoadLocalTransformMatrix(self, oXml)

    def Physics_SaveLocalTransformMatrix(self, oXml):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_SaveLocalTransformMatrix(self, oXml)

    def Physics_GetLocalTransformMatrixString(self):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_GetLocalTransformMatrixString(self)

    def Physics_ResizeDragHandler(self, fltRadius):
        return _AnimatSimPy.IPhysicsMovableItem_Physics_ResizeDragHandler(self, fltRadius)
IPhysicsMovableItem_swigregister = _AnimatSimPy.IPhysicsMovableItem_swigregister
IPhysicsMovableItem_swigregister(IPhysicsMovableItem)

class IPhysicsBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPhysicsBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPhysicsBody, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_IPhysicsBody
    __del__ = lambda self: None

    def Physics_IsDefined(self):
        return _AnimatSimPy.IPhysicsBody_Physics_IsDefined(self)

    def Physics_IsGeometryDefined(self):
        return _AnimatSimPy.IPhysicsBody_Physics_IsGeometryDefined(self)

    def Physics_SetFreeze(self, bVal):
        return _AnimatSimPy.IPhysicsBody_Physics_SetFreeze(self, bVal)

    def Physics_SetDensity(self, fltVal):
        return _AnimatSimPy.IPhysicsBody_Physics_SetDensity(self, fltVal)

    def Physics_GetDensity(self):
        return _AnimatSimPy.IPhysicsBody_Physics_GetDensity(self)

    def Physics_SetMass(self, fltVal):
        return _AnimatSimPy.IPhysicsBody_Physics_SetMass(self, fltVal)

    def Physics_GetMass(self):
        return _AnimatSimPy.IPhysicsBody_Physics_GetMass(self)

    def Physics_SetMaterialID(self, strID):
        return _AnimatSimPy.IPhysicsBody_Physics_SetMaterialID(self, strID)

    def Physics_SetVelocityDamping(self, fltLinear, fltAngular):
        return _AnimatSimPy.IPhysicsBody_Physics_SetVelocityDamping(self, fltLinear, fltAngular)

    def Physics_SetCenterOfMass(self, fltTx, fltTy, fltTz):
        return _AnimatSimPy.IPhysicsBody_Physics_SetCenterOfMass(self, fltTx, fltTy, fltTz)

    def Physics_UpdateNode(self):
        return _AnimatSimPy.IPhysicsBody_Physics_UpdateNode(self)

    def Physics_EnableCollision(self, lpBody):
        return _AnimatSimPy.IPhysicsBody_Physics_EnableCollision(self, lpBody)

    def Physics_DisableCollision(self, lpBody):
        return _AnimatSimPy.IPhysicsBody_Physics_DisableCollision(self, lpBody)

    def Physics_AddBodyForceAtLocalPos(self, fltPx, fltPy, fltPz, fltFx, fltFy, fltFz, bScaleUnits):
        return _AnimatSimPy.IPhysicsBody_Physics_AddBodyForceAtLocalPos(self, fltPx, fltPy, fltPz, fltFx, fltFy, fltFz, bScaleUnits)

    def Physics_AddBodyForceAtWorldPos(self, fltPx, fltPy, fltPz, fltFx, fltFy, fltFz, bScaleUnits):
        return _AnimatSimPy.IPhysicsBody_Physics_AddBodyForceAtWorldPos(self, fltPx, fltPy, fltPz, fltFx, fltFy, fltFz, bScaleUnits)

    def Physics_AddBodyTorque(self, fltTx, fltTy, fltTz, bScaleUnits):
        return _AnimatSimPy.IPhysicsBody_Physics_AddBodyTorque(self, fltTx, fltTy, fltTz, bScaleUnits)

    def Physics_GetVelocityAtPoint(self, x, y, z):
        return _AnimatSimPy.IPhysicsBody_Physics_GetVelocityAtPoint(self, x, y, z)

    def Physics_ResizeSelectedReceptiveFieldVertex(self):
        return _AnimatSimPy.IPhysicsBody_Physics_ResizeSelectedReceptiveFieldVertex(self)

    def Physics_FluidDataChanged(self):
        return _AnimatSimPy.IPhysicsBody_Physics_FluidDataChanged(self)

    def Physics_HasCollisionGeometry(self):
        return _AnimatSimPy.IPhysicsBody_Physics_HasCollisionGeometry(self)

    def Physics_WakeDynamics(self):
        return _AnimatSimPy.IPhysicsBody_Physics_WakeDynamics(self)

    def Physics_ContactSensorAdded(self, lpSensor):
        return _AnimatSimPy.IPhysicsBody_Physics_ContactSensorAdded(self, lpSensor)

    def Physics_ContactSensorRemoved(self):
        return _AnimatSimPy.IPhysicsBody_Physics_ContactSensorRemoved(self)

    def Physics_StepHydrodynamicSimulation(self):
        return _AnimatSimPy.IPhysicsBody_Physics_StepHydrodynamicSimulation(self)

    def Physics_ChildBodyAdded(self, lpChild):
        return _AnimatSimPy.IPhysicsBody_Physics_ChildBodyAdded(self, lpChild)

    def Physics_ChildBodyRemoved(self, bHasStaticJoint):
        return _AnimatSimPy.IPhysicsBody_Physics_ChildBodyRemoved(self, bHasStaticJoint)

    def Physics_DeleteStickyLock(self):
        return _AnimatSimPy.IPhysicsBody_Physics_DeleteStickyLock(self)
IPhysicsBody_swigregister = _AnimatSimPy.IPhysicsBody_swigregister
IPhysicsBody_swigregister(IPhysicsBody)

class BoundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Min"] = _AnimatSimPy.BoundingBox_Min_set
    __swig_getmethods__["Min"] = _AnimatSimPy.BoundingBox_Min_get
    if _newclass:
        Min = _swig_property(_AnimatSimPy.BoundingBox_Min_get, _AnimatSimPy.BoundingBox_Min_set)
    __swig_setmethods__["Max"] = _AnimatSimPy.BoundingBox_Max_set
    __swig_getmethods__["Max"] = _AnimatSimPy.BoundingBox_Max_get
    if _newclass:
        Max = _swig_property(_AnimatSimPy.BoundingBox_Max_get, _AnimatSimPy.BoundingBox_Max_set)

    def __init__(self):
        this = _AnimatSimPy.new_BoundingBox()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_BoundingBox
    __del__ = lambda self: None

    def Set(self, *args):
        return _AnimatSimPy.BoundingBox_Set(self, *args)

    def Length(self):
        return _AnimatSimPy.BoundingBox_Length(self)

    def Width(self):
        return _AnimatSimPy.BoundingBox_Width(self)

    def Height(self):
        return _AnimatSimPy.BoundingBox_Height(self)

    def GetDimensionSize(self, iAxis):
        return _AnimatSimPy.BoundingBox_GetDimensionSize(self, iAxis)

    def MaxDimension(self):
        return _AnimatSimPy.BoundingBox_MaxDimension(self)
BoundingBox_swigregister = _AnimatSimPy.BoundingBox_swigregister
BoundingBox_swigregister(BoundingBox)

class MovableItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MovableItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MovableItem, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_MovableItem()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_MovableItem
    __del__ = lambda self: None

    def Parent(self, *args):
        return _AnimatSimPy.MovableItem_Parent(self, *args)

    def VisualSelectionType(self):
        return _AnimatSimPy.MovableItem_VisualSelectionType(self)

    def AllowMouseManipulation(self):
        return _AnimatSimPy.MovableItem_AllowMouseManipulation(self)

    def Position(self, *args):
        return _AnimatSimPy.MovableItem_Position(self, *args)

    def AbsolutePosition(self, *args):
        return _AnimatSimPy.MovableItem_AbsolutePosition(self, *args)

    def ReportPosition(self, *args):
        return _AnimatSimPy.MovableItem_ReportPosition(self, *args)

    def ReportWorldPosition(self, *args):
        return _AnimatSimPy.MovableItem_ReportWorldPosition(self, *args)

    def UpdateAbsolutePosition(self):
        return _AnimatSimPy.MovableItem_UpdateAbsolutePosition(self)

    def GetCurrentPosition(self):
        return _AnimatSimPy.MovableItem_GetCurrentPosition(self)

    def Rotation(self, *args):
        return _AnimatSimPy.MovableItem_Rotation(self, *args)

    def ReportRotation(self, *args):
        return _AnimatSimPy.MovableItem_ReportRotation(self, *args)

    def LocalTransformationMatrixString(self):
        return _AnimatSimPy.MovableItem_LocalTransformationMatrixString(self)

    def IsVisible(self, *args):
        return _AnimatSimPy.MovableItem_IsVisible(self, *args)

    def GraphicsAlpha(self, *args):
        return _AnimatSimPy.MovableItem_GraphicsAlpha(self, *args)

    def CollisionsAlpha(self, *args):
        return _AnimatSimPy.MovableItem_CollisionsAlpha(self, *args)

    def JointsAlpha(self, *args):
        return _AnimatSimPy.MovableItem_JointsAlpha(self, *args)

    def ReceptiveFieldsAlpha(self, *args):
        return _AnimatSimPy.MovableItem_ReceptiveFieldsAlpha(self, *args)

    def SimulationAlpha(self, *args):
        return _AnimatSimPy.MovableItem_SimulationAlpha(self, *args)

    def Alpha(self, *args):
        return _AnimatSimPy.MovableItem_Alpha(self, *args)

    def Ambient(self, *args):
        return _AnimatSimPy.MovableItem_Ambient(self, *args)

    def Diffuse(self, *args):
        return _AnimatSimPy.MovableItem_Diffuse(self, *args)

    def Specular(self, *args):
        return _AnimatSimPy.MovableItem_Specular(self, *args)

    def Shininess(self, *args):
        return _AnimatSimPy.MovableItem_Shininess(self, *args)

    def Texture(self, *args):
        return _AnimatSimPy.MovableItem_Texture(self, *args)

    def SelectedVertex(self, *args):
        return _AnimatSimPy.MovableItem_SelectedVertex(self, *args)

    def Callback(self, *args):
        return _AnimatSimPy.MovableItem_Callback(self, *args)

    def PhysicsMovableItem(self, *args):
        return _AnimatSimPy.MovableItem_PhysicsMovableItem(self, *args)

    def GetBoundingRadius(self):
        return _AnimatSimPy.MovableItem_GetBoundingRadius(self)

    def GetBoundingBox(self):
        return _AnimatSimPy.MovableItem_GetBoundingBox(self)

    def SetBoundingBox(self, iIdx, fltVal):
        return _AnimatSimPy.MovableItem_SetBoundingBox(self, iIdx, fltVal)

    def AllowTranslateDragX(self):
        return _AnimatSimPy.MovableItem_AllowTranslateDragX(self)

    def AllowTranslateDragY(self):
        return _AnimatSimPy.MovableItem_AllowTranslateDragY(self)

    def AllowTranslateDragZ(self):
        return _AnimatSimPy.MovableItem_AllowTranslateDragZ(self)

    def AllowRotateDragX(self):
        return _AnimatSimPy.MovableItem_AllowRotateDragX(self)

    def AllowRotateDragY(self):
        return _AnimatSimPy.MovableItem_AllowRotateDragY(self)

    def AllowRotateDragZ(self):
        return _AnimatSimPy.MovableItem_AllowRotateDragZ(self)

    def UserDefinedDraggerRadius(self, *args):
        return _AnimatSimPy.MovableItem_UserDefinedDraggerRadius(self, *args)

    def IsSelected(self):
        return _AnimatSimPy.MovableItem_IsSelected(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.MovableItem_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.MovableItem_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.MovableItem_QueryProperties(self, aryProperties)

    def AddBodyClicked(self, fltPosX, fltPosY, fltPosZ, fltNormX, fltNormY, fltNormZ):
        return _AnimatSimPy.MovableItem_AddBodyClicked(self, fltPosX, fltPosY, fltPosZ, fltNormX, fltNormY, fltNormZ)

    def Selected(self, bValue, bSelectMultiple):
        return _AnimatSimPy.MovableItem_Selected(self, bValue, bSelectMultiple)

    def VisualSelectionModeChanged(self, iNewMode):
        return _AnimatSimPy.MovableItem_VisualSelectionModeChanged(self, iNewMode)

    def OrientNewPart(self, fltXPos, fltYPos, fltZPos, fltXNorm, fltYNorm, fltZNorm):
        return _AnimatSimPy.MovableItem_OrientNewPart(self, fltXPos, fltYPos, fltZPos, fltXNorm, fltYNorm, fltZNorm)

    def CalculateLocalPosForWorldPos(self, fltWorldX, fltWorldY, fltWorldZ, vLocalPos):
        return _AnimatSimPy.MovableItem_CalculateLocalPosForWorldPos(self, fltWorldX, fltWorldY, fltWorldZ, vLocalPos)

    def Load(self, oXml):
        return _AnimatSimPy.MovableItem_Load(self, oXml)
MovableItem_swigregister = _AnimatSimPy.MovableItem_swigregister
MovableItem_swigregister(MovableItem)

class BodyPart(Node, MovableItem):
    __swig_setmethods__ = {}
    for _s in [Node, MovableItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyPart, name, value)
    __swig_getmethods__ = {}
    for _s in [Node, MovableItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BodyPart, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_BodyPart
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.BodyPart_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.BodyPart_CastToDerived)

    def PhysicsBody(self, *args):
        return _AnimatSimPy.BodyPart_PhysicsBody(self, *args)

    def GetRobotPartInterfaces(self):
        return _AnimatSimPy.BodyPart_GetRobotPartInterfaces(self)

    def AddRobotPartInterface(self, lpPart):
        return _AnimatSimPy.BodyPart_AddRobotPartInterface(self, lpPart)

    def RemoveRobotPartInterface(self, lpPart):
        return _AnimatSimPy.BodyPart_RemoveRobotPartInterface(self, lpPart)

    def FindRobotPartListIndex(self, strID, bThrowError=True):
        return _AnimatSimPy.BodyPart_FindRobotPartListIndex(self, strID, bThrowError)

    def SynchWithRobot(self, *args):
        return _AnimatSimPy.BodyPart_SynchWithRobot(self, *args)

    def SynchUpdateInterval(self, *args):
        return _AnimatSimPy.BodyPart_SynchUpdateInterval(self, *args)

    def Resize(self):
        return _AnimatSimPy.BodyPart_Resize(self)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify):
        return _AnimatSimPy.BodyPart_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.BodyPart_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.BodyPart_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.BodyPart_QueryProperties(self, aryProperties)

    def UpdateExtraData(self):
        return _AnimatSimPy.BodyPart_UpdateExtraData(self)

    def NeedsRobotSynch(self):
        return _AnimatSimPy.BodyPart_NeedsRobotSynch(self)

    def Initialize(self):
        return _AnimatSimPy.BodyPart_Initialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.BodyPart_ResetSimulation(self)

    def TimeStepModified(self):
        return _AnimatSimPy.BodyPart_TimeStepModified(self)

    def Selected(self, bValue, bSelectMultiple):
        return _AnimatSimPy.BodyPart_Selected(self, bValue, bSelectMultiple)

    def AddBodyClicked(self, fltPosX, fltPosY, fltPosZ, fltNormX, fltNormY, fltNormZ):
        return _AnimatSimPy.BodyPart_AddBodyClicked(self, fltPosX, fltPosY, fltPosZ, fltNormX, fltNormY, fltNormZ)

    def VisualSelectionModeChanged(self, iNewMode):
        return _AnimatSimPy.BodyPart_VisualSelectionModeChanged(self, iNewMode)

    def UpdatePhysicsPosFromGraphics(self):
        return _AnimatSimPy.BodyPart_UpdatePhysicsPosFromGraphics(self)

    def WakeDynamics(self):
        return _AnimatSimPy.BodyPart_WakeDynamics(self)

    def Load(self, oXml):
        return _AnimatSimPy.BodyPart_Load(self, oXml)
BodyPart_swigregister = _AnimatSimPy.BodyPart_swigregister
BodyPart_swigregister(BodyPart)

def BodyPart_CastToDerived(lpBase):
    return _AnimatSimPy.BodyPart_CastToDerived(lpBase)
BodyPart_CastToDerived = _AnimatSimPy.BodyPart_CastToDerived

class ReceptiveFieldPair(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReceptiveFieldPair, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReceptiveFieldPair, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ReceptiveFieldPair()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ReceptiveFieldPair
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ReceptiveFieldPair_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ReceptiveFieldPair_CastToDerived)

    def FieldID(self, *args):
        return _AnimatSimPy.ReceptiveFieldPair_FieldID(self, *args)

    def TargetNodeID(self, *args):
        return _AnimatSimPy.ReceptiveFieldPair_TargetNodeID(self, *args)

    def Field(self):
        return _AnimatSimPy.ReceptiveFieldPair_Field(self)

    def Initialize(self):
        return _AnimatSimPy.ReceptiveFieldPair_Initialize(self)

    def StepSimulation(self):
        return _AnimatSimPy.ReceptiveFieldPair_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.ReceptiveFieldPair_Load(self, oXml)
ReceptiveFieldPair_swigregister = _AnimatSimPy.ReceptiveFieldPair_swigregister
ReceptiveFieldPair_swigregister(ReceptiveFieldPair)

def ReceptiveFieldPair_CastToDerived(lpBase):
    return _AnimatSimPy.ReceptiveFieldPair_CastToDerived(lpBase)
ReceptiveFieldPair_CastToDerived = _AnimatSimPy.ReceptiveFieldPair_CastToDerived


_AnimatSimPy.NoDelayBuffer_swigconstant(_AnimatSimPy)
NoDelayBuffer = _AnimatSimPy.NoDelayBuffer

_AnimatSimPy.DelayBufferInSimOnly_swigconstant(_AnimatSimPy)
DelayBufferInSimOnly = _AnimatSimPy.DelayBufferInSimOnly

_AnimatSimPy.DelayBufferAlwaysOn_swigconstant(_AnimatSimPy)
DelayBufferAlwaysOn = _AnimatSimPy.DelayBufferAlwaysOn
class Adapter(Node):
    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adapter, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adapter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Adapter()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Adapter
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Adapter_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Adapter_CastToDerived)

    def SourceModule(self, *args):
        return _AnimatSimPy.Adapter_SourceModule(self, *args)

    def SourceID(self, *args):
        return _AnimatSimPy.Adapter_SourceID(self, *args)

    def SourceDataType(self, *args):
        return _AnimatSimPy.Adapter_SourceDataType(self, *args)

    def SourceNode(self):
        return _AnimatSimPy.Adapter_SourceNode(self)

    def TargetModule(self, *args):
        return _AnimatSimPy.Adapter_TargetModule(self, *args)

    def TargetID(self, *args):
        return _AnimatSimPy.Adapter_TargetID(self, *args)

    def TargetDataType(self, *args):
        return _AnimatSimPy.Adapter_TargetDataType(self, *args)

    def TargetNode(self):
        return _AnimatSimPy.Adapter_TargetNode(self)

    def GetGain(self):
        return _AnimatSimPy.Adapter_GetGain(self)

    def SetGain(self, lpGain):
        return _AnimatSimPy.Adapter_SetGain(self, lpGain)

    def ConnectedToPhysics(self):
        return _AnimatSimPy.Adapter_ConnectedToPhysics(self)

    def DelayBufferMode(self, *args):
        return _AnimatSimPy.Adapter_DelayBufferMode(self, *args)

    def DelayBufferInterval(self, *args):
        return _AnimatSimPy.Adapter_DelayBufferInterval(self, *args)

    def DetachAdaptersFromSimulation(self):
        return _AnimatSimPy.Adapter_DetachAdaptersFromSimulation(self)

    def RobotIOScale(self, *args):
        return _AnimatSimPy.Adapter_RobotIOScale(self, *args)

    def SynchWithRobot(self, *args):
        return _AnimatSimPy.Adapter_SynchWithRobot(self, *args)

    def SynchUpdateInterval(self, *args):
        return _AnimatSimPy.Adapter_SynchUpdateInterval(self, *args)

    def SynchUpdateStartInterval(self, *args):
        return _AnimatSimPy.Adapter_SynchUpdateStartInterval(self, *args)

    def InitIODisableDuration(self, *args):
        return _AnimatSimPy.Adapter_InitIODisableDuration(self, *args)

    def Initialize(self):
        return _AnimatSimPy.Adapter_Initialize(self)

    def TimeStepModified(self):
        return _AnimatSimPy.Adapter_TimeStepModified(self)

    def ResetSimulation(self):
        return _AnimatSimPy.Adapter_ResetSimulation(self)

    def AddExternalNodeInput(self, iTargetDataType, fltInput):
        return _AnimatSimPy.Adapter_AddExternalNodeInput(self, iTargetDataType, fltInput)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Adapter_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Adapter_QueryProperties(self, aryProperties)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.Adapter_GetDataPointer(self, strDataType)

    def StepSimulation(self):
        return _AnimatSimPy.Adapter_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.Adapter_Load(self, oXml)
Adapter_swigregister = _AnimatSimPy.Adapter_swigregister
Adapter_swigregister(Adapter)

def Adapter_CastToDerived(lpBase):
    return _AnimatSimPy.Adapter_CastToDerived(lpBase)
Adapter_CastToDerived = _AnimatSimPy.Adapter_CastToDerived

class PropertyControlAdapter(Adapter):
    __swig_setmethods__ = {}
    for _s in [Adapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyControlAdapter, name, value)
    __swig_getmethods__ = {}
    for _s in [Adapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyControlAdapter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_PropertyControlAdapter()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_PropertyControlAdapter
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.PropertyControlAdapter_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.PropertyControlAdapter_CastToDerived)

    def TargetObject(self):
        return _AnimatSimPy.PropertyControlAdapter_TargetObject(self)

    def TargetID(self, strID):
        return _AnimatSimPy.PropertyControlAdapter_TargetID(self, strID)

    def PropertyName(self, *args):
        return _AnimatSimPy.PropertyControlAdapter_PropertyName(self, *args)

    def SetThreshold(self, *args):
        return _AnimatSimPy.PropertyControlAdapter_SetThreshold(self, *args)

    def InitialValue(self, *args):
        return _AnimatSimPy.PropertyControlAdapter_InitialValue(self, *args)

    def FinalValue(self, *args):
        return _AnimatSimPy.PropertyControlAdapter_FinalValue(self, *args)

    def Initialize(self):
        return _AnimatSimPy.PropertyControlAdapter_Initialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.PropertyControlAdapter_ResetSimulation(self)

    def SimStarting(self):
        return _AnimatSimPy.PropertyControlAdapter_SimStarting(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.PropertyControlAdapter_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.PropertyControlAdapter_QueryProperties(self, aryProperties)

    def StepSimulation(self):
        return _AnimatSimPy.PropertyControlAdapter_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.PropertyControlAdapter_Load(self, oXml)
PropertyControlAdapter_swigregister = _AnimatSimPy.PropertyControlAdapter_swigregister
PropertyControlAdapter_swigregister(PropertyControlAdapter)

def PropertyControlAdapter_CastToDerived(lpBase):
    return _AnimatSimPy.PropertyControlAdapter_CastToDerived(lpBase)
PropertyControlAdapter_CastToDerived = _AnimatSimPy.PropertyControlAdapter_CastToDerived

class ContactAdapter(Adapter):
    __swig_setmethods__ = {}
    for _s in [Adapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactAdapter, name, value)
    __swig_getmethods__ = {}
    for _s in [Adapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactAdapter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ContactAdapter()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ContactAdapter
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ContactAdapter_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ContactAdapter_CastToDerived)

    def SourceBodyID(self, *args):
        return _AnimatSimPy.ContactAdapter_SourceBodyID(self, *args)

    def SourceModule(self):
        return _AnimatSimPy.ContactAdapter_SourceModule(self)

    def TargetModule(self, *args):
        return _AnimatSimPy.ContactAdapter_TargetModule(self, *args)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.ContactAdapter_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.ContactAdapter_RemoveItem(self, strItemType, strID, bThrowError)

    def Initialize(self):
        return _AnimatSimPy.ContactAdapter_Initialize(self)

    def StepSimulation(self):
        return _AnimatSimPy.ContactAdapter_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.ContactAdapter_Load(self, oXml)
ContactAdapter_swigregister = _AnimatSimPy.ContactAdapter_swigregister
ContactAdapter_swigregister(ContactAdapter)

def ContactAdapter_CastToDerived(lpBase):
    return _AnimatSimPy.ContactAdapter_CastToDerived(lpBase)
ContactAdapter_CastToDerived = _AnimatSimPy.ContactAdapter_CastToDerived

class ConstraintLimit(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstraintLimit, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstraintLimit, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_ConstraintLimit
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ConstraintLimit_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ConstraintLimit_CastToDerived)

    def LimitPos(self, *args):
        return _AnimatSimPy.ConstraintLimit_LimitPos(self, *args)

    def SetLimitPos(self):
        return _AnimatSimPy.ConstraintLimit_SetLimitPos(self)

    def Damping(self, *args):
        return _AnimatSimPy.ConstraintLimit_Damping(self, *args)

    def Restitution(self, *args):
        return _AnimatSimPy.ConstraintLimit_Restitution(self, *args)

    def Stiffness(self, *args):
        return _AnimatSimPy.ConstraintLimit_Stiffness(self, *args)

    def Color(self, *args):
        return _AnimatSimPy.ConstraintLimit_Color(self, *args)

    def Alpha(self, *args):
        return _AnimatSimPy.ConstraintLimit_Alpha(self, *args)

    def IsLowerLimit(self, *args):
        return _AnimatSimPy.ConstraintLimit_IsLowerLimit(self, *args)

    def IsShowPosition(self, *args):
        return _AnimatSimPy.ConstraintLimit_IsShowPosition(self, *args)

    def SetSystemPointers(self, *args):
        return _AnimatSimPy.ConstraintLimit_SetSystemPointers(self, *args)

    def VerifySystemPointers(self):
        return _AnimatSimPy.ConstraintLimit_VerifySystemPointers(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.ConstraintLimit_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.ConstraintLimit_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.ConstraintLimit_QueryProperties(self, aryProperties)

    def Load(self, oXml, strName):
        return _AnimatSimPy.ConstraintLimit_Load(self, oXml, strName)

    def SetupGraphics(self):
        return _AnimatSimPy.ConstraintLimit_SetupGraphics(self)

    def DeleteGraphics(self):
        return _AnimatSimPy.ConstraintLimit_DeleteGraphics(self)
ConstraintLimit_swigregister = _AnimatSimPy.ConstraintLimit_swigregister
ConstraintLimit_swigregister(ConstraintLimit)

def ConstraintLimit_CastToDerived(lpBase):
    return _AnimatSimPy.ConstraintLimit_CastToDerived(lpBase)
ConstraintLimit_CastToDerived = _AnimatSimPy.ConstraintLimit_CastToDerived

class ConstraintRelaxation(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstraintRelaxation, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstraintRelaxation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_ConstraintRelaxation
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ConstraintRelaxation_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ConstraintRelaxation_CastToDerived)

    def CoordinateID(self, *args):
        return _AnimatSimPy.ConstraintRelaxation_CoordinateID(self, *args)

    def Enabled(self, *args):
        return _AnimatSimPy.ConstraintRelaxation_Enabled(self, *args)

    def Stiffness(self, *args):
        return _AnimatSimPy.ConstraintRelaxation_Stiffness(self, *args)

    def Damping(self, *args):
        return _AnimatSimPy.ConstraintRelaxation_Damping(self, *args)

    def CreateDefaultUnits(self):
        return _AnimatSimPy.ConstraintRelaxation_CreateDefaultUnits(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.ConstraintRelaxation_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.ConstraintRelaxation_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.ConstraintRelaxation_Load(self, oXml)
ConstraintRelaxation_swigregister = _AnimatSimPy.ConstraintRelaxation_swigregister
ConstraintRelaxation_swigregister(ConstraintRelaxation)

def ConstraintRelaxation_CastToDerived(lpBase):
    return _AnimatSimPy.ConstraintRelaxation_CastToDerived(lpBase)
ConstraintRelaxation_CastToDerived = _AnimatSimPy.ConstraintRelaxation_CastToDerived

class ConstraintFriction(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstraintFriction, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstraintFriction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_ConstraintFriction
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ConstraintFriction_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ConstraintFriction_CastToDerived)

    def Enabled(self, *args):
        return _AnimatSimPy.ConstraintFriction_Enabled(self, *args)

    def Coefficient(self, *args):
        return _AnimatSimPy.ConstraintFriction_Coefficient(self, *args)

    def MaxForce(self, *args):
        return _AnimatSimPy.ConstraintFriction_MaxForce(self, *args)

    def Loss(self, *args):
        return _AnimatSimPy.ConstraintFriction_Loss(self, *args)

    def Proportional(self, *args):
        return _AnimatSimPy.ConstraintFriction_Proportional(self, *args)

    def StaticFrictionScale(self, *args):
        return _AnimatSimPy.ConstraintFriction_StaticFrictionScale(self, *args)

    def CreateDefaultUnits(self):
        return _AnimatSimPy.ConstraintFriction_CreateDefaultUnits(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.ConstraintFriction_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.ConstraintFriction_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.ConstraintFriction_Load(self, oXml)
ConstraintFriction_swigregister = _AnimatSimPy.ConstraintFriction_swigregister
ConstraintFriction_swigregister(ConstraintFriction)

def ConstraintFriction_CastToDerived(lpBase):
    return _AnimatSimPy.ConstraintFriction_CastToDerived(lpBase)
ConstraintFriction_CastToDerived = _AnimatSimPy.ConstraintFriction_CastToDerived

class Joint(BodyPart):
    __swig_setmethods__ = {}
    for _s in [BodyPart]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Joint, name, value)
    __swig_getmethods__ = {}
    for _s in [BodyPart]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Joint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Joint()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Joint
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Joint_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Joint_CastToDerived)

    def UsesRadians(self):
        return _AnimatSimPy.Joint_UsesRadians(self)

    def Size(self, *args):
        return _AnimatSimPy.Joint_Size(self, *args)

    def EnableLimits(self, *args):
        return _AnimatSimPy.Joint_EnableLimits(self, *args)

    def Relaxation1(self, *args):
        return _AnimatSimPy.Joint_Relaxation1(self, *args)

    def Relaxation2(self, *args):
        return _AnimatSimPy.Joint_Relaxation2(self, *args)

    def Relaxation3(self, *args):
        return _AnimatSimPy.Joint_Relaxation3(self, *args)

    def Relaxation4(self, *args):
        return _AnimatSimPy.Joint_Relaxation4(self, *args)

    def Relaxation5(self, *args):
        return _AnimatSimPy.Joint_Relaxation5(self, *args)

    def Relaxation6(self, *args):
        return _AnimatSimPy.Joint_Relaxation6(self, *args)

    def Friction(self, *args):
        return _AnimatSimPy.Joint_Friction(self, *args)

    def GetPositionWithinLimits(self, fltPos):
        return _AnimatSimPy.Joint_GetPositionWithinLimits(self, fltPos)

    def GetLimitRange(self):
        return _AnimatSimPy.Joint_GetLimitRange(self)

    def VisualSelectionType(self):
        return _AnimatSimPy.Joint_VisualSelectionType(self)

    def Child(self, *args):
        return _AnimatSimPy.Joint_Child(self, *args)

    def JointPosition(self, *args):
        return _AnimatSimPy.Joint_JointPosition(self, *args)

    def JointVelocity(self, *args):
        return _AnimatSimPy.Joint_JointVelocity(self, *args)

    def JointForce(self, *args):
        return _AnimatSimPy.Joint_JointForce(self, *args)

    def WakeDynamics(self):
        return _AnimatSimPy.Joint_WakeDynamics(self)

    def CreateJoint(self):
        return _AnimatSimPy.Joint_CreateJoint(self)

    def UpdatePhysicsPosFromGraphics(self):
        return _AnimatSimPy.Joint_UpdatePhysicsPosFromGraphics(self)

    def Initialize(self):
        return _AnimatSimPy.Joint_Initialize(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.Joint_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Joint_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Joint_QueryProperties(self, aryProperties)

    def AddExternalNodeInput(self, iTargetDataType, fltInput):
        return _AnimatSimPy.Joint_AddExternalNodeInput(self, iTargetDataType, fltInput)

    def ResetSimulation(self):
        return _AnimatSimPy.Joint_ResetSimulation(self)

    def AfterResetSimulation(self):
        return _AnimatSimPy.Joint_AfterResetSimulation(self)

    def StepSimulation(self):
        return _AnimatSimPy.Joint_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.Joint_Load(self, oXml)
Joint_swigregister = _AnimatSimPy.Joint_swigregister
Joint_swigregister(Joint)

def Joint_CastToDerived(lpBase):
    return _AnimatSimPy.Joint_CastToDerived(lpBase)
Joint_CastToDerived = _AnimatSimPy.Joint_CastToDerived


_AnimatSimPy.VelocityControl_swigconstant(_AnimatSimPy)
VelocityControl = _AnimatSimPy.VelocityControl

_AnimatSimPy.PositionControl_swigconstant(_AnimatSimPy)
PositionControl = _AnimatSimPy.PositionControl

_AnimatSimPy.PositionVelocityControl_swigconstant(_AnimatSimPy)
PositionVelocityControl = _AnimatSimPy.PositionVelocityControl
class MotorizedJoint(Joint):
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MotorizedJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MotorizedJoint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_MotorizedJoint()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_MotorizedJoint
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.MotorizedJoint_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.MotorizedJoint_CastToDerived)

    def PhysicsMotorJoint(self, *args):
        return _AnimatSimPy.MotorizedJoint_PhysicsMotorJoint(self, *args)

    def EnableMotor(self, *args):
        return _AnimatSimPy.MotorizedJoint_EnableMotor(self, *args)

    def MotorType(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorType(self, *args)

    def ServoGain(self, *args):
        return _AnimatSimPy.MotorizedJoint_ServoGain(self, *args)

    def MaxForce(self, *args):
        return _AnimatSimPy.MotorizedJoint_MaxForce(self, *args)

    def MaxForceNotScaled(self):
        return _AnimatSimPy.MotorizedJoint_MaxForceNotScaled(self)

    def MaxVelocity(self, *args):
        return _AnimatSimPy.MotorizedJoint_MaxVelocity(self, *args)

    def DesiredPosition(self, *args):
        return _AnimatSimPy.MotorizedJoint_DesiredPosition(self, *args)

    def SetPosition(self, *args):
        return _AnimatSimPy.MotorizedJoint_SetPosition(self, *args)

    def PrevSetPosition(self, *args):
        return _AnimatSimPy.MotorizedJoint_PrevSetPosition(self, *args)

    def ReachedSetPosition(self, *args):
        return _AnimatSimPy.MotorizedJoint_ReachedSetPosition(self, *args)

    def DesiredVelocity(self, *args):
        return _AnimatSimPy.MotorizedJoint_DesiredVelocity(self, *args)

    def SetVelocity(self, *args):
        return _AnimatSimPy.MotorizedJoint_SetVelocity(self, *args)

    def PrevSetVelocity(self, *args):
        return _AnimatSimPy.MotorizedJoint_PrevSetVelocity(self, *args)

    def PrevVelocity(self, *args):
        return _AnimatSimPy.MotorizedJoint_PrevVelocity(self, *args)

    def AssistCountdown(self, *args):
        return _AnimatSimPy.MotorizedJoint_AssistCountdown(self, *args)

    def MotorForceToA(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorForceToA(self, *args)

    def MotorForceToAMagnitude(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorForceToAMagnitude(self, *args)

    def MotorAssistForceToA(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorAssistForceToA(self, *args)

    def MotorAssistForceToAReport(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorAssistForceToAReport(self, *args)

    def MotorForceToB(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorForceToB(self, *args)

    def MotorForceToBMagnitude(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorForceToBMagnitude(self, *args)

    def MotorAssistForceToB(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorAssistForceToB(self, *args)

    def MotorAssistForceToBReport(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorAssistForceToBReport(self, *args)

    def MotorTorqueToA(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorTorqueToA(self, *args)

    def MotorTorqueToAMagnitude(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorTorqueToAMagnitude(self, *args)

    def MotorAssistTorqueToA(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorAssistTorqueToA(self, *args)

    def MotorAssistTorqueToAReport(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorAssistTorqueToAReport(self, *args)

    def MotorTorqueToB(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorTorqueToB(self, *args)

    def MotorTorqueToBMagnitude(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorTorqueToBMagnitude(self, *args)

    def MotorAssistTorqueToB(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorAssistTorqueToB(self, *args)

    def MotorAssistTorqueToBReport(self, *args):
        return _AnimatSimPy.MotorizedJoint_MotorAssistTorqueToBReport(self, *args)

    def AssistPid(self):
        return _AnimatSimPy.MotorizedJoint_AssistPid(self)

    def Temperature(self, *args):
        return _AnimatSimPy.MotorizedJoint_Temperature(self, *args)

    def Voltage(self, *args):
        return _AnimatSimPy.MotorizedJoint_Voltage(self, *args)

    def MotorInput(self, fltInput):
        return _AnimatSimPy.MotorizedJoint_MotorInput(self, fltInput)

    def RobotMotorControl(self, *args):
        return _AnimatSimPy.MotorizedJoint_RobotMotorControl(self, *args)

    def SetVelocityToDesired(self):
        return _AnimatSimPy.MotorizedJoint_SetVelocityToDesired(self)

    def EnableLock(self, bOn, fltPosition, fltMaxLockForce):
        return _AnimatSimPy.MotorizedJoint_EnableLock(self, bOn, fltPosition, fltMaxLockForce)

    def Initialize(self):
        return _AnimatSimPy.MotorizedJoint_Initialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.MotorizedJoint_ResetSimulation(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.MotorizedJoint_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.MotorizedJoint_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.MotorizedJoint_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.MotorizedJoint_Load(self, oXml)
MotorizedJoint_swigregister = _AnimatSimPy.MotorizedJoint_swigregister
MotorizedJoint_swigregister(MotorizedJoint)

def MotorizedJoint_CastToDerived(lpBase):
    return _AnimatSimPy.MotorizedJoint_CastToDerived(lpBase)
MotorizedJoint_CastToDerived = _AnimatSimPy.MotorizedJoint_CastToDerived

class BallSocket(Joint):
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BallSocket, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BallSocket, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_BallSocket()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_BallSocket
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.BallSocket_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.BallSocket_CastToDerived)

    def CylinderRadius(self):
        return _AnimatSimPy.BallSocket_CylinderRadius(self)

    def CylinderHeight(self):
        return _AnimatSimPy.BallSocket_CylinderHeight(self)

    def BallRadius(self):
        return _AnimatSimPy.BallSocket_BallRadius(self)

    def Load(self, oXml):
        return _AnimatSimPy.BallSocket_Load(self, oXml)
BallSocket_swigregister = _AnimatSimPy.BallSocket_swigregister
BallSocket_swigregister(BallSocket)

def BallSocket_CastToDerived(lpBase):
    return _AnimatSimPy.BallSocket_CastToDerived(lpBase)
BallSocket_CastToDerived = _AnimatSimPy.BallSocket_CastToDerived

class Hinge(MotorizedJoint):
    __swig_setmethods__ = {}
    for _s in [MotorizedJoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hinge, name, value)
    __swig_getmethods__ = {}
    for _s in [MotorizedJoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hinge, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Hinge()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Hinge
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Hinge_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Hinge_CastToDerived)

    def CylinderRadius(self):
        return _AnimatSimPy.Hinge_CylinderRadius(self)

    def CylinderHeight(self):
        return _AnimatSimPy.Hinge_CylinderHeight(self)

    def FlapWidth(self):
        return _AnimatSimPy.Hinge_FlapWidth(self)

    def Enabled(self, bValue):
        return _AnimatSimPy.Hinge_Enabled(self, bValue)

    def UpperLimit(self):
        return _AnimatSimPy.Hinge_UpperLimit(self)

    def LowerLimit(self):
        return _AnimatSimPy.Hinge_LowerLimit(self)

    def GetPositionWithinLimits(self, fltPos):
        return _AnimatSimPy.Hinge_GetPositionWithinLimits(self, fltPos)

    def GetLimitRange(self):
        return _AnimatSimPy.Hinge_GetLimitRange(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Hinge_SetData(self, strDataType, strValue, bThrowError)

    def AddExternalNodeInput(self, iTargetDataType, fltInput):
        return _AnimatSimPy.Hinge_AddExternalNodeInput(self, iTargetDataType, fltInput)

    def GetTargetDataTypeIndex(self, strDataType):
        return _AnimatSimPy.Hinge_GetTargetDataTypeIndex(self, strDataType)

    def UpdateData(self):
        return _AnimatSimPy.Hinge_UpdateData(self)

    def ResetSimulation(self):
        return _AnimatSimPy.Hinge_ResetSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.Hinge_Load(self, oXml)
Hinge_swigregister = _AnimatSimPy.Hinge_swigregister
Hinge_swigregister(Hinge)

def Hinge_CastToDerived(lpBase):
    return _AnimatSimPy.Hinge_CastToDerived(lpBase)
Hinge_CastToDerived = _AnimatSimPy.Hinge_CastToDerived

class Prismatic(MotorizedJoint):
    __swig_setmethods__ = {}
    for _s in [MotorizedJoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Prismatic, name, value)
    __swig_getmethods__ = {}
    for _s in [MotorizedJoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Prismatic, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Prismatic()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Prismatic
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Prismatic_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Prismatic_CastToDerived)

    def CylinderRadius(self):
        return _AnimatSimPy.Prismatic_CylinderRadius(self)

    def BoxSize(self):
        return _AnimatSimPy.Prismatic_BoxSize(self)

    def Enabled(self, bValue):
        return _AnimatSimPy.Prismatic_Enabled(self, bValue)

    def UpperLimit(self):
        return _AnimatSimPy.Prismatic_UpperLimit(self)

    def LowerLimit(self):
        return _AnimatSimPy.Prismatic_LowerLimit(self)

    def GetPositionWithinLimits(self, fltPos):
        return _AnimatSimPy.Prismatic_GetPositionWithinLimits(self, fltPos)

    def GetLimitRange(self):
        return _AnimatSimPy.Prismatic_GetLimitRange(self)

    def UsesRadians(self):
        return _AnimatSimPy.Prismatic_UsesRadians(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Prismatic_SetData(self, strDataType, strValue, bThrowError)

    def AddExternalNodeInput(self, iTargetDataType, fltInput):
        return _AnimatSimPy.Prismatic_AddExternalNodeInput(self, iTargetDataType, fltInput)

    def GetTargetDataTypeIndex(self, strDataType):
        return _AnimatSimPy.Prismatic_GetTargetDataTypeIndex(self, strDataType)

    def Load(self, oXml):
        return _AnimatSimPy.Prismatic_Load(self, oXml)
Prismatic_swigregister = _AnimatSimPy.Prismatic_swigregister
Prismatic_swigregister(Prismatic)

def Prismatic_CastToDerived(lpBase):
    return _AnimatSimPy.Prismatic_CastToDerived(lpBase)
Prismatic_CastToDerived = _AnimatSimPy.Prismatic_CastToDerived

class LinearJoint(Joint):
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearJoint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_LinearJoint()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_LinearJoint
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.LinearJoint_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.LinearJoint_CastToDerived)

    def LinearType(self, *args):
        return _AnimatSimPy.LinearJoint_LinearType(self, *args)

    def PlaneWidth(self):
        return _AnimatSimPy.LinearJoint_PlaneWidth(self)

    def PlaneSize(self):
        return _AnimatSimPy.LinearJoint_PlaneSize(self)

    def CylinderRadius(self):
        return _AnimatSimPy.LinearJoint_CylinderRadius(self)

    def CylinderHeight(self):
        return _AnimatSimPy.LinearJoint_CylinderHeight(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.LinearJoint_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.LinearJoint_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.LinearJoint_Load(self, oXml)
LinearJoint_swigregister = _AnimatSimPy.LinearJoint_swigregister
LinearJoint_swigregister(LinearJoint)

def LinearJoint_CastToDerived(lpBase):
    return _AnimatSimPy.LinearJoint_CastToDerived(lpBase)
LinearJoint_CastToDerived = _AnimatSimPy.LinearJoint_CastToDerived

class RPRO(Joint):
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RPRO, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RPRO, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_RPRO()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_RPRO
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.RPRO_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.RPRO_CastToDerived)

    def CylinderRadius(self):
        return _AnimatSimPy.RPRO_CylinderRadius(self)

    def CylinderHeight(self):
        return _AnimatSimPy.RPRO_CylinderHeight(self)

    def BallRadius(self):
        return _AnimatSimPy.RPRO_BallRadius(self)

    def Load(self, oXml):
        return _AnimatSimPy.RPRO_Load(self, oXml)
RPRO_swigregister = _AnimatSimPy.RPRO_swigregister
RPRO_swigregister(RPRO)

def RPRO_CastToDerived(lpBase):
    return _AnimatSimPy.RPRO_CastToDerived(lpBase)
RPRO_CastToDerived = _AnimatSimPy.RPRO_CastToDerived

class ContactSensor(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactSensor, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactSensor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ContactSensor()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ContactSensor
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ContactSensor_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ContactSensor_CastToDerived)

    def FieldGain(self):
        return _AnimatSimPy.ContactSensor_FieldGain(self)

    def CurrentGain(self):
        return _AnimatSimPy.ContactSensor_CurrentGain(self)

    def GetReceptiveField(self, iIndex):
        return _AnimatSimPy.ContactSensor_GetReceptiveField(self, iIndex)

    def FindReceptiveField(self, fltX, fltY, fltZ, iIndex):
        return _AnimatSimPy.ContactSensor_FindReceptiveField(self, fltX, fltY, fltZ, iIndex)

    def FindClosestReceptiveField(self, fltX, fltY, fltZ):
        return _AnimatSimPy.ContactSensor_FindClosestReceptiveField(self, fltX, fltY, fltZ)

    def FinishedAddingVertices(self):
        return _AnimatSimPy.ContactSensor_FinishedAddingVertices(self)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.ContactSensor_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.ContactSensor_RemoveItem(self, strItemType, strID, bThrowError)

    def ClearCurrents(self):
        return _AnimatSimPy.ContactSensor_ClearCurrents(self)

    def ProcessContact(self, vPos, fltForceMagnitude):
        return _AnimatSimPy.ContactSensor_ProcessContact(self, vPos, fltForceMagnitude)

    def Load(self, oXml):
        return _AnimatSimPy.ContactSensor_Load(self, oXml)
ContactSensor_swigregister = _AnimatSimPy.ContactSensor_swigregister
ContactSensor_swigregister(ContactSensor)

def ContactSensor_CastToDerived(lpBase):
    return _AnimatSimPy.ContactSensor_CastToDerived(lpBase)
ContactSensor_CastToDerived = _AnimatSimPy.ContactSensor_CastToDerived

class Odor(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Odor, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Odor, name)
    __repr__ = _swig_repr

    def __init__(self, lpParent):
        this = _AnimatSimPy.new_Odor(lpParent)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Odor
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Odor_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Odor_CastToDerived)

    def Enabled(self, *args):
        return _AnimatSimPy.Odor_Enabled(self, *args)

    def SetOdorType(self, strType):
        return _AnimatSimPy.Odor_SetOdorType(self, strType)

    def GetOdorType(self):
        return _AnimatSimPy.Odor_GetOdorType(self)

    def Quantity(self, *args):
        return _AnimatSimPy.Odor_Quantity(self, *args)

    def UseFoodQuantity(self, *args):
        return _AnimatSimPy.Odor_UseFoodQuantity(self, *args)

    def CalculateOdorValue(self, lpType, oSensorPos):
        return _AnimatSimPy.Odor_CalculateOdorValue(self, lpType, oSensorPos)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Odor_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Odor_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Odor_Load(self, oXml)
Odor_swigregister = _AnimatSimPy.Odor_swigregister
Odor_swigregister(Odor)

def Odor_CastToDerived(lpBase):
    return _AnimatSimPy.Odor_CastToDerived(lpBase)
Odor_CastToDerived = _AnimatSimPy.Odor_CastToDerived

class OdorType(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdorType, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OdorType, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_OdorType()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_OdorType
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.OdorType_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.OdorType_CastToDerived)

    def DiffusionConstant(self, *args):
        return _AnimatSimPy.OdorType_DiffusionConstant(self, *args)

    def FindOdorSource(self, strOdorID, bThrowError=True):
        return _AnimatSimPy.OdorType_FindOdorSource(self, strOdorID, bThrowError)

    def AddOdorSource(self, lpOdor):
        return _AnimatSimPy.OdorType_AddOdorSource(self, lpOdor)

    def CalculateOdorValue(self, oSensorPos):
        return _AnimatSimPy.OdorType_CalculateOdorValue(self, oSensorPos)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.OdorType_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.OdorType_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.OdorType_Load(self, oXml)
OdorType_swigregister = _AnimatSimPy.OdorType_swigregister
OdorType_swigregister(OdorType)

def OdorType_CastToDerived(lpBase):
    return _AnimatSimPy.OdorType_CastToDerived(lpBase)
OdorType_CastToDerived = _AnimatSimPy.OdorType_CastToDerived

class RigidBody(BodyPart):
    __swig_setmethods__ = {}
    for _s in [BodyPart]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidBody, name, value)
    __swig_getmethods__ = {}
    for _s in [BodyPart]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigidBody, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_RigidBody()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_RigidBody
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.RigidBody_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.RigidBody_CastToDerived)

    def Position(self, *args):
        return _AnimatSimPy.RigidBody_Position(self, *args)

    def VisualSelectionType(self):
        return _AnimatSimPy.RigidBody_VisualSelectionType(self)

    def CenterOfMassWithStaticChildren(self):
        return _AnimatSimPy.RigidBody_CenterOfMassWithStaticChildren(self)

    def CenterOfMass(self, *args):
        return _AnimatSimPy.RigidBody_CenterOfMass(self, *args)

    def ChildParts(self):
        return _AnimatSimPy.RigidBody_ChildParts(self)

    def JointToParent(self, *args):
        return _AnimatSimPy.RigidBody_JointToParent(self, *args)

    def GetContactSensor(self):
        return _AnimatSimPy.RigidBody_GetContactSensor(self)

    def Density(self, *args):
        return _AnimatSimPy.RigidBody_Density(self, *args)

    def Mass(self, *args):
        return _AnimatSimPy.RigidBody_Mass(self, *args)

    def MassWithChildren(self):
        return _AnimatSimPy.RigidBody_MassWithChildren(self)

    def Volume(self, *args):
        return _AnimatSimPy.RigidBody_Volume(self, *args)

    def Freeze(self, *args):
        return _AnimatSimPy.RigidBody_Freeze(self, *args)

    def IsContactSensor(self, *args):
        return _AnimatSimPy.RigidBody_IsContactSensor(self, *args)

    def IsCollisionObject(self, *args):
        return _AnimatSimPy.RigidBody_IsCollisionObject(self, *args)

    def IsStickyPart(self, *args):
        return _AnimatSimPy.RigidBody_IsStickyPart(self, *args)

    def StickyOn(self, *args):
        return _AnimatSimPy.RigidBody_StickyOn(self, *args)

    def StickyChild(self, *args):
        return _AnimatSimPy.RigidBody_StickyChild(self, *args)

    def IsRoot(self):
        return _AnimatSimPy.RigidBody_IsRoot(self)

    def HasStaticJoint(self):
        return _AnimatSimPy.RigidBody_HasStaticJoint(self)

    def HasStaticChildren(self):
        return _AnimatSimPy.RigidBody_HasStaticChildren(self)

    def StaticChildrenMass(self):
        return _AnimatSimPy.RigidBody_StaticChildrenMass(self)

    def IsFoodSource(self, *args):
        return _AnimatSimPy.RigidBody_IsFoodSource(self, *args)

    def FoodQuantity(self, *args):
        return _AnimatSimPy.RigidBody_FoodQuantity(self, *args)

    def FoodEaten(self, *args):
        return _AnimatSimPy.RigidBody_FoodEaten(self, *args)

    def FoodReplenishRate(self, *args):
        return _AnimatSimPy.RigidBody_FoodReplenishRate(self, *args)

    def FoodEnergyContent(self, *args):
        return _AnimatSimPy.RigidBody_FoodEnergyContent(self, *args)

    def MaxFoodQuantity(self, *args):
        return _AnimatSimPy.RigidBody_MaxFoodQuantity(self, *args)

    def LinearVelocityDamping(self, *args):
        return _AnimatSimPy.RigidBody_LinearVelocityDamping(self, *args)

    def AngularVelocityDamping(self, *args):
        return _AnimatSimPy.RigidBody_AngularVelocityDamping(self, *args)

    def MaterialID(self, *args):
        return _AnimatSimPy.RigidBody_MaterialID(self, *args)

    def BuoyancyCenter(self, *args):
        return _AnimatSimPy.RigidBody_BuoyancyCenter(self, *args)

    def BuoyancyScale(self, *args):
        return _AnimatSimPy.RigidBody_BuoyancyScale(self, *args)

    def LinearDrag(self, *args):
        return _AnimatSimPy.RigidBody_LinearDrag(self, *args)

    def AngularDrag(self, *args):
        return _AnimatSimPy.RigidBody_AngularDrag(self, *args)

    def MaxHydroForce(self, *args):
        return _AnimatSimPy.RigidBody_MaxHydroForce(self, *args)

    def MaxHydroTorque(self, *args):
        return _AnimatSimPy.RigidBody_MaxHydroTorque(self, *args)

    def Magnus(self, *args):
        return _AnimatSimPy.RigidBody_Magnus(self, *args)

    def EnableFluids(self, *args):
        return _AnimatSimPy.RigidBody_EnableFluids(self, *args)

    def HasCollisionGeometry(self):
        return _AnimatSimPy.RigidBody_HasCollisionGeometry(self)

    def DisplayDebugCollisionGraphic(self, *args):
        return _AnimatSimPy.RigidBody_DisplayDebugCollisionGraphic(self, *args)

    def GetExclusionCollisionSet(self):
        return _AnimatSimPy.RigidBody_GetExclusionCollisionSet(self)

    def FindCollisionExclusionBody(self, lpBody, bThrowError=True):
        return _AnimatSimPy.RigidBody_FindCollisionExclusionBody(self, lpBody, bThrowError)

    def SurfaceContactCount(self):
        return _AnimatSimPy.RigidBody_SurfaceContactCount(self)

    def Eat(self, fltBiteSize, lTimeSlice):
        return _AnimatSimPy.RigidBody_Eat(self, fltBiteSize, lTimeSlice)

    def AddSurfaceContact(self, lpContactedSurface):
        return _AnimatSimPy.RigidBody_AddSurfaceContact(self, lpContactedSurface)

    def RemoveSurfaceContact(self, lpContactedSurface):
        return _AnimatSimPy.RigidBody_RemoveSurfaceContact(self, lpContactedSurface)

    def SetSurfaceContactCount(self, iCount):
        return _AnimatSimPy.RigidBody_SetSurfaceContactCount(self, iCount)

    def AddForceAtLocalPos(self, fltPx, fltPy, fltPz, fltFx, fltFy, fltFz, bScaleUnits):
        return _AnimatSimPy.RigidBody_AddForceAtLocalPos(self, fltPx, fltPy, fltPz, fltFx, fltFy, fltFz, bScaleUnits)

    def AddForceAtWorldPos(self, fltPx, fltPy, fltPz, fltFx, fltFy, fltFz, bScaleUnits):
        return _AnimatSimPy.RigidBody_AddForceAtWorldPos(self, fltPx, fltPy, fltPz, fltFx, fltFy, fltFz, bScaleUnits)

    def AddTorque(self, fltTx, fltTy, fltTz, bScaleUnits):
        return _AnimatSimPy.RigidBody_AddTorque(self, fltTx, fltTy, fltTz, bScaleUnits)

    def GetVelocityAtPoint(self, x, y, z):
        return _AnimatSimPy.RigidBody_GetVelocityAtPoint(self, x, y, z)

    def GetMassValueWithStaticChildren(self):
        return _AnimatSimPy.RigidBody_GetMassValueWithStaticChildren(self)

    def GetDensity(self):
        return _AnimatSimPy.RigidBody_GetDensity(self)

    def GetMass(self):
        return _AnimatSimPy.RigidBody_GetMass(self)

    def GetVolume(self):
        return _AnimatSimPy.RigidBody_GetVolume(self)

    def UpdatePhysicsPosFromGraphics(self):
        return _AnimatSimPy.RigidBody_UpdatePhysicsPosFromGraphics(self)

    def UpdateChildPhysicsPosFromGraphics(self):
        return _AnimatSimPy.RigidBody_UpdateChildPhysicsPosFromGraphics(self)

    def ParentWithCollisionGeometry(self):
        return _AnimatSimPy.RigidBody_ParentWithCollisionGeometry(self)

    def EnableCollision(self, lpBody):
        return _AnimatSimPy.RigidBody_EnableCollision(self, lpBody)

    def DisableCollision(self, lpBody):
        return _AnimatSimPy.RigidBody_DisableCollision(self, lpBody)

    def CreateParts(self):
        return _AnimatSimPy.RigidBody_CreateParts(self)

    def CreateChildParts(self):
        return _AnimatSimPy.RigidBody_CreateChildParts(self)

    def CreateJoints(self):
        return _AnimatSimPy.RigidBody_CreateJoints(self)

    def CreateChildJoints(self):
        return _AnimatSimPy.RigidBody_CreateChildJoints(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.RigidBody_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.RigidBody_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.RigidBody_QueryProperties(self, aryProperties)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.RigidBody_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.RigidBody_RemoveItem(self, strItemType, strID, bThrowError)

    def SimPausing(self):
        return _AnimatSimPy.RigidBody_SimPausing(self)

    def GetTargetDataTypeIndex(self, strDataType):
        return _AnimatSimPy.RigidBody_GetTargetDataTypeIndex(self, strDataType)

    def AddExternalNodeInput(self, iTargetDataType, fltInput):
        return _AnimatSimPy.RigidBody_AddExternalNodeInput(self, iTargetDataType, fltInput)

    def StepSimulation(self):
        return _AnimatSimPy.RigidBody_StepSimulation(self)

    def ResetSimulation(self):
        return _AnimatSimPy.RigidBody_ResetSimulation(self)

    def AfterResetSimulation(self):
        return _AnimatSimPy.RigidBody_AfterResetSimulation(self)

    def Kill(self, bState=True):
        return _AnimatSimPy.RigidBody_Kill(self, bState)

    def Load(self, oXml):
        return _AnimatSimPy.RigidBody_Load(self, oXml)
RigidBody_swigregister = _AnimatSimPy.RigidBody_swigregister
RigidBody_swigregister(RigidBody)

def RigidBody_CastToDerived(lpBase):
    return _AnimatSimPy.RigidBody_CastToDerived(lpBase)
RigidBody_CastToDerived = _AnimatSimPy.RigidBody_CastToDerived

class Plane(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plane, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Plane, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Plane()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Plane
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Plane_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Plane_CastToDerived)

    def CornerX(self):
        return _AnimatSimPy.Plane_CornerX(self)

    def CornerY(self):
        return _AnimatSimPy.Plane_CornerY(self)

    def GridX(self):
        return _AnimatSimPy.Plane_GridX(self)

    def GridY(self):
        return _AnimatSimPy.Plane_GridY(self)

    def Size(self, *args):
        return _AnimatSimPy.Plane_Size(self, *args)

    def WidthSegments(self, *args):
        return _AnimatSimPy.Plane_WidthSegments(self, *args)

    def LengthSegments(self, *args):
        return _AnimatSimPy.Plane_LengthSegments(self, *args)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Plane_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Plane_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Plane_Load(self, oXml)
Plane_swigregister = _AnimatSimPy.Plane_swigregister
Plane_swigregister(Plane)

def Plane_CastToDerived(lpBase):
    return _AnimatSimPy.Plane_CastToDerived(lpBase)
Plane_CastToDerived = _AnimatSimPy.Plane_CastToDerived

class FluidPlane(Plane):
    __swig_setmethods__ = {}
    for _s in [Plane]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FluidPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Plane]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FluidPlane, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_FluidPlane()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_FluidPlane
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.FluidPlane_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.FluidPlane_CastToDerived)

    def AllowRotateDragX(self):
        return _AnimatSimPy.FluidPlane_AllowRotateDragX(self)

    def AllowRotateDragY(self):
        return _AnimatSimPy.FluidPlane_AllowRotateDragY(self)

    def AllowRotateDragZ(self):
        return _AnimatSimPy.FluidPlane_AllowRotateDragZ(self)

    def Height(self):
        return _AnimatSimPy.FluidPlane_Height(self)

    def Velocity(self, *args):
        return _AnimatSimPy.FluidPlane_Velocity(self, *args)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.FluidPlane_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.FluidPlane_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.FluidPlane_Load(self, oXml)
FluidPlane_swigregister = _AnimatSimPy.FluidPlane_swigregister
FluidPlane_swigregister(FluidPlane)

def FluidPlane_CastToDerived(lpBase):
    return _AnimatSimPy.FluidPlane_CastToDerived(lpBase)
FluidPlane_CastToDerived = _AnimatSimPy.FluidPlane_CastToDerived

class Cylinder(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cylinder, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Cylinder()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Cylinder
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Cylinder_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Cylinder_CastToDerived)

    def Radius(self, *args):
        return _AnimatSimPy.Cylinder_Radius(self, *args)

    def Height(self, *args):
        return _AnimatSimPy.Cylinder_Height(self, *args)

    def Sides(self, *args):
        return _AnimatSimPy.Cylinder_Sides(self, *args)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Cylinder_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Cylinder_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Cylinder_Load(self, oXml)
Cylinder_swigregister = _AnimatSimPy.Cylinder_swigregister
Cylinder_swigregister(Cylinder)

def Cylinder_CastToDerived(lpBase):
    return _AnimatSimPy.Cylinder_CastToDerived(lpBase)
Cylinder_CastToDerived = _AnimatSimPy.Cylinder_CastToDerived

class Cone(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cone, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cone, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Cone()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Cone
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Cone_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Cone_CastToDerived)

    def LowerRadius(self, *args):
        return _AnimatSimPy.Cone_LowerRadius(self, *args)

    def UpperRadius(self, *args):
        return _AnimatSimPy.Cone_UpperRadius(self, *args)

    def Height(self, *args):
        return _AnimatSimPy.Cone_Height(self, *args)

    def Sides(self, *args):
        return _AnimatSimPy.Cone_Sides(self, *args)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Cone_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Cone_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Cone_Load(self, oXml)
Cone_swigregister = _AnimatSimPy.Cone_swigregister
Cone_swigregister(Cone)

def Cone_CastToDerived(lpBase):
    return _AnimatSimPy.Cone_CastToDerived(lpBase)
Cone_CastToDerived = _AnimatSimPy.Cone_CastToDerived

class Ellipsoid(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ellipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ellipsoid, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Ellipsoid()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Ellipsoid
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Ellipsoid_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Ellipsoid_CastToDerived)

    def MajorRadius(self, *args):
        return _AnimatSimPy.Ellipsoid_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        return _AnimatSimPy.Ellipsoid_MinorRadius(self, *args)

    def LatSegments(self, *args):
        return _AnimatSimPy.Ellipsoid_LatSegments(self, *args)

    def LongSegments(self, *args):
        return _AnimatSimPy.Ellipsoid_LongSegments(self, *args)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Ellipsoid_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Ellipsoid_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Ellipsoid_Load(self, oXml)
Ellipsoid_swigregister = _AnimatSimPy.Ellipsoid_swigregister
Ellipsoid_swigregister(Ellipsoid)

def Ellipsoid_CastToDerived(lpBase):
    return _AnimatSimPy.Ellipsoid_CastToDerived(lpBase)
Ellipsoid_CastToDerived = _AnimatSimPy.Ellipsoid_CastToDerived

class Torus(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Torus, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Torus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Torus()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Torus
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Torus_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Torus_CastToDerived)

    def OutsideRadius(self, *args):
        return _AnimatSimPy.Torus_OutsideRadius(self, *args)

    def InsideRadius(self, *args):
        return _AnimatSimPy.Torus_InsideRadius(self, *args)

    def Sides(self, *args):
        return _AnimatSimPy.Torus_Sides(self, *args)

    def Rings(self, *args):
        return _AnimatSimPy.Torus_Rings(self, *args)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Torus_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Torus_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Torus_Load(self, oXml)
Torus_swigregister = _AnimatSimPy.Torus_swigregister
Torus_swigregister(Torus)

def Torus_CastToDerived(lpBase):
    return _AnimatSimPy.Torus_CastToDerived(lpBase)
Torus_CastToDerived = _AnimatSimPy.Torus_CastToDerived

class Box(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Box()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Box
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Box_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Box_CastToDerived)

    def Length(self, *args):
        return _AnimatSimPy.Box_Length(self, *args)

    def Width(self, *args):
        return _AnimatSimPy.Box_Width(self, *args)

    def Height(self, *args):
        return _AnimatSimPy.Box_Height(self, *args)

    def LengthSections(self, *args):
        return _AnimatSimPy.Box_LengthSections(self, *args)

    def WidthSections(self, *args):
        return _AnimatSimPy.Box_WidthSections(self, *args)

    def HeightSections(self, *args):
        return _AnimatSimPy.Box_HeightSections(self, *args)

    def LengthSegmentSize(self):
        return _AnimatSimPy.Box_LengthSegmentSize(self)

    def WidthSegmentSize(self):
        return _AnimatSimPy.Box_WidthSegmentSize(self)

    def HeightSegmentSize(self):
        return _AnimatSimPy.Box_HeightSegmentSize(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Box_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Box_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Box_Load(self, oXml)
Box_swigregister = _AnimatSimPy.Box_swigregister
Box_swigregister(Box)

def Box_CastToDerived(lpBase):
    return _AnimatSimPy.Box_CastToDerived(lpBase)
Box_CastToDerived = _AnimatSimPy.Box_CastToDerived

class Mesh(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Mesh()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Mesh
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Mesh_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Mesh_CastToDerived)

    def MeshFile(self, *args):
        return _AnimatSimPy.Mesh_MeshFile(self, *args)

    def CollisionMeshType(self, *args):
        return _AnimatSimPy.Mesh_CollisionMeshType(self, *args)

    def ConvexMeshFile(self, *args):
        return _AnimatSimPy.Mesh_ConvexMeshFile(self, *args)

    def SetMeshFile(self, strXml):
        return _AnimatSimPy.Mesh_SetMeshFile(self, strXml)

    def SetBoundingBox(self, iIdx, fltVal):
        return _AnimatSimPy.Mesh_SetBoundingBox(self, iIdx, fltVal)

    def Scale(self, *args):
        return _AnimatSimPy.Mesh_Scale(self, *args)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.Mesh_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Mesh_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Mesh_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Mesh_Load(self, oXml)
Mesh_swigregister = _AnimatSimPy.Mesh_swigregister
Mesh_swigregister(Mesh)

def Mesh_CastToDerived(lpBase):
    return _AnimatSimPy.Mesh_CastToDerived(lpBase)
Mesh_CastToDerived = _AnimatSimPy.Mesh_CastToDerived

class Terrain(Mesh):
    __swig_setmethods__ = {}
    for _s in [Mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Terrain, name, value)
    __swig_getmethods__ = {}
    for _s in [Mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Terrain, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Terrain()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Terrain
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Terrain_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Terrain_CastToDerived)

    def AllowRotateDragX(self):
        return _AnimatSimPy.Terrain_AllowRotateDragX(self)

    def AllowRotateDragY(self):
        return _AnimatSimPy.Terrain_AllowRotateDragY(self)

    def AllowRotateDragZ(self):
        return _AnimatSimPy.Terrain_AllowRotateDragZ(self)

    def SegmentWidth(self, *args):
        return _AnimatSimPy.Terrain_SegmentWidth(self, *args)

    def SegmentLength(self, *args):
        return _AnimatSimPy.Terrain_SegmentLength(self, *args)

    def MaxHeight(self, *args):
        return _AnimatSimPy.Terrain_MaxHeight(self, *args)

    def TextureLengthSegments(self, *args):
        return _AnimatSimPy.Terrain_TextureLengthSegments(self, *args)

    def TextureWidthSegments(self, *args):
        return _AnimatSimPy.Terrain_TextureWidthSegments(self, *args)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Terrain_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Terrain_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Terrain_Load(self, oXml)
Terrain_swigregister = _AnimatSimPy.Terrain_swigregister
Terrain_swigregister(Terrain)

def Terrain_CastToDerived(lpBase):
    return _AnimatSimPy.Terrain_CastToDerived(lpBase)
Terrain_CastToDerived = _AnimatSimPy.Terrain_CastToDerived

class Sensor(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sensor, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sensor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Sensor()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Sensor
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Sensor_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Sensor_CastToDerived)

    def Radius(self, *args):
        return _AnimatSimPy.Sensor_Radius(self, *args)

    def LatitudeSegments(self, *args):
        return _AnimatSimPy.Sensor_LatitudeSegments(self, *args)

    def LongtitudeSegments(self, *args):
        return _AnimatSimPy.Sensor_LongtitudeSegments(self, *args)

    def AllowRotateDragX(self):
        return _AnimatSimPy.Sensor_AllowRotateDragX(self)

    def AllowRotateDragY(self):
        return _AnimatSimPy.Sensor_AllowRotateDragY(self)

    def AllowRotateDragZ(self):
        return _AnimatSimPy.Sensor_AllowRotateDragZ(self)

    def CreateParts(self):
        return _AnimatSimPy.Sensor_CreateParts(self)

    def CreateJoints(self):
        return _AnimatSimPy.Sensor_CreateJoints(self)

    def HasStaticJoint(self):
        return _AnimatSimPy.Sensor_HasStaticJoint(self)

    def Initialize(self):
        return _AnimatSimPy.Sensor_Initialize(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Sensor_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Sensor_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Sensor_Load(self, oXml)
Sensor_swigregister = _AnimatSimPy.Sensor_swigregister
Sensor_swigregister(Sensor)

def Sensor_CastToDerived(lpBase):
    return _AnimatSimPy.Sensor_CastToDerived(lpBase)
Sensor_CastToDerived = _AnimatSimPy.Sensor_CastToDerived

class Attachment(Sensor):
    __swig_setmethods__ = {}
    for _s in [Sensor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attachment, name, value)
    __swig_getmethods__ = {}
    for _s in [Sensor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Attachment, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Attachment()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Attachment
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Attachment_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Attachment_CastToDerived)
Attachment_swigregister = _AnimatSimPy.Attachment_swigregister
Attachment_swigregister(Attachment)

def Attachment_CastToDerived(lpBase):
    return _AnimatSimPy.Attachment_CastToDerived(lpBase)
Attachment_CastToDerived = _AnimatSimPy.Attachment_CastToDerived

class LineBase(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineBase, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_LineBase()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_LineBase
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.LineBase_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.LineBase_CastToDerived)

    def Enabled(self, bValue):
        return _AnimatSimPy.LineBase_Enabled(self, bValue)

    def Length(self):
        return _AnimatSimPy.LineBase_Length(self)

    def PrevLength(self):
        return _AnimatSimPy.LineBase_PrevLength(self)

    def HasStaticJoint(self):
        return _AnimatSimPy.LineBase_HasStaticJoint(self)

    def AllowMouseManipulation(self):
        return _AnimatSimPy.LineBase_AllowMouseManipulation(self)

    def Position(self, oPoint, bUseScaling=True, bFireChangeEvent=False, bUpdateMatrix=True):
        return _AnimatSimPy.LineBase_Position(self, oPoint, bUseScaling, bFireChangeEvent, bUpdateMatrix)

    def AbsolutePosition(self, oPoint):
        return _AnimatSimPy.LineBase_AbsolutePosition(self, oPoint)

    def OrientNewPart(self, fltXPos, fltYPos, fltZPos, fltXNorm, fltYNorm, fltZNorm):
        return _AnimatSimPy.LineBase_OrientNewPart(self, fltXPos, fltYPos, fltZPos, fltXNorm, fltYNorm, fltZNorm)

    def AttachmentPoints(self, *args):
        return _AnimatSimPy.LineBase_AttachmentPoints(self, *args)

    def Resize(self):
        return _AnimatSimPy.LineBase_Resize(self)

    def CalculateLength(self):
        return _AnimatSimPy.LineBase_CalculateLength(self)

    def AfterResetSimulation(self):
        return _AnimatSimPy.LineBase_AfterResetSimulation(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.LineBase_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.LineBase_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.LineBase_QueryProperties(self, aryProperties)

    def CreateParts(self):
        return _AnimatSimPy.LineBase_CreateParts(self)

    def CreateJoints(self):
        return _AnimatSimPy.LineBase_CreateJoints(self)

    def Load(self, oXml):
        return _AnimatSimPy.LineBase_Load(self, oXml)
LineBase_swigregister = _AnimatSimPy.LineBase_swigregister
LineBase_swigregister(LineBase)

def LineBase_CastToDerived(lpBase):
    return _AnimatSimPy.LineBase_CastToDerived(lpBase)
LineBase_CastToDerived = _AnimatSimPy.LineBase_CastToDerived

class MuscleBase(LineBase):
    __swig_setmethods__ = {}
    for _s in [LineBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleBase, name, value)
    __swig_getmethods__ = {}
    for _s in [LineBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_MuscleBase
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.MuscleBase_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.MuscleBase_CastToDerived)

    def Tension(self, *args):
        return _AnimatSimPy.MuscleBase_Tension(self, *args)

    def MaxTension(self, *args):
        return _AnimatSimPy.MuscleBase_MaxTension(self, *args)

    def Vm(self):
        return _AnimatSimPy.MuscleBase_Vm(self)

    def Tdot(self):
        return _AnimatSimPy.MuscleBase_Tdot(self)

    def PrevTension(self):
        return _AnimatSimPy.MuscleBase_PrevTension(self)

    def Enabled(self, *args):
        return _AnimatSimPy.MuscleBase_Enabled(self, *args)

    def StimTension(self, *args):
        return _AnimatSimPy.MuscleBase_StimTension(self, *args)

    def LengthTension(self, *args):
        return _AnimatSimPy.MuscleBase_LengthTension(self, *args)

    def CalculateInverseDynamics(self, fltLength, fltVelocity, fltT, fltVm, fltA):
        return _AnimatSimPy.MuscleBase_CalculateInverseDynamics(self, fltLength, fltVelocity, fltT, fltVm, fltA)

    def AddExternalNodeInput(self, iTargetDataType, fltInput):
        return _AnimatSimPy.MuscleBase_AddExternalNodeInput(self, iTargetDataType, fltInput)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify):
        return _AnimatSimPy.MuscleBase_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify)

    def VerifySystemPointers(self):
        return _AnimatSimPy.MuscleBase_VerifySystemPointers(self)

    def ResetSimulation(self):
        return _AnimatSimPy.MuscleBase_ResetSimulation(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.MuscleBase_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.MuscleBase_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.MuscleBase_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.MuscleBase_Load(self, oXml)
MuscleBase_swigregister = _AnimatSimPy.MuscleBase_swigregister
MuscleBase_swigregister(MuscleBase)

def MuscleBase_CastToDerived(lpBase):
    return _AnimatSimPy.MuscleBase_CastToDerived(lpBase)
MuscleBase_CastToDerived = _AnimatSimPy.MuscleBase_CastToDerived

class LinearHillMuscle(MuscleBase):
    __swig_setmethods__ = {}
    for _s in [MuscleBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearHillMuscle, name, value)
    __swig_getmethods__ = {}
    for _s in [MuscleBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearHillMuscle, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_LinearHillMuscle()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_LinearHillMuscle
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.LinearHillMuscle_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.LinearHillMuscle_CastToDerived)

    def Kse(self, *args):
        return _AnimatSimPy.LinearHillMuscle_Kse(self, *args)

    def Kpe(self, *args):
        return _AnimatSimPy.LinearHillMuscle_Kpe(self, *args)

    def B(self, *args):
        return _AnimatSimPy.LinearHillMuscle_B(self, *args)

    def RestingLength(self, *args):
        return _AnimatSimPy.LinearHillMuscle_RestingLength(self, *args)

    def IbDischargeConstant(self, *args):
        return _AnimatSimPy.LinearHillMuscle_IbDischargeConstant(self, *args)

    def SeLength(self):
        return _AnimatSimPy.LinearHillMuscle_SeLength(self)

    def PeLength(self):
        return _AnimatSimPy.LinearHillMuscle_PeLength(self)

    def Displacement(self):
        return _AnimatSimPy.LinearHillMuscle_Displacement(self)

    def DisplacementRatio(self):
        return _AnimatSimPy.LinearHillMuscle_DisplacementRatio(self)

    def TL(self):
        return _AnimatSimPy.LinearHillMuscle_TL(self)

    def Act(self):
        return _AnimatSimPy.LinearHillMuscle_Act(self)

    def A(self):
        return _AnimatSimPy.LinearHillMuscle_A(self)

    def InternalTension(self):
        return _AnimatSimPy.LinearHillMuscle_InternalTension(self)

    def Vmuscle(self):
        return _AnimatSimPy.LinearHillMuscle_Vmuscle(self)

    def Enabled(self, bVal):
        return _AnimatSimPy.LinearHillMuscle_Enabled(self, bVal)

    def CalculateInverseDynamics(self, fltLength, fltVelocity, fltT, fltVm, fltA):
        return _AnimatSimPy.LinearHillMuscle_CalculateInverseDynamics(self, fltLength, fltVelocity, fltT, fltVm, fltA)

    def ResetSimulation(self):
        return _AnimatSimPy.LinearHillMuscle_ResetSimulation(self)

    def AfterResetSimulation(self):
        return _AnimatSimPy.LinearHillMuscle_AfterResetSimulation(self)

    def CreateJoints(self):
        return _AnimatSimPy.LinearHillMuscle_CreateJoints(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.LinearHillMuscle_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.LinearHillMuscle_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.LinearHillMuscle_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.LinearHillMuscle_Load(self, oXml)
LinearHillMuscle_swigregister = _AnimatSimPy.LinearHillMuscle_swigregister
LinearHillMuscle_swigregister(LinearHillMuscle)

def LinearHillMuscle_CastToDerived(lpBase):
    return _AnimatSimPy.LinearHillMuscle_CastToDerived(lpBase)
LinearHillMuscle_CastToDerived = _AnimatSimPy.LinearHillMuscle_CastToDerived

class LinearHillStretchReceptor(LinearHillMuscle):
    __swig_setmethods__ = {}
    for _s in [LinearHillMuscle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearHillStretchReceptor, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearHillMuscle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearHillStretchReceptor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_LinearHillStretchReceptor()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_LinearHillStretchReceptor
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.LinearHillStretchReceptor_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.LinearHillStretchReceptor_CastToDerived)

    def ApplyTension(self, *args):
        return _AnimatSimPy.LinearHillStretchReceptor_ApplyTension(self, *args)

    def IaDischargeConstant(self, *args):
        return _AnimatSimPy.LinearHillStretchReceptor_IaDischargeConstant(self, *args)

    def IIDischargeConstant(self, *args):
        return _AnimatSimPy.LinearHillStretchReceptor_IIDischargeConstant(self, *args)

    def IaRate(self):
        return _AnimatSimPy.LinearHillStretchReceptor_IaRate(self)

    def IIRate(self):
        return _AnimatSimPy.LinearHillStretchReceptor_IIRate(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.LinearHillStretchReceptor_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.LinearHillStretchReceptor_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.LinearHillStretchReceptor_QueryProperties(self, aryProperties)

    def ResetSimulation(self):
        return _AnimatSimPy.LinearHillStretchReceptor_ResetSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.LinearHillStretchReceptor_Load(self, oXml)
LinearHillStretchReceptor_swigregister = _AnimatSimPy.LinearHillStretchReceptor_swigregister
LinearHillStretchReceptor_swigregister(LinearHillStretchReceptor)

def LinearHillStretchReceptor_CastToDerived(lpBase):
    return _AnimatSimPy.LinearHillStretchReceptor_CastToDerived(lpBase)
LinearHillStretchReceptor_CastToDerived = _AnimatSimPy.LinearHillStretchReceptor_CastToDerived

class OdorSensor(Sensor):
    __swig_setmethods__ = {}
    for _s in [Sensor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdorSensor, name, value)
    __swig_getmethods__ = {}
    for _s in [Sensor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OdorSensor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_OdorSensor()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_OdorSensor
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.OdorSensor_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.OdorSensor_CastToDerived)

    def OdorTypeID(self, *args):
        return _AnimatSimPy.OdorSensor_OdorTypeID(self, *args)

    def ResetSimulation(self):
        return _AnimatSimPy.OdorSensor_ResetSimulation(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.OdorSensor_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.OdorSensor_QueryProperties(self, aryProperties)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.OdorSensor_GetDataPointer(self, strDataType)

    def StepSimulation(self):
        return _AnimatSimPy.OdorSensor_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.OdorSensor_Load(self, oXml)
OdorSensor_swigregister = _AnimatSimPy.OdorSensor_swigregister
OdorSensor_swigregister(OdorSensor)

def OdorSensor_CastToDerived(lpBase):
    return _AnimatSimPy.OdorSensor_CastToDerived(lpBase)
OdorSensor_CastToDerived = _AnimatSimPy.OdorSensor_CastToDerived

class Sphere(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sphere, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sphere, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Sphere()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Sphere
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Sphere_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Sphere_CastToDerived)

    def Radius(self, *args):
        return _AnimatSimPy.Sphere_Radius(self, *args)

    def LatitudeSegments(self, *args):
        return _AnimatSimPy.Sphere_LatitudeSegments(self, *args)

    def LongtitudeSegments(self, *args):
        return _AnimatSimPy.Sphere_LongtitudeSegments(self, *args)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Sphere_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Sphere_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.Sphere_Load(self, oXml)
Sphere_swigregister = _AnimatSimPy.Sphere_swigregister
Sphere_swigregister(Sphere)

def Sphere_CastToDerived(lpBase):
    return _AnimatSimPy.Sphere_CastToDerived(lpBase)
Sphere_CastToDerived = _AnimatSimPy.Sphere_CastToDerived

class Spring(LineBase):
    __swig_setmethods__ = {}
    for _s in [LineBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spring, name, value)
    __swig_getmethods__ = {}
    for _s in [LineBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Spring, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Spring()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Spring
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Spring_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Spring_CastToDerived)

    def InitEnabled(self):
        return _AnimatSimPy.Spring_InitEnabled(self)

    def NaturalLength(self, *args):
        return _AnimatSimPy.Spring_NaturalLength(self, *args)

    def Stiffness(self, *args):
        return _AnimatSimPy.Spring_Stiffness(self, *args)

    def Damping(self, *args):
        return _AnimatSimPy.Spring_Damping(self, *args)

    def Displacement(self):
        return _AnimatSimPy.Spring_Displacement(self)

    def Tension(self):
        return _AnimatSimPy.Spring_Tension(self)

    def Energy(self):
        return _AnimatSimPy.Spring_Energy(self)

    def Velocity(self):
        return _AnimatSimPy.Spring_Velocity(self)

    def ResetSimulation(self):
        return _AnimatSimPy.Spring_ResetSimulation(self)

    def CreateParts(self):
        return _AnimatSimPy.Spring_CreateParts(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.Spring_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Spring_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Spring_QueryProperties(self, aryProperties)

    def AddExternalNodeInput(self, iTargetDataType, fltInput):
        return _AnimatSimPy.Spring_AddExternalNodeInput(self, iTargetDataType, fltInput)

    def Load(self, oXml):
        return _AnimatSimPy.Spring_Load(self, oXml)
Spring_swigregister = _AnimatSimPy.Spring_swigregister
Spring_swigregister(Spring)

def Spring_CastToDerived(lpBase):
    return _AnimatSimPy.Spring_CastToDerived(lpBase)
Spring_CastToDerived = _AnimatSimPy.Spring_CastToDerived

class Stomach(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stomach, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stomach, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Stomach()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Stomach
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Stomach_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Stomach_CastToDerived)

    def EnergyLevel(self, *args):
        return _AnimatSimPy.Stomach_EnergyLevel(self, *args)

    def AddEnergy(self, fltVal):
        return _AnimatSimPy.Stomach_AddEnergy(self, fltVal)

    def ConsumptionRate(self, *args):
        return _AnimatSimPy.Stomach_ConsumptionRate(self, *args)

    def BaseConsumptionRate(self, *args):
        return _AnimatSimPy.Stomach_BaseConsumptionRate(self, *args)

    def MaxEnergyLevel(self, *args):
        return _AnimatSimPy.Stomach_MaxEnergyLevel(self, *args)

    def KillOrganism(self, *args):
        return _AnimatSimPy.Stomach_KillOrganism(self, *args)

    def HasStaticJoint(self):
        return _AnimatSimPy.Stomach_HasStaticJoint(self)

    def CreateParts(self):
        return _AnimatSimPy.Stomach_CreateParts(self)

    def AddExternalNodeInput(self, iTargetDataType, fltInput):
        return _AnimatSimPy.Stomach_AddExternalNodeInput(self, iTargetDataType, fltInput)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.Stomach_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Stomach_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Stomach_QueryProperties(self, aryProperties)

    def StepSimulation(self):
        return _AnimatSimPy.Stomach_StepSimulation(self)

    def ResetSimulation(self):
        return _AnimatSimPy.Stomach_ResetSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.Stomach_Load(self, oXml)
Stomach_swigregister = _AnimatSimPy.Stomach_swigregister
Stomach_swigregister(Stomach)

def Stomach_CastToDerived(lpBase):
    return _AnimatSimPy.Stomach_CastToDerived(lpBase)
Stomach_CastToDerived = _AnimatSimPy.Stomach_CastToDerived

class Mouth(Sensor):
    __swig_setmethods__ = {}
    for _s in [Sensor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mouth, name, value)
    __swig_getmethods__ = {}
    for _s in [Sensor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mouth, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Mouth()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Mouth
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Mouth_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Mouth_CastToDerived)

    def EatingRate(self):
        return _AnimatSimPy.Mouth_EatingRate(self)

    def MinFoodRadius(self, *args):
        return _AnimatSimPy.Mouth_MinFoodRadius(self, *args)

    def StomachID(self, *args):
        return _AnimatSimPy.Mouth_StomachID(self, *args)

    def Initialize(self):
        return _AnimatSimPy.Mouth_Initialize(self)

    def AddExternalNodeInput(self, iTargetDataType, fltInput):
        return _AnimatSimPy.Mouth_AddExternalNodeInput(self, iTargetDataType, fltInput)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Mouth_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Mouth_QueryProperties(self, aryProperties)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.Mouth_GetDataPointer(self, strDataType)

    def StepSimulation(self):
        return _AnimatSimPy.Mouth_StepSimulation(self)

    def ResetSimulation(self):
        return _AnimatSimPy.Mouth_ResetSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.Mouth_Load(self, oXml)
Mouth_swigregister = _AnimatSimPy.Mouth_swigregister
Mouth_swigregister(Mouth)

def Mouth_CastToDerived(lpBase):
    return _AnimatSimPy.Mouth_CastToDerived(lpBase)
Mouth_CastToDerived = _AnimatSimPy.Mouth_CastToDerived

class CollisionPair(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollisionPair, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollisionPair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_strPart1ID"] = _AnimatSimPy.CollisionPair_m_strPart1ID_set
    __swig_getmethods__["m_strPart1ID"] = _AnimatSimPy.CollisionPair_m_strPart1ID_get
    if _newclass:
        m_strPart1ID = _swig_property(_AnimatSimPy.CollisionPair_m_strPart1ID_get, _AnimatSimPy.CollisionPair_m_strPart1ID_set)
    __swig_setmethods__["m_strPart2ID"] = _AnimatSimPy.CollisionPair_m_strPart2ID_set
    __swig_getmethods__["m_strPart2ID"] = _AnimatSimPy.CollisionPair_m_strPart2ID_get
    if _newclass:
        m_strPart2ID = _swig_property(_AnimatSimPy.CollisionPair_m_strPart2ID_get, _AnimatSimPy.CollisionPair_m_strPart2ID_set)

    def __init__(self):
        this = _AnimatSimPy.new_CollisionPair()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CollisionPair
    __del__ = lambda self: None
CollisionPair_swigregister = _AnimatSimPy.CollisionPair_swigregister
CollisionPair_swigregister(CollisionPair)

class Structure(AnimatBase, MovableItem):
    __swig_setmethods__ = {}
    for _s in [AnimatBase, MovableItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Structure, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase, MovableItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Structure, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Structure()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Structure
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Structure_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Structure_CastToDerived)

    def Sim(self, lpSim):
        return _AnimatSimPy.Structure_Sim(self, lpSim)

    def Body(self, *args):
        return _AnimatSimPy.Structure_Body(self, *args)

    def Position(self, *args):
        return _AnimatSimPy.Structure_Position(self, *args)

    def Size(self, *args):
        return _AnimatSimPy.Structure_Size(self, *args)

    def GetRobotInterface(self):
        return _AnimatSimPy.Structure_GetRobotInterface(self)

    def AllowTranslateDragX(self):
        return _AnimatSimPy.Structure_AllowTranslateDragX(self)

    def AllowTranslateDragY(self):
        return _AnimatSimPy.Structure_AllowTranslateDragY(self)

    def AllowTranslateDragZ(self):
        return _AnimatSimPy.Structure_AllowTranslateDragZ(self)

    def AllowRotateDragX(self):
        return _AnimatSimPy.Structure_AllowRotateDragX(self)

    def AllowRotateDragY(self):
        return _AnimatSimPy.Structure_AllowRotateDragY(self)

    def AllowRotateDragZ(self):
        return _AnimatSimPy.Structure_AllowRotateDragZ(self)

    def ExclusionList(self):
        return _AnimatSimPy.Structure_ExclusionList(self)

    def AddCollisionPair(self, strID1, strID2):
        return _AnimatSimPy.Structure_AddCollisionPair(self, strID1, strID2)

    def MinTimeStep(self, fltMin):
        return _AnimatSimPy.Structure_MinTimeStep(self, fltMin)

    def Create(self):
        return _AnimatSimPy.Structure_Create(self)

    def StepPhysicsEngine(self):
        return _AnimatSimPy.Structure_StepPhysicsEngine(self)

    def ResetSimulation(self):
        return _AnimatSimPy.Structure_ResetSimulation(self)

    def AddJoint(self, lpJoint):
        return _AnimatSimPy.Structure_AddJoint(self, lpJoint)

    def RemoveJoint(self, strID):
        return _AnimatSimPy.Structure_RemoveJoint(self, strID)

    def AddRigidBody(self, lpBody):
        return _AnimatSimPy.Structure_AddRigidBody(self, lpBody)

    def RemoveRigidBody(self, strID):
        return _AnimatSimPy.Structure_RemoveRigidBody(self, strID)

    def FindJoint(self, strJointID, bThrowError=True):
        return _AnimatSimPy.Structure_FindJoint(self, strJointID, bThrowError)

    def FindRigidBody(self, strBodyID, bThrowError=True):
        return _AnimatSimPy.Structure_FindRigidBody(self, strBodyID, bThrowError)

    def FindNode(self, strID, bThrowError=True):
        return _AnimatSimPy.Structure_FindNode(self, strID, bThrowError)

    def EnableMotor(self, strJointID, bVal):
        return _AnimatSimPy.Structure_EnableMotor(self, strJointID, bVal)

    def SetMotorInput(self, strJointID, fltInput):
        return _AnimatSimPy.Structure_SetMotorInput(self, strJointID, fltInput)

    def EnableCollision(self, lpCollisionBody):
        return _AnimatSimPy.Structure_EnableCollision(self, lpCollisionBody)

    def DisableCollision(self, lpCollisionBody):
        return _AnimatSimPy.Structure_DisableCollision(self, lpCollisionBody)

    def Selected(self, bValue, bSelectMultiple):
        return _AnimatSimPy.Structure_Selected(self, bValue, bSelectMultiple)

    def UpdatePhysicsPosFromGraphics(self):
        return _AnimatSimPy.Structure_UpdatePhysicsPosFromGraphics(self)

    def Script(self, *args):
        return _AnimatSimPy.Structure_Script(self, *args)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify):
        return _AnimatSimPy.Structure_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.Structure_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Structure_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Structure_QueryProperties(self, aryProperties)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.Structure_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.Structure_RemoveItem(self, strItemType, strID, bThrowError)

    def CalculateSnapshotByteSize(self):
        return _AnimatSimPy.Structure_CalculateSnapshotByteSize(self)

    def SaveKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.Structure_SaveKeyFrameSnapshot(self, aryBytes, lIndex)

    def LoadKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.Structure_LoadKeyFrameSnapshot(self, aryBytes, lIndex)

    def Initialize(self):
        return _AnimatSimPy.Structure_Initialize(self)

    def Kill(self, bState=True):
        return _AnimatSimPy.Structure_Kill(self, bState)

    def SimStarting(self):
        return _AnimatSimPy.Structure_SimStarting(self)

    def SimPausing(self):
        return _AnimatSimPy.Structure_SimPausing(self)

    def SimStopping(self):
        return _AnimatSimPy.Structure_SimStopping(self)

    def Load(self, oXml):
        return _AnimatSimPy.Structure_Load(self, oXml)
Structure_swigregister = _AnimatSimPy.Structure_swigregister
Structure_swigregister(Structure)

def Structure_CastToDerived(lpBase):
    return _AnimatSimPy.Structure_CastToDerived(lpBase)
Structure_CastToDerived = _AnimatSimPy.Structure_CastToDerived

class NervousSystem(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NervousSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NervousSystem, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_NervousSystem()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_NervousSystem
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.NervousSystem_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.NervousSystem_CastToDerived)

    def FindNeuralModule(self, strModuleName, bThrowError=True):
        return _AnimatSimPy.NervousSystem_FindNeuralModule(self, strModuleName, bThrowError)

    def AddNeuralModule(self, strXml):
        return _AnimatSimPy.NervousSystem_AddNeuralModule(self, strXml)

    def RemoveNeuralModule(self, strID):
        return _AnimatSimPy.NervousSystem_RemoveNeuralModule(self, strID)

    def Kill(self, bState=True):
        return _AnimatSimPy.NervousSystem_Kill(self, bState)

    def ResetSimulation(self):
        return _AnimatSimPy.NervousSystem_ResetSimulation(self)

    def MinTimeStep(self, fltMin):
        return _AnimatSimPy.NervousSystem_MinTimeStep(self, fltMin)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify):
        return _AnimatSimPy.NervousSystem_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify)

    def VerifySystemPointers(self):
        return _AnimatSimPy.NervousSystem_VerifySystemPointers(self)

    def Initialize(self):
        return _AnimatSimPy.NervousSystem_Initialize(self)

    def StepSimulation(self):
        return _AnimatSimPy.NervousSystem_StepSimulation(self)

    def CalculateSnapshotByteSize(self):
        return _AnimatSimPy.NervousSystem_CalculateSnapshotByteSize(self)

    def SaveKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.NervousSystem_SaveKeyFrameSnapshot(self, aryBytes, lIndex)

    def LoadKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.NervousSystem_LoadKeyFrameSnapshot(self, aryBytes, lIndex)

    def Load(self, oXml):
        return _AnimatSimPy.NervousSystem_Load(self, oXml)
NervousSystem_swigregister = _AnimatSimPy.NervousSystem_swigregister
NervousSystem_swigregister(NervousSystem)

def NervousSystem_CastToDerived(lpBase):
    return _AnimatSimPy.NervousSystem_CastToDerived(lpBase)
NervousSystem_CastToDerived = _AnimatSimPy.NervousSystem_CastToDerived

class NeuralModule(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeuralModule, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeuralModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_NeuralModule
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.NeuralModule_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.NeuralModule_CastToDerived)

    def ModuleName(self):
        return _AnimatSimPy.NeuralModule_ModuleName(self)

    def TimeStepInterval(self, *args):
        return _AnimatSimPy.NeuralModule_TimeStepInterval(self, *args)

    def TimeStep(self, *args):
        return _AnimatSimPy.NeuralModule_TimeStep(self, *args)

    def ClassFactory(self, *args):
        return _AnimatSimPy.NeuralModule_ClassFactory(self, *args)

    def GetSimulator(self):
        return _AnimatSimPy.NeuralModule_GetSimulator(self)

    def GetOrganism(self):
        return _AnimatSimPy.NeuralModule_GetOrganism(self)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify):
        return _AnimatSimPy.NeuralModule_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify)

    def VerifySystemPointers(self):
        return _AnimatSimPy.NeuralModule_VerifySystemPointers(self)

    def AttachSourceAdapter(self, lpAdapter):
        return _AnimatSimPy.NeuralModule_AttachSourceAdapter(self, lpAdapter)

    def RemoveSourceAdapter(self, lpAdapter):
        return _AnimatSimPy.NeuralModule_RemoveSourceAdapter(self, lpAdapter)

    def AttachTargetAdapter(self, lpAdapter):
        return _AnimatSimPy.NeuralModule_AttachTargetAdapter(self, lpAdapter)

    def RemoveTargetAdapter(self, lpAdapter):
        return _AnimatSimPy.NeuralModule_RemoveTargetAdapter(self, lpAdapter)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.NeuralModule_GetDataPointer(self, strDataType)

    def AddExternalSynapse(self, *args):
        return _AnimatSimPy.NeuralModule_AddExternalSynapse(self, *args)

    def RemoveExternalSynapse(self, strID, bThrowError=True):
        return _AnimatSimPy.NeuralModule_RemoveExternalSynapse(self, strID, bThrowError)

    def FindExternalSynapseListPos(self, strID, bThrowError=True):
        return _AnimatSimPy.NeuralModule_FindExternalSynapseListPos(self, strID, bThrowError)

    def Initialize(self):
        return _AnimatSimPy.NeuralModule_Initialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.NeuralModule_ResetSimulation(self)

    def NeedToStep(self, bIncrement):
        return _AnimatSimPy.NeuralModule_NeedToStep(self, bIncrement)

    def ResetStepCounter(self):
        return _AnimatSimPy.NeuralModule_ResetStepCounter(self)

    def StepSimulation(self):
        return _AnimatSimPy.NeuralModule_StepSimulation(self)

    def StepAdapters(self):
        return _AnimatSimPy.NeuralModule_StepAdapters(self)
NeuralModule_swigregister = _AnimatSimPy.NeuralModule_swigregister
NeuralModule_swigregister(NeuralModule)

def NeuralModule_CastToDerived(lpBase):
    return _AnimatSimPy.NeuralModule_CastToDerived(lpBase)
NeuralModule_CastToDerived = _AnimatSimPy.NeuralModule_CastToDerived

class PhysicsNeuralModule(NeuralModule):
    __swig_setmethods__ = {}
    for _s in [NeuralModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicsNeuralModule, name, value)
    __swig_getmethods__ = {}
    for _s in [NeuralModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicsNeuralModule, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_PhysicsNeuralModule()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_PhysicsNeuralModule
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.PhysicsNeuralModule_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.PhysicsNeuralModule_CastToDerived)

    def TimeStep(self, *args):
        return _AnimatSimPy.PhysicsNeuralModule_TimeStep(self, *args)

    def ModuleName(self):
        return _AnimatSimPy.PhysicsNeuralModule_ModuleName(self)

    def AddAdapter(self, strXml, bDoNotInit):
        return _AnimatSimPy.PhysicsNeuralModule_AddAdapter(self, strXml, bDoNotInit)

    def RemoveAdapter(self, strID):
        return _AnimatSimPy.PhysicsNeuralModule_RemoveAdapter(self, strID)

    def FindAdapterListPos(self, strID, bThrowError=True):
        return _AnimatSimPy.PhysicsNeuralModule_FindAdapterListPos(self, strID, bThrowError)

    def Kill(self, bState=True):
        return _AnimatSimPy.PhysicsNeuralModule_Kill(self, bState)

    def Initialize(self):
        return _AnimatSimPy.PhysicsNeuralModule_Initialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.PhysicsNeuralModule_ResetSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.PhysicsNeuralModule_Load(self, oXml)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.PhysicsNeuralModule_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.PhysicsNeuralModule_QueryProperties(self, aryProperties)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.PhysicsNeuralModule_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.PhysicsNeuralModule_RemoveItem(self, strItemType, strID, bThrowError)

    def CalculateSnapshotByteSize(self):
        return _AnimatSimPy.PhysicsNeuralModule_CalculateSnapshotByteSize(self)

    def SaveKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.PhysicsNeuralModule_SaveKeyFrameSnapshot(self, aryBytes, lIndex)

    def LoadKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.PhysicsNeuralModule_LoadKeyFrameSnapshot(self, aryBytes, lIndex)
PhysicsNeuralModule_swigregister = _AnimatSimPy.PhysicsNeuralModule_swigregister
PhysicsNeuralModule_swigregister(PhysicsNeuralModule)

def PhysicsNeuralModule_CastToDerived(lpBase):
    return _AnimatSimPy.PhysicsNeuralModule_CastToDerived(lpBase)
PhysicsNeuralModule_CastToDerived = _AnimatSimPy.PhysicsNeuralModule_CastToDerived

class Organism(Structure):
    __swig_setmethods__ = {}
    for _s in [Structure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Organism, name, value)
    __swig_getmethods__ = {}
    for _s in [Structure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Organism, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Organism()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Organism
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Organism_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Organism_CastToDerived)

    def IsDead(self):
        return _AnimatSimPy.Organism_IsDead(self)

    def GetRobotInterface(self):
        return _AnimatSimPy.Organism_GetRobotInterface(self)

    def CalculateSnapshotByteSize(self):
        return _AnimatSimPy.Organism_CalculateSnapshotByteSize(self)

    def SaveKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.Organism_SaveKeyFrameSnapshot(self, aryBytes, lIndex)

    def LoadKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.Organism_LoadKeyFrameSnapshot(self, aryBytes, lIndex)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Organism_SetData(self, strDataType, strValue, bThrowError)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.Organism_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.Organism_RemoveItem(self, strItemType, strID, bThrowError)

    def Initialize(self):
        return _AnimatSimPy.Organism_Initialize(self)

    def StepNeuralEngine(self):
        return _AnimatSimPy.Organism_StepNeuralEngine(self)

    def StepPhysicsEngine(self):
        return _AnimatSimPy.Organism_StepPhysicsEngine(self)

    def ResetSimulation(self):
        return _AnimatSimPy.Organism_ResetSimulation(self)

    def Kill(self, bState=True):
        return _AnimatSimPy.Organism_Kill(self, bState)

    def MinTimeStep(self, fltMin):
        return _AnimatSimPy.Organism_MinTimeStep(self, fltMin)

    def Load(self, oXml):
        return _AnimatSimPy.Organism_Load(self, oXml)

    def GetNervousSystem(self):
        return _AnimatSimPy.Organism_GetNervousSystem(self)
Organism_swigregister = _AnimatSimPy.Organism_swigregister
Organism_swigregister(Organism)

def Organism_CastToDerived(lpBase):
    return _AnimatSimPy.Organism_CastToDerived(lpBase)
Organism_CastToDerived = _AnimatSimPy.Organism_CastToDerived

class Light(AnimatBase, MovableItem):
    __swig_setmethods__ = {}
    for _s in [AnimatBase, MovableItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Light, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase, MovableItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Light, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Light()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Light
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Light_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Light_CastToDerived)

    def Enabled(self, *args):
        return _AnimatSimPy.Light_Enabled(self, *args)

    def Resize(self):
        return _AnimatSimPy.Light_Resize(self)

    def Radius(self, *args):
        return _AnimatSimPy.Light_Radius(self, *args)

    def LatitudeSegments(self, *args):
        return _AnimatSimPy.Light_LatitudeSegments(self, *args)

    def LongtitudeSegments(self, *args):
        return _AnimatSimPy.Light_LongtitudeSegments(self, *args)

    def LightNumber(self, *args):
        return _AnimatSimPy.Light_LightNumber(self, *args)

    def ConstantAttenRatio(self, *args):
        return _AnimatSimPy.Light_ConstantAttenRatio(self, *args)

    def LinearAttenDistance(self, *args):
        return _AnimatSimPy.Light_LinearAttenDistance(self, *args)

    def QuadraticAttenDistance(self, *args):
        return _AnimatSimPy.Light_QuadraticAttenDistance(self, *args)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify):
        return _AnimatSimPy.Light_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Light_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Light_QueryProperties(self, aryProperties)

    def Selected(self, bValue, bSelectMultiple):
        return _AnimatSimPy.Light_Selected(self, bValue, bSelectMultiple)

    def VisualSelectionModeChanged(self, iNewMode):
        return _AnimatSimPy.Light_VisualSelectionModeChanged(self, iNewMode)

    def Create(self):
        return _AnimatSimPy.Light_Create(self)

    def Load(self, oXml):
        return _AnimatSimPy.Light_Load(self, oXml)
Light_swigregister = _AnimatSimPy.Light_swigregister
Light_swigregister(Light)

def Light_CastToDerived(lpBase):
    return _AnimatSimPy.Light_CastToDerived(lpBase)
Light_CastToDerived = _AnimatSimPy.Light_CastToDerived

class LightManager(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightManager, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightManager, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_LightManager()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_LightManager
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.LightManager_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.LightManager_CastToDerived)

    def Lights(self):
        return _AnimatSimPy.LightManager_Lights(self)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.LightManager_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.LightManager_RemoveItem(self, strItemType, strID, bThrowError)

    def FindChildListPos(self, strID, bThrowError=True):
        return _AnimatSimPy.LightManager_FindChildListPos(self, strID, bThrowError)

    def Initialize(self):
        return _AnimatSimPy.LightManager_Initialize(self)

    def Load(self, oXml):
        return _AnimatSimPy.LightManager_Load(self, oXml)
LightManager_swigregister = _AnimatSimPy.LightManager_swigregister
LightManager_swigregister(LightManager)

def LightManager_CastToDerived(lpBase):
    return _AnimatSimPy.LightManager_CastToDerived(lpBase)
LightManager_CastToDerived = _AnimatSimPy.LightManager_CastToDerived

class ActivatedItem(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActivatedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActivatedItem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_ActivatedItem
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ActivatedItem_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ActivatedItem_CastToDerived)

    def Enabled(self, *args):
        return _AnimatSimPy.ActivatedItem_Enabled(self, *args)

    def LoadedTime(self, *args):
        return _AnimatSimPy.ActivatedItem_LoadedTime(self, *args)

    def StartSlice(self, *args):
        return _AnimatSimPy.ActivatedItem_StartSlice(self, *args)

    def EndSlice(self, *args):
        return _AnimatSimPy.ActivatedItem_EndSlice(self, *args)

    def StartTime(self, *args):
        return _AnimatSimPy.ActivatedItem_StartTime(self, *args)

    def EndTime(self, *args):
        return _AnimatSimPy.ActivatedItem_EndTime(self, *args)

    def StepInterval(self, *args):
        return _AnimatSimPy.ActivatedItem_StepInterval(self, *args)

    def StepIntervalCount(self, *args):
        return _AnimatSimPy.ActivatedItem_StepIntervalCount(self, *args)

    def AlwaysActive(self, *args):
        return _AnimatSimPy.ActivatedItem_AlwaysActive(self, *args)

    def IsActivated(self):
        return _AnimatSimPy.ActivatedItem_IsActivated(self)

    def IsInitialized(self):
        return _AnimatSimPy.ActivatedItem_IsInitialized(self)

    def NeedToActivate(self):
        return _AnimatSimPy.ActivatedItem_NeedToActivate(self)

    def NeedToDeactivate(self):
        return _AnimatSimPy.ActivatedItem_NeedToDeactivate(self)

    def __lt__(self, lpItem):
        return _AnimatSimPy.ActivatedItem___lt__(self, lpItem)

    def Initialize(self):
        return _AnimatSimPy.ActivatedItem_Initialize(self)

    def ReInitialize(self):
        return _AnimatSimPy.ActivatedItem_ReInitialize(self)

    def NeedToStep(self):
        return _AnimatSimPy.ActivatedItem_NeedToStep(self)

    def ResetSimulation(self):
        return _AnimatSimPy.ActivatedItem_ResetSimulation(self)

    def Activate(self):
        return _AnimatSimPy.ActivatedItem_Activate(self)

    def Deactivate(self):
        return _AnimatSimPy.ActivatedItem_Deactivate(self)

    def TimeStepModified(self):
        return _AnimatSimPy.ActivatedItem_TimeStepModified(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.ActivatedItem_SetData(self, strDataType, strValue, bThrowError)

    def Overlaps(self, lpItem):
        return _AnimatSimPy.ActivatedItem_Overlaps(self, lpItem)

    def Load(self, oXml):
        return _AnimatSimPy.ActivatedItem_Load(self, oXml)
ActivatedItem_swigregister = _AnimatSimPy.ActivatedItem_swigregister
ActivatedItem_swigregister(ActivatedItem)

def ActivatedItem_CastToDerived(lpBase):
    return _AnimatSimPy.ActivatedItem_CastToDerived(lpBase)
ActivatedItem_CastToDerived = _AnimatSimPy.ActivatedItem_CastToDerived


def LessThanActivatedItemCompare(lpItem1, lpItem2):
    return _AnimatSimPy.LessThanActivatedItemCompare(lpItem1, lpItem2)
LessThanActivatedItemCompare = _AnimatSimPy.LessThanActivatedItemCompare
class ActivatedItemMgr(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActivatedItemMgr, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActivatedItemMgr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ActivatedItemMgr()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ActivatedItemMgr
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ActivatedItemMgr_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ActivatedItemMgr_CastToDerived)

    def Add(self, lpItem):
        return _AnimatSimPy.ActivatedItemMgr_Add(self, lpItem)

    def Remove(self, strID, bThrowError=True):
        return _AnimatSimPy.ActivatedItemMgr_Remove(self, strID, bThrowError)

    def Find(self, *args):
        return _AnimatSimPy.ActivatedItemMgr_Find(self, *args)

    def FindListPos(self, strID, bThrowError=True):
        return _AnimatSimPy.ActivatedItemMgr_FindListPos(self, strID, bThrowError)

    def Reset(self):
        return _AnimatSimPy.ActivatedItemMgr_Reset(self)

    def Initialize(self):
        return _AnimatSimPy.ActivatedItemMgr_Initialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.ActivatedItemMgr_ResetSimulation(self)

    def ReInitialize(self):
        return _AnimatSimPy.ActivatedItemMgr_ReInitialize(self)

    def StepSimulation(self):
        return _AnimatSimPy.ActivatedItemMgr_StepSimulation(self)
ActivatedItemMgr_swigregister = _AnimatSimPy.ActivatedItemMgr_swigregister
ActivatedItemMgr_swigregister(ActivatedItemMgr)

def ActivatedItemMgr_CastToDerived(lpBase):
    return _AnimatSimPy.ActivatedItemMgr_CastToDerived(lpBase)
ActivatedItemMgr_CastToDerived = _AnimatSimPy.ActivatedItemMgr_CastToDerived

class DataColumn(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataColumn, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataColumn, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_DataColumn()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_DataColumn
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.DataColumn_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.DataColumn_CastToDerived)

    def ColumnCount(self):
        return _AnimatSimPy.DataColumn_ColumnCount(self)

    def Name(self, strValue):
        return _AnimatSimPy.DataColumn_Name(self, strValue)

    def DataType(self, *args):
        return _AnimatSimPy.DataColumn_DataType(self, *args)

    def TargetID(self, *args):
        return _AnimatSimPy.DataColumn_TargetID(self, *args)

    def AppendSpaces(self, *args):
        return _AnimatSimPy.DataColumn_AppendSpaces(self, *args)

    def IsInitialized(self, *args):
        return _AnimatSimPy.DataColumn_IsInitialized(self, *args)

    def ColumnIndex(self, *args):
        return _AnimatSimPy.DataColumn_ColumnIndex(self, *args)

    def RowIndex(self, *args):
        return _AnimatSimPy.DataColumn_RowIndex(self, *args)

    def DataValue(self):
        return _AnimatSimPy.DataColumn_DataValue(self)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, lpChart, bVerify):
        return _AnimatSimPy.DataColumn_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, lpChart, bVerify)

    def VerifySystemPointers(self):
        return _AnimatSimPy.DataColumn_VerifySystemPointers(self)

    def Initialize(self):
        return _AnimatSimPy.DataColumn_Initialize(self)

    def ReInitialize(self):
        return _AnimatSimPy.DataColumn_ReInitialize(self)

    def StepSimulation(self):
        return _AnimatSimPy.DataColumn_StepSimulation(self)

    def __lt__(self, lpColumn):
        return _AnimatSimPy.DataColumn___lt__(self, lpColumn)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.DataColumn_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.DataColumn_QueryProperties(self, aryProperties)

    def Activate(self):
        return _AnimatSimPy.DataColumn_Activate(self)

    def Deactivate(self):
        return _AnimatSimPy.DataColumn_Deactivate(self)

    def Load(self, oXml):
        return _AnimatSimPy.DataColumn_Load(self, oXml)

    def SaveColumnNames(self, oStream):
        return _AnimatSimPy.DataColumn_SaveColumnNames(self, oStream)
DataColumn_swigregister = _AnimatSimPy.DataColumn_swigregister
DataColumn_swigregister(DataColumn)

def DataColumn_CastToDerived(lpBase):
    return _AnimatSimPy.DataColumn_CastToDerived(lpBase)
DataColumn_CastToDerived = _AnimatSimPy.DataColumn_CastToDerived


def LessThanDataColumnCompare(lpColumn1, lpColumn2):
    return _AnimatSimPy.LessThanDataColumnCompare(lpColumn1, lpColumn2)
LessThanDataColumnCompare = _AnimatSimPy.LessThanDataColumnCompare
class DataChart(ActivatedItem):
    __swig_setmethods__ = {}
    for _s in [ActivatedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataChart, name, value)
    __swig_getmethods__ = {}
    for _s in [ActivatedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataChart, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_DataChart()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_DataChart
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.DataChart_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.DataChart_CastToDerived)

    def Type(self):
        return _AnimatSimPy.DataChart_Type(self)

    def StartTime(self, fltVal, bReInit=True):
        return _AnimatSimPy.DataChart_StartTime(self, fltVal, bReInit)

    def EndTime(self, fltVal, bReInit=True):
        return _AnimatSimPy.DataChart_EndTime(self, fltVal, bReInit)

    def SetStartEndTime(self, *args):
        return _AnimatSimPy.DataChart_SetStartEndTime(self, *args)

    def BufferSize(self):
        return _AnimatSimPy.DataChart_BufferSize(self)

    def UsedBufferSize(self):
        return _AnimatSimPy.DataChart_UsedBufferSize(self)

    def BufferByteSize(self):
        return _AnimatSimPy.DataChart_BufferByteSize(self)

    def UsedBufferByteSize(self):
        return _AnimatSimPy.DataChart_UsedBufferByteSize(self)

    def TimeBuffer(self):
        return _AnimatSimPy.DataChart_TimeBuffer(self)

    def DataBuffer(self):
        return _AnimatSimPy.DataChart_DataBuffer(self)

    def CollectInterval(self, *args):
        return _AnimatSimPy.DataChart_CollectInterval(self, *args)

    def ChartTimeBase(self):
        return _AnimatSimPy.DataChart_ChartTimeBase(self)

    def CollectTimeWindow(self, *args):
        return _AnimatSimPy.DataChart_CollectTimeWindow(self, *args)

    def ProjectPath(self, *args):
        return _AnimatSimPy.DataChart_ProjectPath(self, *args)

    def ColumnCount(self):
        return _AnimatSimPy.DataChart_ColumnCount(self)

    def RowCount(self):
        return _AnimatSimPy.DataChart_RowCount(self)

    def CurrentRow(self, *args):
        return _AnimatSimPy.DataChart_CurrentRow(self, *args)

    def Lock(self):
        return _AnimatSimPy.DataChart_Lock(self)

    def Unlock(self):
        return _AnimatSimPy.DataChart_Unlock(self)

    def AddData(self, iColumn, iRow, fltVal):
        return _AnimatSimPy.DataChart_AddData(self, iColumn, iRow, fltVal)

    def Load(self, *args):
        return _AnimatSimPy.DataChart_Load(self, *args)

    def AddColumn(self, *args):
        return _AnimatSimPy.DataChart_AddColumn(self, *args)

    def RemoveColumn(self, strID, bThrowError=True):
        return _AnimatSimPy.DataChart_RemoveColumn(self, strID, bThrowError)

    def FindColumn(self, strID, bThrowError=True):
        return _AnimatSimPy.DataChart_FindColumn(self, strID, bThrowError)

    def Activate(self):
        return _AnimatSimPy.DataChart_Activate(self)

    def Deactivate(self):
        return _AnimatSimPy.DataChart_Deactivate(self)

    def SetData(self, *args):
        return _AnimatSimPy.DataChart_SetData(self, *args)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.DataChart_QueryProperties(self, aryProperties)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.DataChart_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.DataChart_RemoveItem(self, strItemType, strID, bThrowError)

    def __lt__(self, lpItem):
        return _AnimatSimPy.DataChart___lt__(self, lpItem)

    def Initialize(self):
        return _AnimatSimPy.DataChart_Initialize(self)

    def ReInitialize(self):
        return _AnimatSimPy.DataChart_ReInitialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.DataChart_ResetSimulation(self)

    def StepSimulation(self):
        return _AnimatSimPy.DataChart_StepSimulation(self)
DataChart_swigregister = _AnimatSimPy.DataChart_swigregister
DataChart_swigregister(DataChart)

def DataChart_CastToDerived(lpBase):
    return _AnimatSimPy.DataChart_CastToDerived(lpBase)
DataChart_CastToDerived = _AnimatSimPy.DataChart_CastToDerived

class FileChart(DataChart):
    __swig_setmethods__ = {}
    for _s in [DataChart]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileChart, name, value)
    __swig_getmethods__ = {}
    for _s in [DataChart]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileChart, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_FileChart()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_FileChart
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.FileChart_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.FileChart_CastToDerived)

    def Type(self):
        return _AnimatSimPy.FileChart_Type(self)

    def OutputFilename(self, *args):
        return _AnimatSimPy.FileChart_OutputFilename(self, *args)

    def ResetSimulation(self):
        return _AnimatSimPy.FileChart_ResetSimulation(self)

    def Initialize(self):
        return _AnimatSimPy.FileChart_Initialize(self)

    def Deactivate(self):
        return _AnimatSimPy.FileChart_Deactivate(self)

    def Load(self, oXml):
        return _AnimatSimPy.FileChart_Load(self, oXml)

    def SaveOutput(self):
        return _AnimatSimPy.FileChart_SaveOutput(self)
FileChart_swigregister = _AnimatSimPy.FileChart_swigregister
FileChart_swigregister(FileChart)

def FileChart_CastToDerived(lpBase):
    return _AnimatSimPy.FileChart_CastToDerived(lpBase)
FileChart_CastToDerived = _AnimatSimPy.FileChart_CastToDerived

class ArrayChart(DataChart):
    __swig_setmethods__ = {}
    for _s in [DataChart]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayChart, name, value)
    __swig_getmethods__ = {}
    for _s in [DataChart]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayChart, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ArrayChart()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ArrayChart
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ArrayChart_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ArrayChart_CastToDerived)

    def Type(self):
        return _AnimatSimPy.ArrayChart_Type(self)

    def CurrentRow(self, iVal):
        return _AnimatSimPy.ArrayChart_CurrentRow(self, iVal)

    def Initialize(self):
        return _AnimatSimPy.ArrayChart_Initialize(self)

    def ReInitialize(self):
        return _AnimatSimPy.ArrayChart_ReInitialize(self)

    def StepSimulation(self):
        return _AnimatSimPy.ArrayChart_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.ArrayChart_Load(self, oXml)
ArrayChart_swigregister = _AnimatSimPy.ArrayChart_swigregister
ArrayChart_swigregister(ArrayChart)

def ArrayChart_CastToDerived(lpBase):
    return _AnimatSimPy.ArrayChart_CastToDerived(lpBase)
ArrayChart_CastToDerived = _AnimatSimPy.ArrayChart_CastToDerived

class MemoryChart(DataChart):
    __swig_setmethods__ = {}
    for _s in [DataChart]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryChart, name, value)
    __swig_getmethods__ = {}
    for _s in [DataChart]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryChart, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_MemoryChart()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_MemoryChart
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.MemoryChart_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.MemoryChart_CastToDerived)

    def Type(self):
        return _AnimatSimPy.MemoryChart_Type(self)

    def Lock(self):
        return _AnimatSimPy.MemoryChart_Lock(self)

    def Unlock(self):
        return _AnimatSimPy.MemoryChart_Unlock(self)

    def Initialize(self):
        return _AnimatSimPy.MemoryChart_Initialize(self)

    def StepSimulation(self):
        return _AnimatSimPy.MemoryChart_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.MemoryChart_Load(self, oXml)
MemoryChart_swigregister = _AnimatSimPy.MemoryChart_swigregister
MemoryChart_swigregister(MemoryChart)

def MemoryChart_CastToDerived(lpBase):
    return _AnimatSimPy.MemoryChart_CastToDerived(lpBase)
MemoryChart_CastToDerived = _AnimatSimPy.MemoryChart_CastToDerived

class DataChartMgr(ActivatedItemMgr):
    __swig_setmethods__ = {}
    for _s in [ActivatedItemMgr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataChartMgr, name, value)
    __swig_getmethods__ = {}
    for _s in [ActivatedItemMgr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataChartMgr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_DataChartMgr()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_DataChartMgr
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.DataChartMgr_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.DataChartMgr_CastToDerived)

    def AddDataChart(self, strXml):
        return _AnimatSimPy.DataChartMgr_AddDataChart(self, strXml)

    def RemoveDataChart(self, strID):
        return _AnimatSimPy.DataChartMgr_RemoveDataChart(self, strID)

    def AddDataColumn(self, strChartKey, lpColumn):
        return _AnimatSimPy.DataChartMgr_AddDataColumn(self, strChartKey, lpColumn)

    def RemoveDataColumn(self, strChartKey, strColumnName, bThrowError=True):
        return _AnimatSimPy.DataChartMgr_RemoveDataColumn(self, strChartKey, strColumnName, bThrowError)

    def FindDataColumn(self, strChartKey, strColumnName, bThrowError=True):
        return _AnimatSimPy.DataChartMgr_FindDataColumn(self, strChartKey, strColumnName, bThrowError)

    def Load(self, oXml):
        return _AnimatSimPy.DataChartMgr_Load(self, oXml)
DataChartMgr_swigregister = _AnimatSimPy.DataChartMgr_swigregister
DataChartMgr_swigregister(DataChartMgr)

def DataChartMgr_CastToDerived(lpBase):
    return _AnimatSimPy.DataChartMgr_CastToDerived(lpBase)
DataChartMgr_CastToDerived = _AnimatSimPy.DataChartMgr_CastToDerived

class ExternalStimulus(ActivatedItem):
    __swig_setmethods__ = {}
    for _s in [ActivatedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalStimulus, name, value)
    __swig_getmethods__ = {}
    for _s in [ActivatedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalStimulus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ExternalStimulus()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ExternalStimulus
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ExternalStimulus_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ExternalStimulus_CastToDerived)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.ExternalStimulus_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.ExternalStimulus_QueryProperties(self, aryProperties)

    def __lt__(self, lpItem):
        return _AnimatSimPy.ExternalStimulus___lt__(self, lpItem)
ExternalStimulus_swigregister = _AnimatSimPy.ExternalStimulus_swigregister
ExternalStimulus_swigregister(ExternalStimulus)

def ExternalStimulus_CastToDerived(lpBase):
    return _AnimatSimPy.ExternalStimulus_CastToDerived(lpBase)
ExternalStimulus_CastToDerived = _AnimatSimPy.ExternalStimulus_CastToDerived

class ExternalStimuliMgr(ActivatedItemMgr):
    __swig_setmethods__ = {}
    for _s in [ActivatedItemMgr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalStimuliMgr, name, value)
    __swig_getmethods__ = {}
    for _s in [ActivatedItemMgr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalStimuliMgr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ExternalStimuliMgr()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ExternalStimuliMgr
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ExternalStimuliMgr_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ExternalStimuliMgr_CastToDerived)

    def AddStimulus(self, strXml):
        return _AnimatSimPy.ExternalStimuliMgr_AddStimulus(self, strXml)

    def RemoveStimulus(self, strID):
        return _AnimatSimPy.ExternalStimuliMgr_RemoveStimulus(self, strID)

    def Load(self, oXml):
        return _AnimatSimPy.ExternalStimuliMgr_Load(self, oXml)
ExternalStimuliMgr_swigregister = _AnimatSimPy.ExternalStimuliMgr_swigregister
ExternalStimuliMgr_swigregister(ExternalStimuliMgr)

def ExternalStimuliMgr_CastToDerived(lpBase):
    return _AnimatSimPy.ExternalStimuliMgr_CastToDerived(lpBase)
ExternalStimuliMgr_CastToDerived = _AnimatSimPy.ExternalStimuliMgr_CastToDerived

class ExternalInputStimulus(ExternalStimulus):
    __swig_setmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInputStimulus, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInputStimulus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ExternalInputStimulus()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ExternalInputStimulus
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ExternalInputStimulus_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ExternalInputStimulus_CastToDerived)

    def Type(self):
        return _AnimatSimPy.ExternalInputStimulus_Type(self)

    def TargetNodeID(self, *args):
        return _AnimatSimPy.ExternalInputStimulus_TargetNodeID(self, *args)

    def Input(self, *args):
        return _AnimatSimPy.ExternalInputStimulus_Input(self, *args)

    def InputEquation(self, *args):
        return _AnimatSimPy.ExternalInputStimulus_InputEquation(self, *args)

    def Load(self, oXml):
        return _AnimatSimPy.ExternalInputStimulus_Load(self, oXml)

    def Activate(self):
        return _AnimatSimPy.ExternalInputStimulus_Activate(self)

    def Initialize(self):
        return _AnimatSimPy.ExternalInputStimulus_Initialize(self)

    def StepSimulation(self):
        return _AnimatSimPy.ExternalInputStimulus_StepSimulation(self)

    def Deactivate(self):
        return _AnimatSimPy.ExternalInputStimulus_Deactivate(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.ExternalInputStimulus_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.ExternalInputStimulus_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.ExternalInputStimulus_QueryProperties(self, aryProperties)
ExternalInputStimulus_swigregister = _AnimatSimPy.ExternalInputStimulus_swigregister
ExternalInputStimulus_swigregister(ExternalInputStimulus)

def ExternalInputStimulus_CastToDerived(lpBase):
    return _AnimatSimPy.ExternalInputStimulus_CastToDerived(lpBase)
ExternalInputStimulus_CastToDerived = _AnimatSimPy.ExternalInputStimulus_CastToDerived

class CurrentStimulus(ExternalStimulus):
    __swig_setmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurrentStimulus, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurrentStimulus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_CurrentStimulus()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_CurrentStimulus
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.CurrentStimulus_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.CurrentStimulus_CastToDerived)

    def Type(self, *args):
        return _AnimatSimPy.CurrentStimulus_Type(self, *args)

    def AlwaysActive(self, bVal):
        return _AnimatSimPy.CurrentStimulus_AlwaysActive(self, bVal)

    def TargetNodeID(self, *args):
        return _AnimatSimPy.CurrentStimulus_TargetNodeID(self, *args)

    def CurrentOn(self, *args):
        return _AnimatSimPy.CurrentStimulus_CurrentOn(self, *args)

    def CurrentOff(self, *args):
        return _AnimatSimPy.CurrentStimulus_CurrentOff(self, *args)

    def CurrentBurstOff(self, *args):
        return _AnimatSimPy.CurrentStimulus_CurrentBurstOff(self, *args)

    def CycleOnDuration(self, *args):
        return _AnimatSimPy.CurrentStimulus_CycleOnDuration(self, *args)

    def CycleOffDuration(self, *args):
        return _AnimatSimPy.CurrentStimulus_CycleOffDuration(self, *args)

    def BurstOnDuration(self, *args):
        return _AnimatSimPy.CurrentStimulus_BurstOnDuration(self, *args)

    def BurstOffDuration(self, *args):
        return _AnimatSimPy.CurrentStimulus_BurstOffDuration(self, *args)

    def CurrentEquation(self, *args):
        return _AnimatSimPy.CurrentStimulus_CurrentEquation(self, *args)

    def Load(self, oXml):
        return _AnimatSimPy.CurrentStimulus_Load(self, oXml)

    def Initialize(self):
        return _AnimatSimPy.CurrentStimulus_Initialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.CurrentStimulus_ResetSimulation(self)

    def Activate(self):
        return _AnimatSimPy.CurrentStimulus_Activate(self)

    def StepSimulation(self):
        return _AnimatSimPy.CurrentStimulus_StepSimulation(self)

    def Deactivate(self):
        return _AnimatSimPy.CurrentStimulus_Deactivate(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.CurrentStimulus_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.CurrentStimulus_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.CurrentStimulus_QueryProperties(self, aryProperties)
CurrentStimulus_swigregister = _AnimatSimPy.CurrentStimulus_swigregister
CurrentStimulus_swigregister(CurrentStimulus)

def CurrentStimulus_CastToDerived(lpBase):
    return _AnimatSimPy.CurrentStimulus_CastToDerived(lpBase)
CurrentStimulus_CastToDerived = _AnimatSimPy.CurrentStimulus_CastToDerived

class EnablerStimulus(ExternalStimulus):
    __swig_setmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnablerStimulus, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnablerStimulus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_EnablerStimulus()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_EnablerStimulus
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.EnablerStimulus_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.EnablerStimulus_CastToDerived)

    def Type(self):
        return _AnimatSimPy.EnablerStimulus_Type(self)

    def TargetNodeID(self, *args):
        return _AnimatSimPy.EnablerStimulus_TargetNodeID(self, *args)

    def EnableWhenActive(self, *args):
        return _AnimatSimPy.EnablerStimulus_EnableWhenActive(self, *args)

    def Initialize(self):
        return _AnimatSimPy.EnablerStimulus_Initialize(self)

    def Activate(self):
        return _AnimatSimPy.EnablerStimulus_Activate(self)

    def StepSimulation(self):
        return _AnimatSimPy.EnablerStimulus_StepSimulation(self)

    def Deactivate(self):
        return _AnimatSimPy.EnablerStimulus_Deactivate(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.EnablerStimulus_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.EnablerStimulus_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.EnablerStimulus_Load(self, oXml)
EnablerStimulus_swigregister = _AnimatSimPy.EnablerStimulus_swigregister
EnablerStimulus_swigregister(EnablerStimulus)

def EnablerStimulus_CastToDerived(lpBase):
    return _AnimatSimPy.EnablerStimulus_CastToDerived(lpBase)
EnablerStimulus_CastToDerived = _AnimatSimPy.EnablerStimulus_CastToDerived

class VoltageClamp(ExternalStimulus):
    __swig_setmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VoltageClamp, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VoltageClamp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_VoltageClamp()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_VoltageClamp
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.VoltageClamp_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.VoltageClamp_CastToDerived)

    def Type(self):
        return _AnimatSimPy.VoltageClamp_Type(self)

    def TargetNodeID(self, *args):
        return _AnimatSimPy.VoltageClamp_TargetNodeID(self, *args)

    def Vtarget(self, *args):
        return _AnimatSimPy.VoltageClamp_Vtarget(self, *args)

    def Load(self, oXml):
        return _AnimatSimPy.VoltageClamp_Load(self, oXml)

    def Initialize(self):
        return _AnimatSimPy.VoltageClamp_Initialize(self)

    def Activate(self):
        return _AnimatSimPy.VoltageClamp_Activate(self)

    def ResetSimulation(self):
        return _AnimatSimPy.VoltageClamp_ResetSimulation(self)

    def StepSimulation(self):
        return _AnimatSimPy.VoltageClamp_StepSimulation(self)

    def Deactivate(self):
        return _AnimatSimPy.VoltageClamp_Deactivate(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.VoltageClamp_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.VoltageClamp_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.VoltageClamp_QueryProperties(self, aryProperties)
VoltageClamp_swigregister = _AnimatSimPy.VoltageClamp_swigregister
VoltageClamp_swigregister(VoltageClamp)

def VoltageClamp_CastToDerived(lpBase):
    return _AnimatSimPy.VoltageClamp_CastToDerived(lpBase)
VoltageClamp_CastToDerived = _AnimatSimPy.VoltageClamp_CastToDerived

class InverseMuscleCurrent(ExternalStimulus):
    __swig_setmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseMuscleCurrent, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseMuscleCurrent, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_InverseMuscleCurrent()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_InverseMuscleCurrent
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.InverseMuscleCurrent_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.InverseMuscleCurrent_CastToDerived)

    def RestPotential(self, *args):
        return _AnimatSimPy.InverseMuscleCurrent_RestPotential(self, *args)

    def Conductance(self, *args):
        return _AnimatSimPy.InverseMuscleCurrent_Conductance(self, *args)

    def TargetNodeID(self, *args):
        return _AnimatSimPy.InverseMuscleCurrent_TargetNodeID(self, *args)

    def TargetNode(self):
        return _AnimatSimPy.InverseMuscleCurrent_TargetNode(self)

    def MuscleID(self, *args):
        return _AnimatSimPy.InverseMuscleCurrent_MuscleID(self, *args)

    def Muscle(self):
        return _AnimatSimPy.InverseMuscleCurrent_Muscle(self)

    def MuscleLengthData(self, *args):
        return _AnimatSimPy.InverseMuscleCurrent_MuscleLengthData(self, *args)

    def Load(self, oXml):
        return _AnimatSimPy.InverseMuscleCurrent_Load(self, oXml)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.InverseMuscleCurrent_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.InverseMuscleCurrent_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.InverseMuscleCurrent_QueryProperties(self, aryProperties)

    def Type(self):
        return _AnimatSimPy.InverseMuscleCurrent_Type(self)

    def Initialize(self):
        return _AnimatSimPy.InverseMuscleCurrent_Initialize(self)

    def Activate(self):
        return _AnimatSimPy.InverseMuscleCurrent_Activate(self)

    def ResetSimulation(self):
        return _AnimatSimPy.InverseMuscleCurrent_ResetSimulation(self)

    def StepSimulation(self):
        return _AnimatSimPy.InverseMuscleCurrent_StepSimulation(self)

    def Deactivate(self):
        return _AnimatSimPy.InverseMuscleCurrent_Deactivate(self)
InverseMuscleCurrent_swigregister = _AnimatSimPy.InverseMuscleCurrent_swigregister
InverseMuscleCurrent_swigregister(InverseMuscleCurrent)

def InverseMuscleCurrent_CastToDerived(lpBase):
    return _AnimatSimPy.InverseMuscleCurrent_CastToDerived(lpBase)
InverseMuscleCurrent_CastToDerived = _AnimatSimPy.InverseMuscleCurrent_CastToDerived

class PropertyControlStimulus(ExternalStimulus):
    __swig_setmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyControlStimulus, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyControlStimulus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_PropertyControlStimulus()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_PropertyControlStimulus
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.PropertyControlStimulus_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.PropertyControlStimulus_CastToDerived)

    def Type(self):
        return _AnimatSimPy.PropertyControlStimulus_Type(self)

    def TargetID(self, *args):
        return _AnimatSimPy.PropertyControlStimulus_TargetID(self, *args)

    def TargetObject(self):
        return _AnimatSimPy.PropertyControlStimulus_TargetObject(self)

    def PropertyName(self, *args):
        return _AnimatSimPy.PropertyControlStimulus_PropertyName(self, *args)

    def SetThreshold(self, *args):
        return _AnimatSimPy.PropertyControlStimulus_SetThreshold(self, *args)

    def InitialValue(self, *args):
        return _AnimatSimPy.PropertyControlStimulus_InitialValue(self, *args)

    def FinalValue(self, *args):
        return _AnimatSimPy.PropertyControlStimulus_FinalValue(self, *args)

    def Equation(self, *args):
        return _AnimatSimPy.PropertyControlStimulus_Equation(self, *args)

    def Initialize(self):
        return _AnimatSimPy.PropertyControlStimulus_Initialize(self)

    def Activate(self):
        return _AnimatSimPy.PropertyControlStimulus_Activate(self)

    def StepSimulation(self):
        return _AnimatSimPy.PropertyControlStimulus_StepSimulation(self)

    def Deactivate(self):
        return _AnimatSimPy.PropertyControlStimulus_Deactivate(self)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.PropertyControlStimulus_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.PropertyControlStimulus_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.PropertyControlStimulus_Load(self, oXml)
PropertyControlStimulus_swigregister = _AnimatSimPy.PropertyControlStimulus_swigregister
PropertyControlStimulus_swigregister(PropertyControlStimulus)

def PropertyControlStimulus_CastToDerived(lpBase):
    return _AnimatSimPy.PropertyControlStimulus_CastToDerived(lpBase)
PropertyControlStimulus_CastToDerived = _AnimatSimPy.PropertyControlStimulus_CastToDerived

class MotorStimulus(ExternalStimulus):
    __swig_setmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MotorStimulus, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MotorStimulus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_MotorStimulus()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_MotorStimulus
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.MotorStimulus_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.MotorStimulus_CastToDerived)

    def StructureID(self, *args):
        return _AnimatSimPy.MotorStimulus_StructureID(self, *args)

    def JointID(self, *args):
        return _AnimatSimPy.MotorStimulus_JointID(self, *args)

    def Equation(self, *args):
        return _AnimatSimPy.MotorStimulus_Equation(self, *args)

    def TargetID(self, *args):
        return _AnimatSimPy.MotorStimulus_TargetID(self, *args)

    def DisableMotorWhenDone(self, *args):
        return _AnimatSimPy.MotorStimulus_DisableMotorWhenDone(self, *args)

    def Load(self, oXml):
        return _AnimatSimPy.MotorStimulus_Load(self, oXml)

    def Type(self):
        return _AnimatSimPy.MotorStimulus_Type(self)

    def Initialize(self):
        return _AnimatSimPy.MotorStimulus_Initialize(self)

    def Activate(self):
        return _AnimatSimPy.MotorStimulus_Activate(self)

    def ResetSimulation(self):
        return _AnimatSimPy.MotorStimulus_ResetSimulation(self)

    def StepSimulation(self):
        return _AnimatSimPy.MotorStimulus_StepSimulation(self)

    def Deactivate(self):
        return _AnimatSimPy.MotorStimulus_Deactivate(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.MotorStimulus_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.MotorStimulus_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.MotorStimulus_QueryProperties(self, aryProperties)
MotorStimulus_swigregister = _AnimatSimPy.MotorStimulus_swigregister
MotorStimulus_swigregister(MotorStimulus)

def MotorStimulus_CastToDerived(lpBase):
    return _AnimatSimPy.MotorStimulus_CastToDerived(lpBase)
MotorStimulus_CastToDerived = _AnimatSimPy.MotorStimulus_CastToDerived

class ForceStimulus(ExternalStimulus):
    __swig_setmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceStimulus, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalStimulus]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceStimulus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ForceStimulus()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ForceStimulus
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ForceStimulus_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ForceStimulus_CastToDerived)

    def RelativePositionX(self, *args):
        return _AnimatSimPy.ForceStimulus_RelativePositionX(self, *args)

    def RelativePositionY(self, *args):
        return _AnimatSimPy.ForceStimulus_RelativePositionY(self, *args)

    def RelativePositionZ(self, *args):
        return _AnimatSimPy.ForceStimulus_RelativePositionZ(self, *args)

    def ForceXEquation(self, *args):
        return _AnimatSimPy.ForceStimulus_ForceXEquation(self, *args)

    def ForceYEquation(self, *args):
        return _AnimatSimPy.ForceStimulus_ForceYEquation(self, *args)

    def ForceZEquation(self, *args):
        return _AnimatSimPy.ForceStimulus_ForceZEquation(self, *args)

    def TorqueXEquation(self, *args):
        return _AnimatSimPy.ForceStimulus_TorqueXEquation(self, *args)

    def TorqueYEquation(self, *args):
        return _AnimatSimPy.ForceStimulus_TorqueYEquation(self, *args)

    def TorqueZEquation(self, *args):
        return _AnimatSimPy.ForceStimulus_TorqueZEquation(self, *args)

    def Load(self, oXml):
        return _AnimatSimPy.ForceStimulus_Load(self, oXml)

    def Type(self):
        return _AnimatSimPy.ForceStimulus_Type(self)

    def Initialize(self):
        return _AnimatSimPy.ForceStimulus_Initialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.ForceStimulus_ResetSimulation(self)

    def StepSimulation(self):
        return _AnimatSimPy.ForceStimulus_StepSimulation(self)

    def Deactivate(self):
        return _AnimatSimPy.ForceStimulus_Deactivate(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.ForceStimulus_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.ForceStimulus_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.ForceStimulus_QueryProperties(self, aryProperties)
ForceStimulus_swigregister = _AnimatSimPy.ForceStimulus_swigregister
ForceStimulus_swigregister(ForceStimulus)

def ForceStimulus_CastToDerived(lpBase):
    return _AnimatSimPy.ForceStimulus_CastToDerived(lpBase)
ForceStimulus_CastToDerived = _AnimatSimPy.ForceStimulus_CastToDerived

class KeyFrame(ActivatedItem):
    __swig_setmethods__ = {}
    for _s in [ActivatedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [ActivatedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyFrame, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_KeyFrame
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.KeyFrame_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.KeyFrame_CastToDerived)

    def CollectInterval(self, *args):
        return _AnimatSimPy.KeyFrame_CollectInterval(self, *args)

    def GenerateID(self):
        return _AnimatSimPy.KeyFrame_GenerateID(self)

    def Load(self, oXml):
        return _AnimatSimPy.KeyFrame_Load(self, oXml)

    def __lt__(self, lpItem):
        return _AnimatSimPy.KeyFrame___lt__(self, lpItem)

    def EnableVideoPlayback(self):
        return _AnimatSimPy.KeyFrame_EnableVideoPlayback(self)

    def DisableVideoPlayback(self):
        return _AnimatSimPy.KeyFrame_DisableVideoPlayback(self)

    def StartVideoPlayback(self):
        return _AnimatSimPy.KeyFrame_StartVideoPlayback(self)

    def StopVideoPlayback(self):
        return _AnimatSimPy.KeyFrame_StopVideoPlayback(self)

    def PlaybackVideoFrame(self):
        return _AnimatSimPy.KeyFrame_PlaybackVideoFrame(self)

    def StepVideoPlayback(self, iFrameCount):
        return _AnimatSimPy.KeyFrame_StepVideoPlayback(self, iFrameCount)

    def RecordVideoFrame(self):
        return _AnimatSimPy.KeyFrame_RecordVideoFrame(self)

    def SaveVideo(self, strPath):
        return _AnimatSimPy.KeyFrame_SaveVideo(self, strPath)

    def MakeCurrentFrame(self):
        return _AnimatSimPy.KeyFrame_MakeCurrentFrame(self)
KeyFrame_swigregister = _AnimatSimPy.KeyFrame_swigregister
KeyFrame_swigregister(KeyFrame)

def KeyFrame_CastToDerived(lpBase):
    return _AnimatSimPy.KeyFrame_CastToDerived(lpBase)
KeyFrame_CastToDerived = _AnimatSimPy.KeyFrame_CastToDerived

class SimulationRecorder(ActivatedItemMgr):
    __swig_setmethods__ = {}
    for _s in [ActivatedItemMgr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationRecorder, name, value)
    __swig_getmethods__ = {}
    for _s in [ActivatedItemMgr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationRecorder, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_SimulationRecorder()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_SimulationRecorder
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.SimulationRecorder_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.SimulationRecorder_CastToDerived)

    def Add(self, *args):
        return _AnimatSimPy.SimulationRecorder_Add(self, *args)

    def Load(self, oXml):
        return _AnimatSimPy.SimulationRecorder_Load(self, oXml)
SimulationRecorder_swigregister = _AnimatSimPy.SimulationRecorder_swigregister
SimulationRecorder_swigregister(SimulationRecorder)

def SimulationRecorder_CastToDerived(lpBase):
    return _AnimatSimPy.SimulationRecorder_CastToDerived(lpBase)
SimulationRecorder_CastToDerived = _AnimatSimPy.SimulationRecorder_CastToDerived

class MaterialType(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialType, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialType, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_MaterialType
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.MaterialType_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.MaterialType_CastToDerived)

    def GetMaterialID(self, strName):
        return _AnimatSimPy.MaterialType_GetMaterialID(self, strName)

    def CreateDefaultUnits(self):
        return _AnimatSimPy.MaterialType_CreateDefaultUnits(self)
MaterialType_swigregister = _AnimatSimPy.MaterialType_swigregister
MaterialType_swigregister(MaterialType)

def MaterialType_CastToDerived(lpBase):
    return _AnimatSimPy.MaterialType_CastToDerived(lpBase)
MaterialType_CastToDerived = _AnimatSimPy.MaterialType_CastToDerived

class Materials(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Materials, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Materials, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Materials()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Materials
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Materials_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Materials_CastToDerived)

    def Reset(self):
        return _AnimatSimPy.Materials_Reset(self)

    def Initialize(self):
        return _AnimatSimPy.Materials_Initialize(self)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.Materials_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.Materials_RemoveItem(self, strItemType, strID, bThrowError)

    def Load(self, oXml):
        return _AnimatSimPy.Materials_Load(self, oXml)
Materials_swigregister = _AnimatSimPy.Materials_swigregister
Materials_swigregister(Materials)

def Materials_CastToDerived(lpBase):
    return _AnimatSimPy.Materials_CastToDerived(lpBase)
Materials_CastToDerived = _AnimatSimPy.Materials_CastToDerived

class HudItem(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HudItem, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HudItem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_HudItem
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.HudItem_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.HudItem_CastToDerived)

    def Initialize(self, lpVoidProjection):
        return _AnimatSimPy.HudItem_Initialize(self, lpVoidProjection)

    def Update(self):
        return _AnimatSimPy.HudItem_Update(self)

    def Load(self, oXml):
        return _AnimatSimPy.HudItem_Load(self, oXml)
HudItem_swigregister = _AnimatSimPy.HudItem_swigregister
HudItem_swigregister(HudItem)

def HudItem_CastToDerived(lpBase):
    return _AnimatSimPy.HudItem_CastToDerived(lpBase)
HudItem_CastToDerived = _AnimatSimPy.HudItem_CastToDerived

class HudText(HudItem):
    __swig_setmethods__ = {}
    for _s in [HudItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HudText, name, value)
    __swig_getmethods__ = {}
    for _s in [HudItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HudText, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_HudText
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.HudText_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.HudText_CastToDerived)

    def Initialize(self, lpVoidProjection):
        return _AnimatSimPy.HudText_Initialize(self, lpVoidProjection)

    def Load(self, oXml):
        return _AnimatSimPy.HudText_Load(self, oXml)
HudText_swigregister = _AnimatSimPy.HudText_swigregister
HudText_swigregister(HudText)

def HudText_CastToDerived(lpBase):
    return _AnimatSimPy.HudText_CastToDerived(lpBase)
HudText_CastToDerived = _AnimatSimPy.HudText_CastToDerived

class Hud(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hud, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hud, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_Hud
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Hud_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Hud_CastToDerived)

    def Reset(self):
        return _AnimatSimPy.Hud_Reset(self)

    def ResetSimulation(self):
        return _AnimatSimPy.Hud_ResetSimulation(self)

    def Initialize(self):
        return _AnimatSimPy.Hud_Initialize(self)

    def Update(self):
        return _AnimatSimPy.Hud_Update(self)

    def Load(self, oXml):
        return _AnimatSimPy.Hud_Load(self, oXml)
Hud_swigregister = _AnimatSimPy.Hud_swigregister
Hud_swigregister(Hud)

def Hud_CastToDerived(lpBase):
    return _AnimatSimPy.Hud_CastToDerived(lpBase)
Hud_CastToDerived = _AnimatSimPy.Hud_CastToDerived

class SimulationWindow(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationWindow, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_SimulationWindow
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.SimulationWindow_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.SimulationWindow_CastToDerived)

    def LookAtStructureID(self, *args):
        return _AnimatSimPy.SimulationWindow_LookAtStructureID(self, *args)

    def LookAtBodyID(self, *args):
        return _AnimatSimPy.SimulationWindow_LookAtBodyID(self, *args)

    def UsingTrackCamera(self, *args):
        return _AnimatSimPy.SimulationWindow_UsingTrackCamera(self, *args)

    def WindowID(self, *args):
        return _AnimatSimPy.SimulationWindow_WindowID(self, *args)

    def StandAlone(self, *args):
        return _AnimatSimPy.SimulationWindow_StandAlone(self, *args)

    def GetCameraPosition(self):
        return _AnimatSimPy.SimulationWindow_GetCameraPosition(self)

    def SetupTrackCamera(self, *args):
        return _AnimatSimPy.SimulationWindow_SetupTrackCamera(self, *args)

    def SetCameraLookAt(self, oTarget, bResetEyePos):
        return _AnimatSimPy.SimulationWindow_SetCameraLookAt(self, oTarget, bResetEyePos)

    def SetCameraPositionAndLookAt(self, oCameraPos, oTarget):
        return _AnimatSimPy.SimulationWindow_SetCameraPositionAndLookAt(self, oCameraPos, oTarget)

    def SetCameraPostion(self, vCameraPos):
        return _AnimatSimPy.SimulationWindow_SetCameraPostion(self, vCameraPos)

    def UpdateBackgroundColor(self):
        return _AnimatSimPy.SimulationWindow_UpdateBackgroundColor(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.SimulationWindow_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.SimulationWindow_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.SimulationWindow_QueryProperties(self, aryProperties)

    def Update(self):
        return _AnimatSimPy.SimulationWindow_Update(self)

    def Close(self):
        return _AnimatSimPy.SimulationWindow_Close(self)

    def Load(self, *args):
        return _AnimatSimPy.SimulationWindow_Load(self, *args)

    def OnGetFocus(self):
        return _AnimatSimPy.SimulationWindow_OnGetFocus(self)

    def OnLoseFocus(self):
        return _AnimatSimPy.SimulationWindow_OnLoseFocus(self)
SimulationWindow_swigregister = _AnimatSimPy.SimulationWindow_swigregister
SimulationWindow_swigregister(SimulationWindow)

def SimulationWindow_CastToDerived(lpBase):
    return _AnimatSimPy.SimulationWindow_CastToDerived(lpBase)
SimulationWindow_CastToDerived = _AnimatSimPy.SimulationWindow_CastToDerived

class SimulationWindowMgr(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationWindowMgr, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationWindowMgr, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_SimulationWindowMgr
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.SimulationWindowMgr_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.SimulationWindowMgr_CastToDerived)

    def HasContainedWindow(self):
        return _AnimatSimPy.SimulationWindowMgr_HasContainedWindow(self)

    def Windows(self):
        return _AnimatSimPy.SimulationWindowMgr_Windows(self)

    def Update(self):
        return _AnimatSimPy.SimulationWindowMgr_Update(self)

    def Realize(self):
        return _AnimatSimPy.SimulationWindowMgr_Realize(self)

    def Close(self):
        return _AnimatSimPy.SimulationWindowMgr_Close(self)

    def Initialize(self):
        return _AnimatSimPy.SimulationWindowMgr_Initialize(self)

    def UpdateBackgroundColor(self):
        return _AnimatSimPy.SimulationWindowMgr_UpdateBackgroundColor(self)

    def FindSimulationWindow(self, win, iIndex, bThrowError=True):
        return _AnimatSimPy.SimulationWindowMgr_FindSimulationWindow(self, win, iIndex, bThrowError)

    def ResetSimulation(self):
        return _AnimatSimPy.SimulationWindowMgr_ResetSimulation(self)

    def AddSimulationWindow(self, strModule, strType, bInit, win, strHudXml):
        return _AnimatSimPy.SimulationWindowMgr_AddSimulationWindow(self, strModule, strType, bInit, win, strHudXml)

    def RemoveSimulationWindow(self, win):
        return _AnimatSimPy.SimulationWindowMgr_RemoveSimulationWindow(self, win)

    def CloseAllWindows(self):
        return _AnimatSimPy.SimulationWindowMgr_CloseAllWindows(self)

    def Load(self, oXml):
        return _AnimatSimPy.SimulationWindowMgr_Load(self, oXml)
SimulationWindowMgr_swigregister = _AnimatSimPy.SimulationWindowMgr_swigregister
SimulationWindowMgr_swigregister(SimulationWindowMgr)

def SimulationWindowMgr_CastToDerived(lpBase):
    return _AnimatSimPy.SimulationWindowMgr_CastToDerived(lpBase)
SimulationWindowMgr_CastToDerived = _AnimatSimPy.SimulationWindowMgr_CastToDerived

class Simulator(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simulator, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Simulator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_Simulator
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.Simulator_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.Simulator_CastToDerived)

    def ProjectPath(self, *args):
        return _AnimatSimPy.Simulator_ProjectPath(self, *args)

    def ExecutablePath(self, *args):
        return _AnimatSimPy.Simulator_ExecutablePath(self, *args)

    def SimulationFile(self, *args):
        return _AnimatSimPy.Simulator_SimulationFile(self, *args)

    def Paused(self, *args):
        return _AnimatSimPy.Simulator_Paused(self, *args)

    def Initialized(self, *args):
        return _AnimatSimPy.Simulator_Initialized(self, *args)

    def ObjectList(self):
        return _AnimatSimPy.Simulator_ObjectList(self)

    def GetDataChartMgr(self):
        return _AnimatSimPy.Simulator_GetDataChartMgr(self)

    def GetExternalStimuliMgr(self):
        return _AnimatSimPy.Simulator_GetExternalStimuliMgr(self)

    def GetSimulationRecorder(self):
        return _AnimatSimPy.Simulator_GetSimulationRecorder(self)

    def GetMaterialMgr(self):
        return _AnimatSimPy.Simulator_GetMaterialMgr(self)

    def GetWindowMgr(self):
        return _AnimatSimPy.Simulator_GetWindowMgr(self)

    def GetLightMgr(self):
        return _AnimatSimPy.Simulator_GetLightMgr(self)

    def VisualSelectionMode(self, *args):
        return _AnimatSimPy.Simulator_VisualSelectionMode(self, *args)

    def AddBodiesMode(self, *args):
        return _AnimatSimPy.Simulator_AddBodiesMode(self, *args)

    def SimCallback(self):
        return _AnimatSimPy.Simulator_SimCallback(self)

    def SimCallBack(self, lpCallback):
        return _AnimatSimPy.Simulator_SimCallBack(self, lpCallback)

    def IsResetting(self):
        return _AnimatSimPy.Simulator_IsResetting(self)

    def Time(self):
        return _AnimatSimPy.Simulator_Time(self)

    def Millisecond(self):
        return _AnimatSimPy.Simulator_Millisecond(self)

    def MillisecondToSlice(self, lMillisecond):
        return _AnimatSimPy.Simulator_MillisecondToSlice(self, lMillisecond)

    def SliceToMillisecond(self, lSlice):
        return _AnimatSimPy.Simulator_SliceToMillisecond(self, lSlice)

    def StartSimTick(self):
        return _AnimatSimPy.Simulator_StartSimTick(self)

    def MinTimeStep(self):
        return _AnimatSimPy.Simulator_MinTimeStep(self)

    def TimeStep(self):
        return _AnimatSimPy.Simulator_TimeStep(self)

    def SetEndSimTime(self, *args):
        return _AnimatSimPy.Simulator_SetEndSimTime(self, *args)

    def EndSimTime(self, *args):
        return _AnimatSimPy.Simulator_EndSimTime(self, *args)

    def EndSimTimeSlice(self, *args):
        return _AnimatSimPy.Simulator_EndSimTimeSlice(self, *args)

    def TimeSlice(self, *args):
        return _AnimatSimPy.Simulator_TimeSlice(self, *args)

    def PhysicsSliceCount(self, *args):
        return _AnimatSimPy.Simulator_PhysicsSliceCount(self, *args)

    def ManualStepSimulation(self, *args):
        return _AnimatSimPy.Simulator_ManualStepSimulation(self, *args)

    def SimRunning(self):
        return _AnimatSimPy.Simulator_SimRunning(self)

    def ShuttingDown(self):
        return _AnimatSimPy.Simulator_ShuttingDown(self)

    def ForceFastMoving(self, *args):
        return _AnimatSimPy.Simulator_ForceFastMoving(self, *args)

    def AutoGenerateRandomSeed(self, *args):
        return _AnimatSimPy.Simulator_AutoGenerateRandomSeed(self, *args)

    def ManualRandomSeed(self, *args):
        return _AnimatSimPy.Simulator_ManualRandomSeed(self, *args)

    def StabilityScale(self, *args):
        return _AnimatSimPy.Simulator_StabilityScale(self, *args)

    def LinearCompliance(self, *args):
        return _AnimatSimPy.Simulator_LinearCompliance(self, *args)

    def AngularCompliance(self, *args):
        return _AnimatSimPy.Simulator_AngularCompliance(self, *args)

    def LinearDamping(self, *args):
        return _AnimatSimPy.Simulator_LinearDamping(self, *args)

    def AngularDamping(self, *args):
        return _AnimatSimPy.Simulator_AngularDamping(self, *args)

    def LinearKineticLoss(self, *args):
        return _AnimatSimPy.Simulator_LinearKineticLoss(self, *args)

    def AngularKineticLoss(self, *args):
        return _AnimatSimPy.Simulator_AngularKineticLoss(self, *args)

    def Stopped(self):
        return _AnimatSimPy.Simulator_Stopped(self)

    def PhysicsStepInterval(self, *args):
        return _AnimatSimPy.Simulator_PhysicsStepInterval(self, *args)

    def PhysicsTimeStep(self, *args):
        return _AnimatSimPy.Simulator_PhysicsTimeStep(self, *args)

    def PhysicsStepCount(self):
        return _AnimatSimPy.Simulator_PhysicsStepCount(self)

    def PhysicsSubsteps(self, *args):
        return _AnimatSimPy.Simulator_PhysicsSubsteps(self, *args)

    def PhysicsSubstepTime(self):
        return _AnimatSimPy.Simulator_PhysicsSubstepTime(self)

    def Gravity(self, *args):
        return _AnimatSimPy.Simulator_Gravity(self, *args)

    def MouseSpringStiffness(self, *args):
        return _AnimatSimPy.Simulator_MouseSpringStiffness(self, *args)

    def MouseSpringDamping(self, *args):
        return _AnimatSimPy.Simulator_MouseSpringDamping(self, *args)

    def MouseSpringForceMagnitude(self, *args):
        return _AnimatSimPy.Simulator_MouseSpringForceMagnitude(self, *args)

    def MouseSpringDampingForceMagnitude(self, *args):
        return _AnimatSimPy.Simulator_MouseSpringDampingForceMagnitude(self, *args)

    def MouseSpringLengthMagnitude(self, *args):
        return _AnimatSimPy.Simulator_MouseSpringLengthMagnitude(self, *args)

    def SimulateHydrodynamics(self, *args):
        return _AnimatSimPy.Simulator_SimulateHydrodynamics(self, *args)

    def GetMaterialID(self, strID):
        return _AnimatSimPy.Simulator_GetMaterialID(self, strID)

    def IsPhysicsBeingUpdated(self):
        return _AnimatSimPy.Simulator_IsPhysicsBeingUpdated(self)

    def BackgroundColor(self, *args):
        return _AnimatSimPy.Simulator_BackgroundColor(self, *args)

    def AlphaThreshold(self, *args):
        return _AnimatSimPy.Simulator_AlphaThreshold(self, *args)

    def RecFieldSelRadius(self, *args):
        return _AnimatSimPy.Simulator_RecFieldSelRadius(self, *args)

    def PlaybackControlMode(self, *args):
        return _AnimatSimPy.Simulator_PlaybackControlMode(self, *args)

    def PresetPlaybackTimeStep(self, *args):
        return _AnimatSimPy.Simulator_PresetPlaybackTimeStep(self, *args)

    def StepStartTick(self):
        return _AnimatSimPy.Simulator_StepStartTick(self)

    def StepSimEndTick(self):
        return _AnimatSimPy.Simulator_StepSimEndTick(self)

    def DesiredFrameStep(self):
        return _AnimatSimPy.Simulator_DesiredFrameStep(self)

    def DesiredFrameRate(self, *args):
        return _AnimatSimPy.Simulator_DesiredFrameRate(self, *args)

    def RealTime(self):
        return _AnimatSimPy.Simulator_RealTime(self)

    def InDrag(self, *args):
        return _AnimatSimPy.Simulator_InDrag(self, *args)

    def RobotAdpaterSynch(self, *args):
        return _AnimatSimPy.Simulator_RobotAdpaterSynch(self, *args)

    def InSimulation(self):
        return _AnimatSimPy.Simulator_InSimulation(self)

    def ForceNoWindows(self, *args):
        return _AnimatSimPy.Simulator_ForceNoWindows(self, *args)

    def Script(self, *args):
        return _AnimatSimPy.Simulator_Script(self, *args)

    def DistanceUnits(self, *args):
        return _AnimatSimPy.Simulator_DistanceUnits(self, *args)

    def InverseDistanceUnits(self):
        return _AnimatSimPy.Simulator_InverseDistanceUnits(self)

    def DenominatorDistanceUnits(self):
        return _AnimatSimPy.Simulator_DenominatorDistanceUnits(self)

    def MassUnits(self, *args):
        return _AnimatSimPy.Simulator_MassUnits(self, *args)

    def InverseMassUnits(self):
        return _AnimatSimPy.Simulator_InverseMassUnits(self)

    def DisplayMassUnits(self):
        return _AnimatSimPy.Simulator_DisplayMassUnits(self)

    def GetPositionAndRotationFromD3DMatrix(self, aryTransform, vPos, vRot):
        return _AnimatSimPy.Simulator_GetPositionAndRotationFromD3DMatrix(self, aryTransform, vPos, vRot)

    def GetTimerTick(self):
        return _AnimatSimPy.Simulator_GetTimerTick(self)

    def TimerDiff_u(self, lStart, lEnd):
        return _AnimatSimPy.Simulator_TimerDiff_u(self, lStart, lEnd)

    def TimerDiff_m(self, lStart, lEnd):
        return _AnimatSimPy.Simulator_TimerDiff_m(self, lStart, lEnd)

    def TimerDiff_s(self, lStart, lEnd):
        return _AnimatSimPy.Simulator_TimerDiff_s(self, lStart, lEnd)

    def MicroSleep(self, iMicroTime):
        return _AnimatSimPy.Simulator_MicroSleep(self, iMicroTime)

    def MicroWait(self, iMicroTime):
        return _AnimatSimPy.Simulator_MicroWait(self, iMicroTime)

    def WriteToConsole(self, strMessage):
        return _AnimatSimPy.Simulator_WriteToConsole(self, strMessage)

    def NotifyRigidBodyAdded(self, strID):
        return _AnimatSimPy.Simulator_NotifyRigidBodyAdded(self, strID)

    def NotifyRigidBodyRemoved(self, strID):
        return _AnimatSimPy.Simulator_NotifyRigidBodyRemoved(self, strID)

    def VideoSliceCount(self, *args):
        return _AnimatSimPy.Simulator_VideoSliceCount(self, *args)

    def VideoLoops(self, *args):
        return _AnimatSimPy.Simulator_VideoLoops(self, *args)

    def VideoRecorder(self, *args):
        return _AnimatSimPy.Simulator_VideoRecorder(self, *args)

    def VideoPlayback(self, *args):
        return _AnimatSimPy.Simulator_VideoPlayback(self, *args)

    def EnableSimRecording(self, *args):
        return _AnimatSimPy.Simulator_EnableSimRecording(self, *args)

    def SnapshotByteSize(self):
        return _AnimatSimPy.Simulator_SnapshotByteSize(self)

    def BlockSimulation(self):
        return _AnimatSimPy.Simulator_BlockSimulation(self)

    def UnblockSimulation(self):
        return _AnimatSimPy.Simulator_UnblockSimulation(self)

    def SimulationBlockConfirm(self):
        return _AnimatSimPy.Simulator_SimulationBlockConfirm(self)

    def WaitForSimulationBlock(self, lTimeout=6000):
        return _AnimatSimPy.Simulator_WaitForSimulationBlock(self, lTimeout)

    def Reset(self):
        return _AnimatSimPy.Simulator_Reset(self)

    def ResetSimulation(self):
        return _AnimatSimPy.Simulator_ResetSimulation(self)

    def Initialize(self, *args):
        return _AnimatSimPy.Simulator_Initialize(self, *args)

    def Simulate(self):
        return _AnimatSimPy.Simulator_Simulate(self)

    def ShutdownSimulation(self):
        return _AnimatSimPy.Simulator_ShutdownSimulation(self)

    def ToggleSimulation(self):
        return _AnimatSimPy.Simulator_ToggleSimulation(self)

    def StopSimulation(self):
        return _AnimatSimPy.Simulator_StopSimulation(self)

    def StartSimulation(self):
        return _AnimatSimPy.Simulator_StartSimulation(self)

    def PauseSimulation(self):
        return _AnimatSimPy.Simulator_PauseSimulation(self)

    def RunSimulation(self):
        return _AnimatSimPy.Simulator_RunSimulation(self)

    def Load(self, *args):
        return _AnimatSimPy.Simulator_Load(self, *args)

    def Save(self, strFilename):
        return _AnimatSimPy.Simulator_Save(self, strFilename)
    __swig_getmethods__["LoadClassFactory"] = lambda x: _AnimatSimPy.Simulator_LoadClassFactory
    if _newclass:
        LoadClassFactory = staticmethod(_AnimatSimPy.Simulator_LoadClassFactory)

    def IncrementPhysicsBodyCount(self):
        return _AnimatSimPy.Simulator_IncrementPhysicsBodyCount(self)

    def CreateObject(self, strModule, strClassName, strType, bThrowError=True):
        return _AnimatSimPy.Simulator_CreateObject(self, strModule, strClassName, strType, bThrowError)
    __swig_getmethods__["CreateAndInitializeSimulator"] = lambda x: _AnimatSimPy.Simulator_CreateAndInitializeSimulator
    if _newclass:
        CreateAndInitializeSimulator = staticmethod(_AnimatSimPy.Simulator_CreateAndInitializeSimulator)
    __swig_getmethods__["CreateSimulator"] = lambda x: _AnimatSimPy.Simulator_CreateSimulator
    if _newclass:
        CreateSimulator = staticmethod(_AnimatSimPy.Simulator_CreateSimulator)

    def GenerateCollisionMeshFile(self, strOriginalMeshFile, strCollisionMeshFile, fltScaleX, fltScaleY, fltScaleZ):
        return _AnimatSimPy.Simulator_GenerateCollisionMeshFile(self, strOriginalMeshFile, strCollisionMeshFile, fltScaleX, fltScaleY, fltScaleZ)

    def ConvertV1MeshFile(self, strOriginalMeshFile, strNewMeshFile, strTexture):
        return _AnimatSimPy.Simulator_ConvertV1MeshFile(self, strOriginalMeshFile, strNewMeshFile, strTexture)

    def FindNeuralModuleFactory(self, strModuleName, bThrowError=False):
        return _AnimatSimPy.Simulator_FindNeuralModuleFactory(self, strModuleName, bThrowError)

    def FindOrganism(self, strOrganismID, bThrowError=True):
        return _AnimatSimPy.Simulator_FindOrganism(self, strOrganismID, bThrowError)

    def FindStructure(self, strStructureID, bThrowError=True):
        return _AnimatSimPy.Simulator_FindStructure(self, strStructureID, bThrowError)

    def FindStructureFromAll(self, strStructureID, bThrowError=True):
        return _AnimatSimPy.Simulator_FindStructureFromAll(self, strStructureID, bThrowError)

    def FindJoint(self, strStructureID, strJointID, bThrowError=True):
        return _AnimatSimPy.Simulator_FindJoint(self, strStructureID, strJointID, bThrowError)

    def FindRigidBody(self, strStructureID, strBodyID, bThrowError=True):
        return _AnimatSimPy.Simulator_FindRigidBody(self, strStructureID, strBodyID, bThrowError)

    def FindOdorType(self, strOdorID, bThrowError=True):
        return _AnimatSimPy.Simulator_FindOdorType(self, strOdorID, bThrowError)

    def FindClosestFoodSources(self, oMouthPos, fltMinRadius, arySources, aryDistances):
        return _AnimatSimPy.Simulator_FindClosestFoodSources(self, oMouthPos, fltMinRadius, arySources, aryDistances)

    def FindByID(self, strID, bThrowError=True):
        return _AnimatSimPy.Simulator_FindByID(self, strID, bThrowError)

    def AddToObjectList(self, lpItem):
        return _AnimatSimPy.Simulator_AddToObjectList(self, lpItem)

    def RemoveFromObjectList(self, lpItem):
        return _AnimatSimPy.Simulator_RemoveFromObjectList(self, lpItem)

    def AddNeuralModuleFactory(self, strModuleName, lpModule):
        return _AnimatSimPy.Simulator_AddNeuralModuleFactory(self, strModuleName, lpModule)

    def AddFoodSource(self, lpFood):
        return _AnimatSimPy.Simulator_AddFoodSource(self, lpFood)

    def RemoveFoodSource(self, lpFood):
        return _AnimatSimPy.Simulator_RemoveFoodSource(self, lpFood)

    def AttachSourceAdapter(self, lpStructure, lpAdapter):
        return _AnimatSimPy.Simulator_AttachSourceAdapter(self, lpStructure, lpAdapter)

    def RemoveSourceAdapter(self, lpStructure, lpAdapter):
        return _AnimatSimPy.Simulator_RemoveSourceAdapter(self, lpStructure, lpAdapter)

    def AttachTargetAdapter(self, lpStructure, lpAdapter):
        return _AnimatSimPy.Simulator_AttachTargetAdapter(self, lpStructure, lpAdapter)

    def RemoveTargetAdapter(self, lpStructure, lpAdapter):
        return _AnimatSimPy.Simulator_RemoveTargetAdapter(self, lpStructure, lpAdapter)

    def IsPhysicsAdapter(self, lpAdapter):
        return _AnimatSimPy.Simulator_IsPhysicsAdapter(self, lpAdapter)

    def AddToExtractExtraData(self, lpPart):
        return _AnimatSimPy.Simulator_AddToExtractExtraData(self, lpPart)

    def RemoveFromExtractExtraData(self, lpPart):
        return _AnimatSimPy.Simulator_RemoveFromExtractExtraData(self, lpPart)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.Simulator_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Simulator_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Simulator_QueryProperties(self, aryProperties)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.Simulator_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.Simulator_RemoveItem(self, strItemType, strID, bThrowError)

    def EnableVideoPlayback(self, strKeyFrameID):
        return _AnimatSimPy.Simulator_EnableVideoPlayback(self, strKeyFrameID)

    def DisableVideoPlayback(self):
        return _AnimatSimPy.Simulator_DisableVideoPlayback(self)

    def StartVideoPlayback(self):
        return _AnimatSimPy.Simulator_StartVideoPlayback(self)

    def StopVideoPlayback(self):
        return _AnimatSimPy.Simulator_StopVideoPlayback(self)

    def StepVideoPlayback(self, iFrameCount=1):
        return _AnimatSimPy.Simulator_StepVideoPlayback(self, iFrameCount)

    def SaveVideo(self, strPath):
        return _AnimatSimPy.Simulator_SaveVideo(self, strPath)

    def AddKeyFrame(self, strType, lStart, lEnd):
        return _AnimatSimPy.Simulator_AddKeyFrame(self, strType, lStart, lEnd)

    def RemoveKeyFrame(self, strID):
        return _AnimatSimPy.Simulator_RemoveKeyFrame(self, strID)

    def MoveKeyFrame(self, strID, lStart, lEnd):
        return _AnimatSimPy.Simulator_MoveKeyFrame(self, strID, lStart, lEnd)

    def MoveSimulationToKeyFrame(self, strKeyFrameID):
        return _AnimatSimPy.Simulator_MoveSimulationToKeyFrame(self, strKeyFrameID)

    def SaveKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.Simulator_SaveKeyFrameSnapshot(self, aryBytes, lIndex)

    def LoadKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.Simulator_LoadKeyFrameSnapshot(self, aryBytes, lIndex)

    def EnableCollisions(self, lpStruct, m_aryCollisionList):
        return _AnimatSimPy.Simulator_EnableCollisions(self, lpStruct, m_aryCollisionList)

    def DisableCollisions(self, lpStruct, m_aryCollisionList):
        return _AnimatSimPy.Simulator_DisableCollisions(self, lpStruct, m_aryCollisionList)

    def EnableCollision(self, lpBody):
        return _AnimatSimPy.Simulator_EnableCollision(self, lpBody)

    def DisableCollision(self, lpBody):
        return _AnimatSimPy.Simulator_DisableCollision(self, lpBody)
Simulator_swigregister = _AnimatSimPy.Simulator_swigregister
Simulator_swigregister(Simulator)

def Simulator_CastToDerived(lpBase):
    return _AnimatSimPy.Simulator_CastToDerived(lpBase)
Simulator_CastToDerived = _AnimatSimPy.Simulator_CastToDerived

def Simulator_LoadClassFactory(strModuleName, bThrowError=True):
    return _AnimatSimPy.Simulator_LoadClassFactory(strModuleName, bThrowError)
Simulator_LoadClassFactory = _AnimatSimPy.Simulator_LoadClassFactory

def Simulator_CreateAndInitializeSimulator(strSimFile, bForceNoWindows=False):
    return _AnimatSimPy.Simulator_CreateAndInitializeSimulator(strSimFile, bForceNoWindows)
Simulator_CreateAndInitializeSimulator = _AnimatSimPy.Simulator_CreateAndInitializeSimulator

def Simulator_CreateSimulator(*args):
    return _AnimatSimPy.Simulator_CreateSimulator(*args)
Simulator_CreateSimulator = _AnimatSimPy.Simulator_CreateSimulator


def GetSimulator():
    return _AnimatSimPy.GetSimulator()
GetSimulator = _AnimatSimPy.GetSimulator
class ScriptProcessor(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptProcessor, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptProcessor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ScriptProcessor()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ScriptProcessor
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.ScriptProcessor_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.ScriptProcessor_CastToDerived)

    def BeforeStepPhysicsEngine(self):
        return _AnimatSimPy.ScriptProcessor_BeforeStepPhysicsEngine(self)

    def AfterStepPhysicsEngine(self):
        return _AnimatSimPy.ScriptProcessor_AfterStepPhysicsEngine(self)

    def BeforeStepNeuralEngine(self):
        return _AnimatSimPy.ScriptProcessor_BeforeStepNeuralEngine(self)

    def AfterStepNeuralEngine(self):
        return _AnimatSimPy.ScriptProcessor_AfterStepNeuralEngine(self)
ScriptProcessor_swigregister = _AnimatSimPy.ScriptProcessor_swigregister
ScriptProcessor_swigregister(ScriptProcessor)

def ScriptProcessor_CastToDerived(lpBase):
    return _AnimatSimPy.ScriptProcessor_CastToDerived(lpBase)
ScriptProcessor_CastToDerived = _AnimatSimPy.ScriptProcessor_CastToDerived


def SetLastScriptError(strError):
    return _AnimatSimPy.SetLastScriptError(strError)
SetLastScriptError = _AnimatSimPy.SetLastScriptError

def GetLastScriptError():
    return _AnimatSimPy.GetLastScriptError()
GetLastScriptError = _AnimatSimPy.GetLastScriptError
class SimulationThread(ISimGUICallback):
    __swig_setmethods__ = {}
    for _s in [ISimGUICallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationThread, name, value)
    __swig_getmethods__ = {}
    for _s in [ISimGUICallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationThread, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_SimulationThread()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_SimulationThread
    __del__ = lambda self: None

    def NeedToStopSim(self):
        return _AnimatSimPy.SimulationThread_NeedToStopSim(self)

    def Sim(self):
        return _AnimatSimPy.SimulationThread_Sim(self)

    def StartSimulation(self, strSimFile, bForceNoWindows=False):
        return _AnimatSimPy.SimulationThread_StartSimulation(self, strSimFile, bForceNoWindows)

    def Simulate(self, fltTime=-1, bBlocking=True, fltWaitTime=-1):
        return _AnimatSimPy.SimulationThread_Simulate(self, fltTime, bBlocking, fltWaitTime)

    def PauseSimulation(self):
        return _AnimatSimPy.SimulationThread_PauseSimulation(self)

    def ResumeSimulation(self):
        return _AnimatSimPy.SimulationThread_ResumeSimulation(self)

    def ResetSimulation(self):
        return _AnimatSimPy.SimulationThread_ResetSimulation(self)

    def StopSimulation(self):
        return _AnimatSimPy.SimulationThread_StopSimulation(self)

    def ShutdownSimulation(self):
        return _AnimatSimPy.SimulationThread_ShutdownSimulation(self)

    def NeedToStopSimulation(self):
        return _AnimatSimPy.SimulationThread_NeedToStopSimulation(self)

    def HandleNonCriticalError(self, strError):
        return _AnimatSimPy.SimulationThread_HandleNonCriticalError(self, strError)

    def HandleCriticalError(self, strError):
        return _AnimatSimPy.SimulationThread_HandleCriticalError(self, strError)
SimulationThread_swigregister = _AnimatSimPy.SimulationThread_swigregister
SimulationThread_swigregister(SimulationThread)

class SimulationMgr(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationMgr, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationMgr, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["Instance"] = lambda x: _AnimatSimPy.SimulationMgr_Instance
    if _newclass:
        Instance = staticmethod(_AnimatSimPy.SimulationMgr_Instance)
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.SimulationMgr_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.SimulationMgr_CastToDerived)

    def SimThreads(self):
        return _AnimatSimPy.SimulationMgr_SimThreads(self)

    def CreateSimulation(self, strSimFile, bForceNoWindows=False):
        return _AnimatSimPy.SimulationMgr_CreateSimulation(self, strSimFile, bForceNoWindows)

    def ShutdownAllSimulations(self):
        return _AnimatSimPy.SimulationMgr_ShutdownAllSimulations(self)

    def FindByID(self, strID, bThrowError=True):
        return _AnimatSimPy.SimulationMgr_FindByID(self, strID, bThrowError)
SimulationMgr_swigregister = _AnimatSimPy.SimulationMgr_swigregister
SimulationMgr_swigregister(SimulationMgr)

def SimulationMgr_Instance():
    return _AnimatSimPy.SimulationMgr_Instance()
SimulationMgr_Instance = _AnimatSimPy.SimulationMgr_Instance

def SimulationMgr_CastToDerived(lpBase):
    return _AnimatSimPy.SimulationMgr_CastToDerived(lpBase)
SimulationMgr_CastToDerived = _AnimatSimPy.SimulationMgr_CastToDerived


def ActiveSim(*args):
    return _AnimatSimPy.ActiveSim(*args)
ActiveSim = _AnimatSimPy.ActiveSim
class RobotInterface(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RobotInterface, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_RobotInterface()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_RobotInterface
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.RobotInterface_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.RobotInterface_CastToDerived)

    def IOControls(self):
        return _AnimatSimPy.RobotInterface_IOControls(self)

    def PhysicsTimeStep(self, *args):
        return _AnimatSimPy.RobotInterface_PhysicsTimeStep(self, *args)

    def SynchSim(self, *args):
        return _AnimatSimPy.RobotInterface_SynchSim(self, *args)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.RobotInterface_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.RobotInterface_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.RobotInterface_QueryProperties(self, aryProperties)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.RobotInterface_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.RobotInterface_RemoveItem(self, strItemType, strID, bThrowError)

    def Initialize(self):
        return _AnimatSimPy.RobotInterface_Initialize(self)

    def StepSimulation(self):
        return _AnimatSimPy.RobotInterface_StepSimulation(self)

    def ResetSimulation(self):
        return _AnimatSimPy.RobotInterface_ResetSimulation(self)

    def AfterResetSimulation(self):
        return _AnimatSimPy.RobotInterface_AfterResetSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.RobotInterface_Load(self, oXml)
RobotInterface_swigregister = _AnimatSimPy.RobotInterface_swigregister
RobotInterface_swigregister(RobotInterface)

def RobotInterface_CastToDerived(lpBase):
    return _AnimatSimPy.RobotInterface_CastToDerived(lpBase)
RobotInterface_CastToDerived = _AnimatSimPy.RobotInterface_CastToDerived

class RobotIOControl(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotIOControl, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RobotIOControl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_RobotIOControl
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.RobotIOControl_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.RobotIOControl_CastToDerived)

    def ParentInterface(self, *args):
        return _AnimatSimPy.RobotIOControl_ParentInterface(self, *args)

    def Parts(self):
        return _AnimatSimPy.RobotIOControl_Parts(self)

    def PauseIO(self, *args):
        return _AnimatSimPy.RobotIOControl_PauseIO(self, *args)

    def IOPaused(self):
        return _AnimatSimPy.RobotIOControl_IOPaused(self)

    def StepIODuration(self):
        return _AnimatSimPy.RobotIOControl_StepIODuration(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.RobotIOControl_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.RobotIOControl_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.RobotIOControl_QueryProperties(self, aryProperties)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.RobotIOControl_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.RobotIOControl_RemoveItem(self, strItemType, strID, bThrowError)

    def SetupIO(self):
        return _AnimatSimPy.RobotIOControl_SetupIO(self)

    def StepIO(self):
        return _AnimatSimPy.RobotIOControl_StepIO(self)

    def ShutdownIO(self):
        return _AnimatSimPy.RobotIOControl_ShutdownIO(self)

    def Initialize(self):
        return _AnimatSimPy.RobotIOControl_Initialize(self)

    def SimStopping(self):
        return _AnimatSimPy.RobotIOControl_SimStopping(self)

    def StepSimulation(self):
        return _AnimatSimPy.RobotIOControl_StepSimulation(self)

    def ResetSimulation(self):
        return _AnimatSimPy.RobotIOControl_ResetSimulation(self)

    def AfterResetSimulation(self):
        return _AnimatSimPy.RobotIOControl_AfterResetSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.RobotIOControl_Load(self, oXml)
RobotIOControl_swigregister = _AnimatSimPy.RobotIOControl_swigregister
RobotIOControl_swigregister(RobotIOControl)

def RobotIOControl_CastToDerived(lpBase):
    return _AnimatSimPy.RobotIOControl_CastToDerived(lpBase)
RobotIOControl_CastToDerived = _AnimatSimPy.RobotIOControl_CastToDerived

class RobotPartInterface(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotPartInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RobotPartInterface, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_RobotPartInterface()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_RobotPartInterface
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.RobotPartInterface_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.RobotPartInterface_CastToDerived)

    def ParentIOControl(self, *args):
        return _AnimatSimPy.RobotPartInterface_ParentIOControl(self, *args)

    def IOComponentID(self, *args):
        return _AnimatSimPy.RobotPartInterface_IOComponentID(self, *args)

    def IOValue(self, *args):
        return _AnimatSimPy.RobotPartInterface_IOValue(self, *args)

    def IOValueInt(self, *args):
        return _AnimatSimPy.RobotPartInterface_IOValueInt(self, *args)

    def IOScaledValue(self, *args):
        return _AnimatSimPy.RobotPartInterface_IOScaledValue(self, *args)

    def Changed(self, *args):
        return _AnimatSimPy.RobotPartInterface_Changed(self, *args)

    def LinkedPartID(self, *args):
        return _AnimatSimPy.RobotPartInterface_LinkedPartID(self, *args)

    def PropertyName(self, *args):
        return _AnimatSimPy.RobotPartInterface_PropertyName(self, *args)

    def IsMotorControl(self):
        return _AnimatSimPy.RobotPartInterface_IsMotorControl(self)

    def IncludeInPartsCycle(self):
        return _AnimatSimPy.RobotPartInterface_IncludeInPartsCycle(self)

    def QuantizeServoPosition(self, fltPos):
        return _AnimatSimPy.RobotPartInterface_QuantizeServoPosition(self, fltPos)

    def QuantizeServoVelocity(self, fltVel):
        return _AnimatSimPy.RobotPartInterface_QuantizeServoVelocity(self, fltVel)

    def GetGain(self):
        return _AnimatSimPy.RobotPartInterface_GetGain(self)

    def SetGain(self, lpGain):
        return _AnimatSimPy.RobotPartInterface_SetGain(self, lpGain)

    def StepIODuration(self):
        return _AnimatSimPy.RobotPartInterface_StepIODuration(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.RobotPartInterface_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.RobotPartInterface_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.RobotPartInterface_QueryProperties(self, aryProperties)

    def SetupIO(self):
        return _AnimatSimPy.RobotPartInterface_SetupIO(self)

    def StepIO(self, iPartIdx):
        return _AnimatSimPy.RobotPartInterface_StepIO(self, iPartIdx)

    def ShutdownIO(self):
        return _AnimatSimPy.RobotPartInterface_ShutdownIO(self)

    def Initialize(self):
        return _AnimatSimPy.RobotPartInterface_Initialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.RobotPartInterface_ResetSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.RobotPartInterface_Load(self, oXml)
RobotPartInterface_swigregister = _AnimatSimPy.RobotPartInterface_swigregister
RobotPartInterface_swigregister(RobotPartInterface)

def RobotPartInterface_CastToDerived(lpBase):
    return _AnimatSimPy.RobotPartInterface_CastToDerived(lpBase)
RobotPartInterface_CastToDerived = _AnimatSimPy.RobotPartInterface_CastToDerived

class RemoteControlLinkage(AnimatBase):
    __swig_setmethods__ = {}
    for _s in [AnimatBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RemoteControlLinkage, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimatBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RemoteControlLinkage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_RemoteControlLinkage
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.RemoteControlLinkage_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.RemoteControlLinkage_CastToDerived)

    def ParentRemoteControl(self, *args):
        return _AnimatSimPy.RemoteControlLinkage_ParentRemoteControl(self, *args)

    def SourceID(self, *args):
        return _AnimatSimPy.RemoteControlLinkage_SourceID(self, *args)

    def TargetID(self, *args):
        return _AnimatSimPy.RemoteControlLinkage_TargetID(self, *args)

    def SourceDataTypeID(self, *args):
        return _AnimatSimPy.RemoteControlLinkage_SourceDataTypeID(self, *args)

    def TargetDataTypeID(self, *args):
        return _AnimatSimPy.RemoteControlLinkage_TargetDataTypeID(self, *args)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.RemoteControlLinkage_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.RemoteControlLinkage_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.RemoteControlLinkage_QueryProperties(self, aryProperties)

    def SetupIO(self):
        return _AnimatSimPy.RemoteControlLinkage_SetupIO(self)

    def StepIO(self):
        return _AnimatSimPy.RemoteControlLinkage_StepIO(self)

    def ShutdownIO(self):
        return _AnimatSimPy.RemoteControlLinkage_ShutdownIO(self)

    def Initialize(self):
        return _AnimatSimPy.RemoteControlLinkage_Initialize(self)

    def StepSimulation(self):
        return _AnimatSimPy.RemoteControlLinkage_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.RemoteControlLinkage_Load(self, oXml)
RemoteControlLinkage_swigregister = _AnimatSimPy.RemoteControlLinkage_swigregister
RemoteControlLinkage_swigregister(RemoteControlLinkage)

def RemoteControlLinkage_CastToDerived(lpBase):
    return _AnimatSimPy.RemoteControlLinkage_CastToDerived(lpBase)
RemoteControlLinkage_CastToDerived = _AnimatSimPy.RemoteControlLinkage_CastToDerived

class PassThroughLinkage(RemoteControlLinkage):
    __swig_setmethods__ = {}
    for _s in [RemoteControlLinkage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PassThroughLinkage, name, value)
    __swig_getmethods__ = {}
    for _s in [RemoteControlLinkage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PassThroughLinkage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_PassThroughLinkage()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_PassThroughLinkage
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.PassThroughLinkage_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.PassThroughLinkage_CastToDerived)

    def GetGain(self):
        return _AnimatSimPy.PassThroughLinkage_GetGain(self)

    def SetGain(self, lpGain):
        return _AnimatSimPy.PassThroughLinkage_SetGain(self, lpGain)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.PassThroughLinkage_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.PassThroughLinkage_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.PassThroughLinkage_Load(self, oXml)
PassThroughLinkage_swigregister = _AnimatSimPy.PassThroughLinkage_swigregister
PassThroughLinkage_swigregister(PassThroughLinkage)

def PassThroughLinkage_CastToDerived(lpBase):
    return _AnimatSimPy.PassThroughLinkage_CastToDerived(lpBase)
PassThroughLinkage_CastToDerived = _AnimatSimPy.PassThroughLinkage_CastToDerived

class PulsedLinkage(RemoteControlLinkage):
    __swig_setmethods__ = {}
    for _s in [RemoteControlLinkage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulsedLinkage, name, value)
    __swig_getmethods__ = {}
    for _s in [RemoteControlLinkage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulsedLinkage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_PulsedLinkage()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_PulsedLinkage
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.PulsedLinkage_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.PulsedLinkage_CastToDerived)

    def MatchValue(self, *args):
        return _AnimatSimPy.PulsedLinkage_MatchValue(self, *args)

    def MatchOnChange(self, *args):
        return _AnimatSimPy.PulsedLinkage_MatchOnChange(self, *args)

    def PulseDuration(self, *args):
        return _AnimatSimPy.PulsedLinkage_PulseDuration(self, *args)

    def PulseCurrent(self, *args):
        return _AnimatSimPy.PulsedLinkage_PulseCurrent(self, *args)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.PulsedLinkage_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.PulsedLinkage_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.PulsedLinkage_QueryProperties(self, aryProperties)

    def StepIO(self):
        return _AnimatSimPy.PulsedLinkage_StepIO(self)

    def ResetSimulation(self):
        return _AnimatSimPy.PulsedLinkage_ResetSimulation(self)

    def StepSimulation(self):
        return _AnimatSimPy.PulsedLinkage_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.PulsedLinkage_Load(self, oXml)
PulsedLinkage_swigregister = _AnimatSimPy.PulsedLinkage_swigregister
PulsedLinkage_swigregister(PulsedLinkage)

def PulsedLinkage_CastToDerived(lpBase):
    return _AnimatSimPy.PulsedLinkage_CastToDerived(lpBase)
PulsedLinkage_CastToDerived = _AnimatSimPy.PulsedLinkage_CastToDerived

class RemoteControl(RobotIOControl):
    __swig_setmethods__ = {}
    for _s in [RobotIOControl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RemoteControl, name, value)
    __swig_getmethods__ = {}
    for _s in [RobotIOControl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RemoteControl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimatSimPy.delete_RemoteControl
    __del__ = lambda self: None
    __swig_getmethods__["CastToDerived"] = lambda x: _AnimatSimPy.RemoteControl_CastToDerived
    if _newclass:
        CastToDerived = staticmethod(_AnimatSimPy.RemoteControl_CastToDerived)

    def Links(self):
        return _AnimatSimPy.RemoteControl_Links(self)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.RemoteControl_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.RemoteControl_RemoveItem(self, strItemType, strID, bThrowError)

    def SetupIO(self):
        return _AnimatSimPy.RemoteControl_SetupIO(self)

    def StepIO(self):
        return _AnimatSimPy.RemoteControl_StepIO(self)

    def ShutdownIO(self):
        return _AnimatSimPy.RemoteControl_ShutdownIO(self)

    def Initialize(self):
        return _AnimatSimPy.RemoteControl_Initialize(self)

    def StepSimulation(self):
        return _AnimatSimPy.RemoteControl_StepSimulation(self)

    def ResetSimulation(self):
        return _AnimatSimPy.RemoteControl_ResetSimulation(self)

    def AfterResetSimulation(self):
        return _AnimatSimPy.RemoteControl_AfterResetSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.RemoteControl_Load(self, oXml)
RemoteControl_swigregister = _AnimatSimPy.RemoteControl_swigregister
RemoteControl_swigregister(RemoteControl)

def RemoteControl_CastToDerived(lpBase):
    return _AnimatSimPy.RemoteControl_CastToDerived(lpBase)
RemoteControl_CastToDerived = _AnimatSimPy.RemoteControl_CastToDerived

class Neuron(Node):
    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Neuron, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Neuron, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Neuron()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Neuron
    __del__ = lambda self: None

    def Cn(self, *args):
        return _AnimatSimPy.Neuron_Cn(self, *args)

    def Gn(self, *args):
        return _AnimatSimPy.Neuron_Gn(self, *args)

    def Vth(self, *args):
        return _AnimatSimPy.Neuron_Vth(self, *args)

    def Fmin(self, *args):
        return _AnimatSimPy.Neuron_Fmin(self, *args)

    def Gain(self, *args):
        return _AnimatSimPy.Neuron_Gain(self, *args)

    def ExternalI(self, *args):
        return _AnimatSimPy.Neuron_ExternalI(self, *args)

    def AddExternalI(self, fltVal):
        return _AnimatSimPy.Neuron_AddExternalI(self, fltVal)

    def IntrinsicCurrent(self, *args):
        return _AnimatSimPy.Neuron_IntrinsicCurrent(self, *args)

    def Vrest(self, *args):
        return _AnimatSimPy.Neuron_Vrest(self, *args)

    def VNoiseMax(self, *args):
        return _AnimatSimPy.Neuron_VNoiseMax(self, *args)

    def UseNoise(self, *args):
        return _AnimatSimPy.Neuron_UseNoise(self, *args)

    def UseAccom(self, *args):
        return _AnimatSimPy.Neuron_UseAccom(self, *args)

    def RelativeAccommodation(self, *args):
        return _AnimatSimPy.Neuron_RelativeAccommodation(self, *args)

    def AccommodationTimeConstant(self, *args):
        return _AnimatSimPy.Neuron_AccommodationTimeConstant(self, *args)

    def Iinit(self, *args):
        return _AnimatSimPy.Neuron_Iinit(self, *args)

    def InitTime(self, *args):
        return _AnimatSimPy.Neuron_InitTime(self, *args)

    def GainType(self, *args):
        return _AnimatSimPy.Neuron_GainType(self, *args)

    def Vn(self):
        return _AnimatSimPy.Neuron_Vn(self)

    def FiringFreq(self, lpModule):
        return _AnimatSimPy.Neuron_FiringFreq(self, lpModule)

    def NeuronType(self):
        return _AnimatSimPy.Neuron_NeuronType(self)

    def GetSynapses(self):
        return _AnimatSimPy.Neuron_GetSynapses(self)

    def Copy(self, lpSource):
        return _AnimatSimPy.Neuron_Copy(self, lpSource)

    def AddSynapse(self, *args):
        return _AnimatSimPy.Neuron_AddSynapse(self, *args)

    def RemoveSynapse(self, *args):
        return _AnimatSimPy.Neuron_RemoveSynapse(self, *args)

    def GetSynapse(self, iIndex):
        return _AnimatSimPy.Neuron_GetSynapse(self, iIndex)

    def TotalSynapses(self):
        return _AnimatSimPy.Neuron_TotalSynapses(self)

    def ClearSynapses(self):
        return _AnimatSimPy.Neuron_ClearSynapses(self)

    def FindSynapseListPos(self, strID, bThrowError=True):
        return _AnimatSimPy.Neuron_FindSynapseListPos(self, strID, bThrowError)

    def AddExternalNodeInput(self, iTargetDataType, fltInput):
        return _AnimatSimPy.Neuron_AddExternalNodeInput(self, iTargetDataType, fltInput)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify):
        return _AnimatSimPy.Neuron_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify)

    def VerifySystemPointers(self):
        return _AnimatSimPy.Neuron_VerifySystemPointers(self)

    def Initialize(self):
        return _AnimatSimPy.Neuron_Initialize(self)

    def TimeStepModified(self):
        return _AnimatSimPy.Neuron_TimeStepModified(self)

    def ResetSimulation(self):
        return _AnimatSimPy.Neuron_ResetSimulation(self)

    def StepSimulation(self):
        return _AnimatSimPy.Neuron_StepSimulation(self)

    def InjectCurrent(self, fltVal):
        return _AnimatSimPy.Neuron_InjectCurrent(self, fltVal)

    def CalculateSnapshotByteSize(self):
        return _AnimatSimPy.Neuron_CalculateSnapshotByteSize(self)

    def SaveKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.Neuron_SaveKeyFrameSnapshot(self, aryBytes, lIndex)

    def LoadKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.Neuron_LoadKeyFrameSnapshot(self, aryBytes, lIndex)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.Neuron_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Neuron_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Neuron_QueryProperties(self, aryProperties)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.Neuron_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.Neuron_RemoveItem(self, strItemType, strID, bThrowError)

    def Load(self, oXml):
        return _AnimatSimPy.Neuron_Load(self, oXml)
Neuron_swigregister = _AnimatSimPy.Neuron_swigregister
Neuron_swigregister(Neuron)

class Synapse(Link):
    __swig_setmethods__ = {}
    for _s in [Link]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Synapse, name, value)
    __swig_getmethods__ = {}
    for _s in [Link]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Synapse, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_Synapse()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_Synapse
    __del__ = lambda self: None

    def FromNeuron(self):
        return _AnimatSimPy.Synapse_FromNeuron(self)

    def Weight(self, *args):
        return _AnimatSimPy.Synapse_Weight(self, *args)

    def WeightPointer(self):
        return _AnimatSimPy.Synapse_WeightPointer(self)

    def HasDelay(self, *args):
        return _AnimatSimPy.Synapse_HasDelay(self, *args)

    def DelayInterval(self, *args):
        return _AnimatSimPy.Synapse_DelayInterval(self, *args)

    def SetDelayBufferSize(self):
        return _AnimatSimPy.Synapse_SetDelayBufferSize(self)

    def CalculateCurrent(self):
        return _AnimatSimPy.Synapse_CalculateCurrent(self)

    def Modulation(self):
        return _AnimatSimPy.Synapse_Modulation(self)

    def ModulationPointer(self):
        return _AnimatSimPy.Synapse_ModulationPointer(self)

    def CalculateModulation(self, lpModule):
        return _AnimatSimPy.Synapse_CalculateModulation(self, lpModule)

    def GetCompoundSynapse(self, iCompoundIndex):
        return _AnimatSimPy.Synapse_GetCompoundSynapse(self, iCompoundIndex)

    def FindSynapseListPos(self, strID, bThrowError=True):
        return _AnimatSimPy.Synapse_FindSynapseListPos(self, strID, bThrowError)

    def AddSynapse(self, strXml, bDoNotInit):
        return _AnimatSimPy.Synapse_AddSynapse(self, strXml, bDoNotInit)

    def RemoveSynapse(self, strID, bThrowError=True):
        return _AnimatSimPy.Synapse_RemoveSynapse(self, strID, bThrowError)

    def Process(self, fltCurrent):
        return _AnimatSimPy.Synapse_Process(self, fltCurrent)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.Synapse_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.Synapse_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.Synapse_QueryProperties(self, aryProperties)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.Synapse_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.Synapse_RemoveItem(self, strItemType, strID, bThrowError)

    def SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify):
        return _AnimatSimPy.Synapse_SetSystemPointers(self, lpSim, lpStructure, lpModule, lpNode, bVerify)

    def VerifySystemPointers(self):
        return _AnimatSimPy.Synapse_VerifySystemPointers(self)

    def ResetSimulation(self):
        return _AnimatSimPy.Synapse_ResetSimulation(self)

    def Initialize(self):
        return _AnimatSimPy.Synapse_Initialize(self)

    def TimeStepModified(self):
        return _AnimatSimPy.Synapse_TimeStepModified(self)

    def Load(self, oXml):
        return _AnimatSimPy.Synapse_Load(self, oXml)
Synapse_swigregister = _AnimatSimPy.Synapse_swigregister
Synapse_swigregister(Synapse)

class PacemakerNeuron(Neuron):
    __swig_setmethods__ = {}
    for _s in [Neuron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PacemakerNeuron, name, value)
    __swig_getmethods__ = {}
    for _s in [Neuron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PacemakerNeuron, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_PacemakerNeuron()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_PacemakerNeuron
    __del__ = lambda self: None

    def Il(self, *args):
        return _AnimatSimPy.PacemakerNeuron_Il(self, *args)

    def Ih(self, *args):
        return _AnimatSimPy.PacemakerNeuron_Ih(self, *args)

    def Vssm(self, *args):
        return _AnimatSimPy.PacemakerNeuron_Vssm(self, *args)

    def Mtl(self, *args):
        return _AnimatSimPy.PacemakerNeuron_Mtl(self, *args)

    def Btl(self, *args):
        return _AnimatSimPy.PacemakerNeuron_Btl(self, *args)

    def Th(self, *args):
        return _AnimatSimPy.PacemakerNeuron_Th(self, *args)

    def ITime(self, *args):
        return _AnimatSimPy.PacemakerNeuron_ITime(self, *args)

    def IntrinsicType(self, *args):
        return _AnimatSimPy.PacemakerNeuron_IntrinsicType(self, *args)

    def NeuronType(self):
        return _AnimatSimPy.PacemakerNeuron_NeuronType(self)

    def Copy(self, lpSource):
        return _AnimatSimPy.PacemakerNeuron_Copy(self, lpSource)

    def ResetSimulation(self):
        return _AnimatSimPy.PacemakerNeuron_ResetSimulation(self)

    def StepSimulation(self):
        return _AnimatSimPy.PacemakerNeuron_StepSimulation(self)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.PacemakerNeuron_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.PacemakerNeuron_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.PacemakerNeuron_QueryProperties(self, aryProperties)

    def CalculateSnapshotByteSize(self):
        return _AnimatSimPy.PacemakerNeuron_CalculateSnapshotByteSize(self)

    def SaveKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.PacemakerNeuron_SaveKeyFrameSnapshot(self, aryBytes, lIndex)

    def LoadKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.PacemakerNeuron_LoadKeyFrameSnapshot(self, aryBytes, lIndex)

    def Load(self, oXml):
        return _AnimatSimPy.PacemakerNeuron_Load(self, oXml)
PacemakerNeuron_swigregister = _AnimatSimPy.PacemakerNeuron_swigregister
PacemakerNeuron_swigregister(PacemakerNeuron)

class RandomNeuron(Neuron):
    __swig_setmethods__ = {}
    for _s in [Neuron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomNeuron, name, value)
    __swig_getmethods__ = {}
    for _s in [Neuron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RandomNeuron, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_RandomNeuron()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_RandomNeuron
    __del__ = lambda self: None

    def ITime(self, *args):
        return _AnimatSimPy.RandomNeuron_ITime(self, *args)

    def IntrinsicType(self, *args):
        return _AnimatSimPy.RandomNeuron_IntrinsicType(self, *args)

    def IntrinsicCurrent(self, *args):
        return _AnimatSimPy.RandomNeuron_IntrinsicCurrent(self, *args)

    def Il(self, *args):
        return _AnimatSimPy.RandomNeuron_Il(self, *args)

    def Ilinit(self, *args):
        return _AnimatSimPy.RandomNeuron_Ilinit(self, *args)

    def NeuronType(self):
        return _AnimatSimPy.RandomNeuron_NeuronType(self)

    def Copy(self, lpSource):
        return _AnimatSimPy.RandomNeuron_Copy(self, lpSource)

    def CurrentDistribution(self, *args):
        return _AnimatSimPy.RandomNeuron_CurrentDistribution(self, *args)

    def BurstLengthDistribution(self, *args):
        return _AnimatSimPy.RandomNeuron_BurstLengthDistribution(self, *args)

    def InterbusrtLengthDistribution(self, *args):
        return _AnimatSimPy.RandomNeuron_InterbusrtLengthDistribution(self, *args)

    def CalculateSnapshotByteSize(self):
        return _AnimatSimPy.RandomNeuron_CalculateSnapshotByteSize(self)

    def SaveKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.RandomNeuron_SaveKeyFrameSnapshot(self, aryBytes, lIndex)

    def LoadKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.RandomNeuron_LoadKeyFrameSnapshot(self, aryBytes, lIndex)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.RandomNeuron_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.RandomNeuron_QueryProperties(self, aryProperties)

    def ResetSimulation(self):
        return _AnimatSimPy.RandomNeuron_ResetSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.RandomNeuron_Load(self, oXml)
RandomNeuron_swigregister = _AnimatSimPy.RandomNeuron_swigregister
RandomNeuron_swigregister(RandomNeuron)

class BistableNeuron(Neuron):
    __swig_setmethods__ = {}
    for _s in [Neuron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BistableNeuron, name, value)
    __swig_getmethods__ = {}
    for _s in [Neuron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BistableNeuron, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_BistableNeuron()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_BistableNeuron
    __del__ = lambda self: None

    def Vsthi(self, *args):
        return _AnimatSimPy.BistableNeuron_Vsthi(self, *args)

    def IntrinsicCurrent(self, *args):
        return _AnimatSimPy.BistableNeuron_IntrinsicCurrent(self, *args)

    def Il(self, *args):
        return _AnimatSimPy.BistableNeuron_Il(self, *args)

    def Ih(self, *args):
        return _AnimatSimPy.BistableNeuron_Ih(self, *args)

    def NeuronType(self):
        return _AnimatSimPy.BistableNeuron_NeuronType(self)

    def Copy(self, lpSource):
        return _AnimatSimPy.BistableNeuron_Copy(self, lpSource)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.BistableNeuron_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.BistableNeuron_QueryProperties(self, aryProperties)

    def ResetSimulation(self):
        return _AnimatSimPy.BistableNeuron_ResetSimulation(self)

    def StepSimulation(self):
        return _AnimatSimPy.BistableNeuron_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.BistableNeuron_Load(self, oXml)
BistableNeuron_swigregister = _AnimatSimPy.BistableNeuron_swigregister
BistableNeuron_swigregister(BistableNeuron)

class TonicNeuron(Neuron):
    __swig_setmethods__ = {}
    for _s in [Neuron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TonicNeuron, name, value)
    __swig_getmethods__ = {}
    for _s in [Neuron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TonicNeuron, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_TonicNeuron()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_TonicNeuron
    __del__ = lambda self: None

    def Ih(self, *args):
        return _AnimatSimPy.TonicNeuron_Ih(self, *args)

    def NeuronType(self):
        return _AnimatSimPy.TonicNeuron_NeuronType(self)

    def Copy(self, lpSource):
        return _AnimatSimPy.TonicNeuron_Copy(self, lpSource)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.TonicNeuron_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.TonicNeuron_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.TonicNeuron_Load(self, oXml)
TonicNeuron_swigregister = _AnimatSimPy.TonicNeuron_swigregister
TonicNeuron_swigregister(TonicNeuron)

class GatedSynapse(Synapse):
    __swig_setmethods__ = {}
    for _s in [Synapse]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GatedSynapse, name, value)
    __swig_getmethods__ = {}
    for _s in [Synapse]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GatedSynapse, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_GatedSynapse()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_GatedSynapse
    __del__ = lambda self: None

    def InitialGateValue(self, *args):
        return _AnimatSimPy.GatedSynapse_InitialGateValue(self, *args)

    def CalculateModulation(self, lpModule):
        return _AnimatSimPy.GatedSynapse_CalculateModulation(self, lpModule)

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.GatedSynapse_GetDataPointer(self, strDataType)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.GatedSynapse_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.GatedSynapse_QueryProperties(self, aryProperties)

    def Load(self, oXml):
        return _AnimatSimPy.GatedSynapse_Load(self, oXml)
GatedSynapse_swigregister = _AnimatSimPy.GatedSynapse_swigregister
GatedSynapse_swigregister(GatedSynapse)

class ModulatedSynapse(Synapse):
    __swig_setmethods__ = {}
    for _s in [Synapse]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModulatedSynapse, name, value)
    __swig_getmethods__ = {}
    for _s in [Synapse]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModulatedSynapse, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ModulatedSynapse()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ModulatedSynapse
    __del__ = lambda self: None

    def GetDataPointer(self, strDataType):
        return _AnimatSimPy.ModulatedSynapse_GetDataPointer(self, strDataType)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.ModulatedSynapse_QueryProperties(self, aryProperties)

    def CalculateModulation(self, lpModule):
        return _AnimatSimPy.ModulatedSynapse_CalculateModulation(self, lpModule)
ModulatedSynapse_swigregister = _AnimatSimPy.ModulatedSynapse_swigregister
ModulatedSynapse_swigregister(ModulatedSynapse)

class ModulateNeuronPropSynapse(Synapse):
    __swig_setmethods__ = {}
    for _s in [Synapse]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModulateNeuronPropSynapse, name, value)
    __swig_getmethods__ = {}
    for _s in [Synapse]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModulateNeuronPropSynapse, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_ModulateNeuronPropSynapse()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_ModulateNeuronPropSynapse
    __del__ = lambda self: None

    def ModulationGain(self, *args):
        return _AnimatSimPy.ModulateNeuronPropSynapse_ModulationGain(self, *args)

    def PropertyName(self, *args):
        return _AnimatSimPy.ModulateNeuronPropSynapse_PropertyName(self, *args)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.ModulateNeuronPropSynapse_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.ModulateNeuronPropSynapse_QueryProperties(self, aryProperties)

    def Process(self, fltCurrent):
        return _AnimatSimPy.ModulateNeuronPropSynapse_Process(self, fltCurrent)

    def ResetSimulation(self):
        return _AnimatSimPy.ModulateNeuronPropSynapse_ResetSimulation(self)

    def Initialize(self):
        return _AnimatSimPy.ModulateNeuronPropSynapse_Initialize(self)

    def Load(self, oXml):
        return _AnimatSimPy.ModulateNeuronPropSynapse_Load(self, oXml)
ModulateNeuronPropSynapse_swigregister = _AnimatSimPy.ModulateNeuronPropSynapse_swigregister
ModulateNeuronPropSynapse_swigregister(ModulateNeuronPropSynapse)

class FrFiringRateModule(NeuralModule):
    __swig_setmethods__ = {}
    for _s in [NeuralModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrFiringRateModule, name, value)
    __swig_getmethods__ = {}
    for _s in [NeuralModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrFiringRateModule, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimatSimPy.new_FrFiringRateModule()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimatSimPy.delete_FrFiringRateModule
    __del__ = lambda self: None

    def ModuleName(self):
        return _AnimatSimPy.FrFiringRateModule_ModuleName(self)

    def Kill(self, bState=True):
        return _AnimatSimPy.FrFiringRateModule_Kill(self, bState)

    def Initialize(self):
        return _AnimatSimPy.FrFiringRateModule_Initialize(self)

    def ResetSimulation(self):
        return _AnimatSimPy.FrFiringRateModule_ResetSimulation(self)

    def StepSimulation(self):
        return _AnimatSimPy.FrFiringRateModule_StepSimulation(self)

    def Load(self, oXml):
        return _AnimatSimPy.FrFiringRateModule_Load(self, oXml)

    def SetData(self, strDataType, strValue, bThrowError=True):
        return _AnimatSimPy.FrFiringRateModule_SetData(self, strDataType, strValue, bThrowError)

    def QueryProperties(self, aryProperties):
        return _AnimatSimPy.FrFiringRateModule_QueryProperties(self, aryProperties)

    def AddItem(self, strItemType, strXml, bThrowError=True, bDoNotInit=False):
        return _AnimatSimPy.FrFiringRateModule_AddItem(self, strItemType, strXml, bThrowError, bDoNotInit)

    def RemoveItem(self, strItemType, strID, bThrowError=True):
        return _AnimatSimPy.FrFiringRateModule_RemoveItem(self, strItemType, strID, bThrowError)

    def AddNeuron(self, strXml, bDoNotInit=False):
        return _AnimatSimPy.FrFiringRateModule_AddNeuron(self, strXml, bDoNotInit)

    def RemoveNeuron(self, strID, bThrowError=True):
        return _AnimatSimPy.FrFiringRateModule_RemoveNeuron(self, strID, bThrowError)

    def FindNeuronListPos(self, strID, bThrowError=True):
        return _AnimatSimPy.FrFiringRateModule_FindNeuronListPos(self, strID, bThrowError)

    def ActiveArray(self, *args):
        return _AnimatSimPy.FrFiringRateModule_ActiveArray(self, *args)

    def InactiveArray(self, *args):
        return _AnimatSimPy.FrFiringRateModule_InactiveArray(self, *args)

    def CalculateSnapshotByteSize(self):
        return _AnimatSimPy.FrFiringRateModule_CalculateSnapshotByteSize(self)

    def SaveKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.FrFiringRateModule_SaveKeyFrameSnapshot(self, aryBytes, lIndex)

    def LoadKeyFrameSnapshot(self, aryBytes, lIndex):
        return _AnimatSimPy.FrFiringRateModule_LoadKeyFrameSnapshot(self, aryBytes, lIndex)
FrFiringRateModule_swigregister = _AnimatSimPy.FrFiringRateModule_swigregister
FrFiringRateModule_swigregister(FrFiringRateModule)

# This file is compatible with both classic and new-style classes.


